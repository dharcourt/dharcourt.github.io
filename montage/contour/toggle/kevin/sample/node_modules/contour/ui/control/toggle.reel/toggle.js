/**
 * @module ui/toggle-switch.reel
 * @requires montage/ui/component
 */
var AbstractControl = require("montage/ui/base/abstract-control").AbstractControl,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class ToggleSwitch
 * @extends Component
 */
exports.Toggle = AbstractControl.specialize(/** @lends ToggleSwitch# */ {

    constructor: {
        value: function Toggle() {
            this.super();
            this._pressComposer = new PressComposer();
            this.addComposer(this._pressComposer);
        }
    },

    label: {
        value: null
    },

    _enabled: {
        value: true
    },

    /**
     * Enables or disables the toggle switch from user input. When this
     * property is set to `false`, the "montage--disabled" CSS style is applied
     * to the button's DOM element during the next draw cycle. When set to
     * `true` the "montage--disabled" CSS class is removed from the element's
     * class list.
     * @type {boolean}
     */
    enabled: {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this._enabled = value;
            this.needsDraw = true;
        }
    },

    acceptsActiveTarget: {
        value: function () {
            return this.enabled;
        }
    },

    _pressComposer: {
        value: null
    },

    _checked: {
        value: false
    },

    checked: {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            this._checked = value;
            this.needsDraw = true;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            this._pressComposer.addEventListener("press", this, false);
        }
    },

    /**
     * Called when the user has interacted with the toggle switch.
     * @private
     */
    handlePress: {
        value: function (event) {
            if (!this.enabled) {
                return;
            }

            this.checked = !this.checked;
            this.dispatchActionEvent();
        }
    },

    handleKeyup: {
        value: function (event) {
            if (!this.enabled) {
                return;
            }

            // action event on spacebar
            if (event.keyCode === 32) {
                this.checked = !this.checked;
                this.dispatchActionEvent();
            }
        }
    },

    enterDocument: {
        value: function (firstDraw) {
            this.templateObjects.toggleSwitch.element.setAttribute("role", "checkbox");
            this.element.addEventListener("keyup", this, false);
        }
    },

    draw: {
        value: function () {
            this.templateObjects.toggleSwitch.element.setAttribute("aria-checked", this._checked);
            this.templateObjects.toggleSwitch.element.setAttribute("aria-disabled", !this._enabled);
        }
    }
});
