var Montage = require("montage").Montage,
    MapDataConverter = require("logic/map/converters/map-data-converter").MapDataConverter,
    Projections = require("logic/map/projection-utilities").Projections,
    ProjectionUtilities = require("logic/map/projection-utilities").ProjectionUtilities,
    Enumeration = require("montage-data/logic/model/enumeration").Enumeration,
    ObjectDescriptor = require("montage-data/logic/model/object-descriptor").ObjectDescriptor;

/**
 * One of the products of a {@link Hazard}.
 *
 * @class Product
 * @extends external:Montage
 */
var Product = exports.Product = Montage.specialize(/** @lends Product# */ {

    /***************************************************************************
     * Basic information
     */

    comment: {
        value: undefined
    },

    creationDate: {
        value: undefined
    },

    geolocations: {
        value: undefined
    },

    hazard: {
        value: undefined
    },

    id: {
        value: undefined
    },

    isHidden: {
        value: undefined
    },

    name: {
        value: undefined
    },

    organizationAcronym: {
        value: undefined
    },

    securityFlag: {
        value: undefined
    },

    timelineDate: {
        value: undefined
    },

    type: {
        value: undefined
    },

    updateDate: {
        value: undefined
    },

    updateUser: {
        value: undefined
    },

    url: {
        value: undefined
    },

    user: {
        value: undefined
    },

    /***************************************************************************
     * Hierarchy
     */

    parent: {
        value: null
    },

    children: {
        value: null
    },

    /***************************************************************************
     * Derived properties
     */

    previewUrl: {
        get: function () {
            if (!this._previewUrl) {
                this._previewUrl = Product.previewUrl + "?prodid=" + this.id;
            }
            return this._previewUrl;
        }
    },

    displayLink: {
        get: function () {
            return this.url || this.previewUrl;
        }
    },

    coordinates: {
        get: function () {
            if (!this._coordinates && this.geolocations) {
                try {
                    var point =  MapDataConverter.wktToGeojson(this.geolocations);
                    this._coordinates = ProjectionUtilities.inverse(Projections["102100"], point.geometry.coordinates);
                    console.log("Successfully parsed geolocation to coordinate (", this.geolocations, ")");
                } catch(e) {
                    console.warn("---------------------------------");
                    console.warn("Unable to parse getLocations to coordinate (", this.geolocations, ")");
                }
            }
            return this._coordinates;
        }
    }

}, {

    /***************************************************************************
     * Montage data
     */

    /**
     * The Montage Data type of products.
     *
     * @type {external:ObjectDescriptor}
     */
    TYPE: {
        get: ObjectDescriptor.getterFor(exports, "Product")
    },

    /**
     * The base URL of product previews.
     *
     * @type {string}
     */
    previewUrl: {
        value: null
    },

    /**
     * Type of {@link HazardLayer#hazardTypes} elements.
     *
     * @class
     */
    Type: {
        get: Enumeration.getterFor("_Type", "id", "name", {}, {
            FILE_PRODUCT: ["FILE_PRODUCT", "File"],
            FOLDER_PRODUCT: ["FOLDER_PRODUCT", "Folder"],
            URL_PRODUCT: ["URL_PRODUCT", "URL"],
            TEXT_PRODUCT: ["TEXT_PRODUCT", "Text"]
        })
    }

});
