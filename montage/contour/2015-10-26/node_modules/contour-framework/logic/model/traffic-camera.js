/**
 * @module logic/TrafficCamera.js
 */
var Montage = require("montage").Montage,
    Feature = require("logic/model/feature").Feature;

var AttributeMap = {
    "active": "active",
    "cam_id": "camId",
    "city": "city",
    "country": "country",
    "description": "description",
    "dot": "dot",
    "hidden": "hidden",
    "id": "id",
    "lat": "lat",
    "lng": "lng",
    "presentation_mode": "presentationMode",
    "presentation_type": "presentationType",
    "visit_url": "visitUrl"
};

/**
 * @class product
 * @extends Feature
 *
 *
 */
var TrafficCamera = exports.TrafficCamera = Feature.specialize(/** @lends product.prototype */ {

    constructor: {
        value: function TrafficCamera() {
        }
    }

}, {

    initialize: {
        value: function (data, layer) {
            var camera = new TrafficCamera();
            camera.properties = {};
            for (var key in data) {
                if (AttributeMap[key]) {
                    camera.properties[AttributeMap[key]] = data[key];
                } else {
                    camera.properties[key] = data[key];
                }
            }
            camera.id = camera.properties.id;
            camera.layer = layer;
            camera.geometry = {
                "type": "Point"
            };
            camera.geometry.coordinates = [camera.properties.lng, camera.properties.lat];
            camera.properties.point = camera.geometry.coordinates;
            camera.properties.isEnabled = false;

            Object.defineProperty(camera, "searchTerms", {
                writeable: false,
                get: function () {
                    var strings = [this.properties.description, this.properties.city, this.properties.country],
                        terms = {},
                        string, split, i, j, n, m;
                    for (i = 0, n = strings.length; i < n; ++i) {
                        string = strings[i] && strings[i].replace(/[\W_]+/g, " ").trim().toLowerCase();
                        split = string && string.split(" ");
                        for (j = 0, m = split ? split.length : 0; j < m; ++j) {
                            terms[split[j]] = this;
                        }
                    }
                    return terms;
                }
            });
            return camera;
        }
    }
});
