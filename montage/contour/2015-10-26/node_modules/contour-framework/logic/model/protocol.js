var Enumeration = require("montage-data/logic/model/enumeration").Enumeration;

/**
 * One of the protocols used by map services.
 *
 * @class
 * @extends external:Enumeration
 */
exports.Protocol = Enumeration.specialize("id", "name", /** @lends Protocol */ {

    /** @type {Protocol} */
    ARCGIS: ["ArcGIS Server REST", "ArcGIS", {
        makeUrlWithTileAndLayer: {
            value: function (tile, layer) {
                var bounds = layer.mapService.projection.projectBounds(tile.bounds),
                    url = layer.mapService.url;
                url += "/export";
                url += "?format=png";
                url += "&bboxSR=";
                url += layer.mapService.projection.srid;
                url += "&SRS=EPSG:";
                url += layer.mapService.projection.srid;
                url += "&version=";
                url += layer.mapService.protocolVersion;
                url += "&BBOX=";
                url += bounds.xMin;
                url += ",";
                url += bounds.yMin;
                url += ",";
                url += bounds.xMax;
                url += ",";
                url += bounds.yMax;
                url += "&layers=show:";
                url += layer.mapServiceLayerIndex;
                url += "&size=256,256";
                url += "&transparent=true";
                url += "&f=image";
                url += "&dpi=96";
                url += "&imageSR=102100";
                return url;
            }
        }
    }],

    /** @type {Protocol} */
    BING: ["Microsoft VirtualEarth", "Bing", {
        makeUrlWithTileAndLayer: {
            value: function (tile, layer) {
                var url;
                if (layer.name === "Bing Imagery") {
                    url = "http://ecn.t";
                    url += this._subdomain(tile.x, tile.y);
                    url += ".tiles.virtualearth.net/tiles/a";
                    url += this._quadkey(tile.x, tile.y, tile.z);
                    url += ".jpeg?g=1124&rand=";
                    url += Date.now();
                } else if (layer.name === "Bing Hybrid") {
                    url = "http://ecn.dynamic.t";
                    url += this._subdomain(tile.x, tile.y);
                    url += ".tiles.virtualearth.net/comp/ch/";
                    url += this._quadkey(tile.x, tile.y, tile.z);
                    url += "?mkt=en-en&it=A,G,L&rand=";
                    url += Date.now();
                } else if (layer.name === "Bing Roads") {
                    url = "http://ecn.dynamic.t";
                    url += this._subdomain(tile.x, tile.y);
                    url += ".tiles.virtualearth.net/comp/CompositionHandler/";
                    url += this._quadkey(tile.x, tile.y, tile.z);
                    url += "?mkt=en-en&it=G,VE,BX,L,LA&rand=";
                    url += Date.now();
                }
                return url;
            }
        },
        _subdomain: {
            value: function (x, y) {
                return Math.abs(x + y) % 4;
            }
        },
        _quadkey: {
            value: function (x, y, z) {
                var digit = String((x & 1 << z - 1 ? 1 : 0) + (y & 1 << z - 1 ? 2 : 0));
                return z === 1 ? digit : digit + this._quadkey(x, y, z - 1);
            }
        }
    }],

    /** @type {Protocol} */
    CAMERA: ["Live Camera Service", "Camera"],

    /** @type {Protocol} */
    GOOGLE: ["Google", "Google"],

    /** @type {Protocol} */
    HAZARD: ["PDC HP REST Service", "Hazard"],

    /** @type {Protocol} */
    SOCIAL: ["SocialFeed", "Social"],

    /** @type {Protocol} */
    WMS: ["WMS", "WMS", {
        makeUrlWithTileAndLayer: {
            value: function (tile, layer) {
                var bounds = layer.mapService.projection.projectBounds(tile.bounds),
                    url = layer.mapService.url;
                url += "LAYERS=";
                url += layer.mapServiceLayerId;
                url += "&WIDTH=256";
                url += "&HEIGHT=256";
                url += "&format=image/png";
                url += "&bboxSR=";
                url += layer.mapService.projection.srid;
                url += "&CRS=EPSG:";
                url += layer.mapService.projection.srid;
                url += "&SRS=EPSG:";
                url += layer.mapService.projection.srid;
                url += "&version=";
                url += layer.mapService.protocolVersion;
                url += "&BBOX=";
                url += bounds.xMin;
                url += ",";
                url += bounds.yMin;
                url += ",";
                url += bounds.xMax;
                url += ",";
                url += bounds.yMax;
                url += "&service=WMS";
                url += "&TRANSPARENT=TRUE";
                url += "&request=GetMap";
                url += "&STYLES=";
                if (tile.moment) {
                    url += "&TIME=";
                    url += tile.moment.utc().format("YYYY-MM-DDTHH:mm:ss");
                    url += ".000Z";
                }
                return url;
            }
        }
    }],

    /** @type {Protocol} */
    WMTS: ["WMTS", "WMTS", {
        makeUrlWithTileAndLayer: {
            value: function (tile, layer) {
                var url = layer.mapService.url;
                url += "/WMTS";
                url += "?service=WMTS";
                url += "&request=gettile";
                url += "&format=image/png";
                url += "&tileMatrix=" + tile.z;
                url += "&TileRow=" + tile.y;
                url += "&TileCol=" + tile.x;
                url += "&style=default";
                url += "&tileMatrixSet=default028mm";
                return url;
            }
        }
    }]

});
