var Montage = require("montage").Montage,
    ObjectDescriptor = require("montage-data/logic/model/object-descriptor").ObjectDescriptor;

/**
 * @typedef ApplicationDefinition
 * @type {Object}
 * @property {string} ids - Identifiers for the application.
 */

/**
 * @typedef FeatureFieldDefinition
 * @type {Object}
 * @property {Array.<Layer>} defaultSummaryCount - The number of fields to use
 *                                                 as summary fields for layers
 *                                                 that don't have specific
 *                                                 summary fields defined.
 * @property {Array.<Layer>} ignoredFields       - An object whose property
 *                                                 names are the names and
 *                                                 aliases of the feature fields
 *                                                 to ignore. The value of each
 *                                                 of those ignored field
 *                                                 properties is `true`.
 */

/**
 * @typedef LayerDefinition
 * @type {Object}
 * @property {Array.<Layer>} all  - All layers available to the application.
 * @property {Array.<Layer>} list - Just the layers that should be displayed in
 *                                  the layer panel's list and tree tabs.
 * @property {LayerNode}     tree - The root of the tree of LayerNodes to be
 *                                  displayed in the layer panel's tree tab.
 */

/**
 * @typedef ProductDefinition
 * @type {Object}
 * @property {string} previewUrl - The base URL used to construct preview URLs.
 */

/**
 * The configuration information for a Contour application.
 *
 * @class
 * @extends external:Montage
 */
exports.Configuration = Montage.specialize(/** @lends Configuration# */{

    /**
     * Information about the application.
     *
     * @type {ApplicationDefinition}
     */
    application: {
        get: function () {
            if (!this._application) {
                this._application = {};
            }
            return this._application;
        }
    },

    /**
     * Information about these layers' feature fields.
     *
     * @type {FeatureFieldDefinition}
     */
    featureFields: {
        get: function () {
            if (!this._layers) {
                this._layers = {
                    defaultSummaryCount: 3,
                    ignored: {}
                };
            }
            return this._layers;
        }
    },

    /**
     * Information about icons.
     *
     * @type {IconDefinition}
     */
    capabilities: {
        get: function () {
            if (!this._capabilities) {
                this._capabilities = {};
            }
            return this._capabilities;
        }
    },

    /**
     * The feature layers available to this application.
     *
     * @type {LayerDefinition}
     */
    layers: {
        get: function () {
            if (!this._layers) {
                this._layers = {
                    all: [],
                    background: [],
                    hazard: undefined,
                    list: [],
                    tree: undefined
                };
            }
            return this._layers;
        }
    },

    /**
     * Information about products.
     *
     * @type {ProductDefinition}
     */
    products: {
        get: function () {
            if (!this._products) {
                this._products = {
                    previewUrl: undefined
                };
            }
            return this._products;
        }
    }

}, {

    /**
     * The Montage Data type of configurations.
     *
     * @type {external:ObjectDescriptor}
     */
    TYPE: {
        get: ObjectDescriptor.getterFor(exports, "Configuration")
    }

});
