var Montage = require("montage").Montage,
    FileSaver = require("FileSaver.js"),
    GeometryUtilities = require("logic/map/geometry-utilities").GeometryUtilities,
    FileExport = require("logic/model/file-export").FileExport;


var IdentifySummary = exports.IdentifySummary = Montage.specialize(/** @lends IdentifySummary.prototype */ {

    bbox: { value: null },

    layers: { value: null },

    name: { value: null }

}, {

    _convertLayersToCSV: {
        value: function (layers) {
            var csvContent =  "",
                i, j, fieldLength, featureLength, field, feature, dataString, fieldValue;
            layers.forEach(function(layer, index){
                dataString = layer.name + "\n" + "id,";
                for (i = 0, fieldLength = layer.fields.length; i < fieldLength; i++) {
                    field = layer.fields[i];
                    dataString += field.name;
                    dataString += (i + 1 < layer.fields.length) ? "," : "\n";
                }
                for (j = 0, featureLength = layer.features.length; j < featureLength; j++) {
                    feature = layer.features[j];
                    dataString += feature.id+",";
                    for (i = 0; i < fieldLength; i++) {
                        field = layer.fields[i];
                        fieldValue = feature.valueForField(field);
                        if (typeof fieldValue === "string" && fieldValue.indexOf(",") > -1) {
                            fieldValue = "\"" + fieldValue + "\"";
                        }
                        dataString += fieldValue;
                        dataString += (i + 1 < layer.fields.length) ? "," : "\n";
                    }
                }
                csvContent += dataString;
                csvContent += index < layers.length ? "\n" : "";
            });

            return csvContent;
        }
    },

    _exportStringToFile: {
        value: function (csvContent) {
            var fileExport = FileExport.initializeFileExport(csvContent, "Download.csv");
            fileExport.saveFile();
        }
    },

    exportLayersToCSV: {
        value: function (layers) {
            var csvContent = IdentifySummary._convertLayersToCSV(layers);
            IdentifySummary._exportStringToFile(csvContent);
        }
    },

    exportSummariesToCSV: {
        value: function (summaries) {
            var i, j, summariesLength, summary,
            //csvContent = "data:text/csv;charset=utf-8,";
                csvContent = "";
            for (i = 0, summariesLength = summaries.length; i < summariesLength; i ++) {
                summary = summaries[i];
                csvContent += summary.name+"\n";
                csvContent += IdentifySummary._convertLayersToCSV(summary.layers);
                csvContent += i === (summariesLength - 1) ? "" : "\n";
            }
            IdentifySummary._exportStringToFile(csvContent);
        }
    },


    initializeIdentifySummary: {
        value: function (name, boundingBox, layers) {
            var identifySummary = new IdentifySummary();
            identifySummary.name = name;
            identifySummary.bbox = boundingBox;
            identifySummary.layers = [];
            var features, feature, key,
                matches, doesContain,
                layer,
                i, length, identifyResult;
            for (i = 0, length = layers.length; i < length; i++) {
                layer = layers[i];
                if (layer.type.name === "Feature") {
                    features = layer.areFeaturesGlobal ? layer.features.all : layer.features.visible;
                    matches = [];
                    for (key in features) {
                        feature = features[key];
                        doesContain = GeometryUtilities.boundingBoxContainsFeature(identifySummary.bbox, feature);
                        if (doesContain) {
                            matches.push(feature);
                        }
                    }
                    if (matches.length > 0) {
                        identifyResult = {
                            type: "FeatureCollection",
                            properties: {
                                layer: layer.id
                            },
                            name: layer.name,
                            fields: layer.featureFields.detail,
                            features: matches
                        };
                        Object.defineProperty(identifyResult, "searchTerms", {
                            get: function() {
                                var strings = [this.name],
                                    terms = {},
                                    string, split, i, j, n, m;
                                for (i = 0, n = strings.length; i < n; ++i) {
                                    string = strings[i] && strings[i].replace(/[\W_]+/g, " ").trim().toLowerCase();
                                    split = string && string.split(" ");
                                    for (j = 0, m = split ? split.length : 0; j < m; ++j) {
                                        terms[split[j]] = this;
                                    }
                                }
                                return terms;
                            }
                        });
                        identifySummary.layers.push(identifyResult);

                    }
                }
            }
            return identifySummary;
        }
    }

});
