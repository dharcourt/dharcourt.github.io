var Montage = require("montage").Montage,
    Bounds = require("logic/model/bounds").Bounds,
    ObjectDescriptor = require("montage-data/logic/model/object-descriptor").ObjectDescriptor,
    ProjectionUtilities = require("logic/map/projection-utilities").ProjectionUtilities;

/**
 * One of the tiles in a raster {@link Layer}.
 *
 * @class Tile
 * @extends external:Montage
 */
var Tile = exports.Tile = Montage.specialize(/** @lends Tile# */ {

    x: {
        value: undefined
    },

    y: {
        value: undefined
    },

    z: {
        value: undefined
    },

    moment: {
        value: undefined
    },

    /**
     * Derived from [this.x]{@link Tile#x}, [this.y]{@link Tile#y},
     * [this.z]{@link Tile#z}, and [this.moment]{@link Tile#moment}.
     *
     * @type{?external:moment}
     */
    id: {
        get: function () {
            if (!this._id) {
                if (this.moment) {
                    this._id = (this.x || 0) + ":" + (this.y || 0) + ":" + (this.z || 0) + ":" + this.moment.unix();
                } else {
                    this._id = (this.x || 0) + ":" + (this.y || 0) + ":" + (this.z || 0);
                }
            }
            return this._id;
        }
    },

    bounds: {
        get: function() {
            var northWest = ProjectionUtilities.fromTileIdentifierToLatLng(this.x, this.y, this.z),
                southEast = ProjectionUtilities.fromTileIdentifierToLatLng(Math.floor(this.x) + 1, Math.floor(this.y) + 1, this.z),
                bounds = new Bounds();
            bounds.xMin = northWest[1] !== 180 ? northWest[1] : -180;
            bounds.yMin = southEast[0];
            bounds.xMax = southEast[1] !== -180 ? southEast[1] : 180;
            bounds.yMax = northWest[0];
            return bounds;
        }
    },

    /**
     * Set by the {@link TileService}.
     *
     * @type{?external:moment}
     */
    src: {
        value: undefined,
    },

    count: {
        value: 0
    },

    positions: {
        get: function () {
            if (!this._positions) {
                this._positions = [];
            }
            return this._positions;
        },
        set: function (positions) {
            this._positions = positions;
        }
    }

}, /** @lends Tile */ {

    /**
     * The Montage Data type of tiles.
     *
     * @type {external:ObjectDescriptor}
     */
    TYPE: {
        get: ObjectDescriptor.getterFor(exports, "Tile")
    },

    /**
     * @method
     */
    create: {
        value: function (x, y, z, moment) {
            var tile = new Tile();
            tile.x = x;
            tile.y = y;
            tile.z = z;
            tile.moment = moment;
            return tile;
        }
    }

});
