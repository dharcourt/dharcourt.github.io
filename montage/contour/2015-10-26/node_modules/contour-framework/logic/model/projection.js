var Enumeration = require("montage-data/logic/model/enumeration").Enumeration,
    Bounds = require("logic/model/bounds").Bounds,
    ProjectionUtilities = require("logic/map/projection-utilities").ProjectionUtilities,
    ProjectionUtilitiesProjections = require("logic/map/projection-utilities").Projections,
    Units = require("logic/model/units").Units;

/**
 * @class
 * @extends external:Enumeration
 */
exports.Projection = Enumeration.specialize("", /** @lends Projection.prototype */ {

    /**
     * Spatial Reference System Identifier (SRID).
     *
     * @type {string}
     */
    srid: {
        value: undefined
    },

    /**
     * @type {Units}
     */
    units: {
        value: undefined
    },

    projectPoint: {
        value: function (point) {
            var index;
            if (this.units === Units.METERS) {
                index = ProjectionUtilitiesProjections[this.srid];
                point = ProjectionUtilities.project(index, point);
            }
            return point;
        }
    },

    inverseProjectPoint: {
        value: function (point) {
            var index;
            if (this.units === Units.METERS) {
                index = ProjectionUtilitiesProjections[this.srid];
                point = ProjectionUtilities.inverse(index, point);
            }
            return point;
        }
    },

    projectBounds: {
        value: function (bounds) {
            var index, minimums, maximums;
            if (this.units === Units.METERS) {
                index = ProjectionUtilitiesProjections[this.srid];
                minimums = ProjectionUtilities.project(index, [bounds.xMin, bounds.yMin]);
                maximums = ProjectionUtilities.project(index, [bounds.xMax, bounds.yMax]);
                bounds = Bounds.withCoordinates(minimums[0], minimums[1], maximums[0], maximums[1]);
            }
            return bounds;
        }
    }

}, /** @lends Projection */ {

    /**
     * @method
     */
    withSridAndUnits: {
        value: function (srid, units) {
            var projection = new this();
            projection.srid = srid;
            projection.units = units;
            this._bySrid = this._bySrid || {};
            this._bySrid[srid] = this._bySrid[srid] || {};
            this._bySrid[srid][units ? units.id : ""] = projection;
            return projection;
        }
    },

    /**
     * @method
     */
    forSridAndUnits: {
        value: function (srid, units) {
            return this._bySrid && this._bySrid[srid] && this._bySrid[srid][units ? units.id : ""];
        }
    }

}, {});
