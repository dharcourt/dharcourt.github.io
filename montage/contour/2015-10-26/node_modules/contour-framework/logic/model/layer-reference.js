var Montage = require("montage").Montage,
    Layer = require("logic/model/layer").Layer;

/**
 * Holds a reference to one or more layer, and possibly a name, to represent
 * this layer or set of layers in layer trees, layer lists, and elsewhere where
 * users interact with layers.
 *
 * @class
 * @extends external:Montage
 */
exports.LayerReference = Montage.specialize(/** @lends LayerReference# */ {

    name: { // Obtained from the reference's layers if necessary.
        get: function () {
            var name = this._name;
            if (typeof name === "undefined" && this.layers.length) {
                name = this.layers[0].name;
            }
            return name;
        },
        set: function (name) {
            this._name = name;
        }
    },

    parent: { // Null when the reference is not in a tree.
        value: null
    },

    children: { // Null to indicate this is not a folder.
        value: null
    },

    isEnabled: {
        get: function () {
            var i, n;
            for (i = 0, n = this._layers ? this._layers.length : 0; i < n; ++i) {
                n = this._layers[i].isEnabled ? n : 0;
            }
            return n > 0;
        },
        set: function (isEnabled) {
            this.dispatchBeforeOwnPropertyChange("isEnabled", !isEnabled);
            var i, n;
            for (i = 0, n = this._layers ? this._layers.length : 0; i < n; ++i) {
                this._layers[i].isEnabled = isEnabled;
            }
            if (this.parent) {
                this.parent.isEnabled = this.parent.isEnabled;
            }
            this.dispatchOwnPropertyChange("isEnabled", isEnabled);
        }
    },

    isSelectable: {
        value: true
    },

    layers: { // Cannot be set but its contents can be modified.
        get: function() {
            if (!this._layers) {
                this._layers = [];
            }
            return this._layers;
        }
    },

    opacity: {
        get: function () {
            return this._layers && this._layers.length > 0 ? this._layers[0].opacity : 0;
        },
        set: function (value) {
            var i, n;
            for (i = 0, n = this._layers ? this._layers.length : 0; i < n; ++i) {
                this._layers[i].opacity = value;
            }
        }
    }

});
