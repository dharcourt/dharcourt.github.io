/**
 * @module logic/bookmark-service.js
 */
var ObjectService = require("logic/mock-montage-data/object-service").ObjectService,
    ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream,
    Bookmark = require("logic/model/bookmark").Bookmark,
    Figure = require("logic/model/figure").Figure,
    BookmarkSelector = require("logic/mock-service/bookmark-selector").BookmarkSelector;


/**
 * @class BookmarkService
 * @extends ObjectService
 *
 * Object representing a service that provides feature data from PDC's Bookmark
 * Service. This is a mock service used for testing purposes.
 */
var BookmarkService = exports.BookmarkService = ObjectService.specialize(/** @lends BookmarkService.prototype */ {

    constructor: {
        value: function BookmarkService() {
            this.super("bookmarkService");
        }
    },
    query: {
        value: function (selector) {

            var stream = new ObjectStream(selector);
            if (selector.bookmarkId) {
                this._fetchBookmarkById(stream, selector.bookmarkId);
            } else {
                this._fetchBookmarks(stream);
            }

            return stream;
        }
    },

    _fetchBookmarkById: {
        value: function(stream,id) {
            var url = "http://emopstest.pdc.org/bmk_srv/services/bookmarks/0/json/get_bookmark/",
                request = new XMLHttpRequest();
            request.onload = this._onLoadBookmark.bind(this, request, stream);
            request.open("post",url);
            request.setRequestHeader("Content-type","application/x-www-form-urlencoded; charset=UTF-8");
            request.setRequestHeader("Accept","application/json, text/plain, */*");
            request.withCredentials = true;
            request.send("app_id=18"+"&bookmark_id="+id);
        }
    },
    _fetchBookmarks: {
        value: function(stream) {

            var url = "http://emopstest.pdc.org/bmk_srv/services/bookmarks/1/json/get_bookmarks/",
                request = new XMLHttpRequest();
            request.onload = this._onLoad.bind(this, request, stream);
            request.open("post",url);
            request.setRequestHeader("Content-type","application/x-www-form-urlencoded");
            request.withCredentials = true;
            request.send("app_id=18");
        }
    },
    _onLoad: {
        value: function(request, stream) {
            var data = JSON.parse(request.responseText),
                bookmarks = [], i, length, bookmark;
            for (i = 0, length = data.length; i < length; i++) {
                bookmark = Bookmark.initialize(data[i]);
                bookmark.isNewObject = false;
                stream.add(bookmark);
                bookmarks.push(bookmark);
            }
            bookmarks = bookmarks.concat(BookmarkService._tmpBookmarks);
            stream.resolve(bookmarks);
        }
    },
    _onLoadBookmark: {
        value: function (request, stream) {
            var data = JSON.parse(request.responseText);
            stream.add(data[0]);
            stream.resolve(data);
            return stream;
        }
    }

}, {

    _instance: {
        value: null
    },


    _tmpBookmarks: {
        value: []
    },

    getInstance: {
        value: function () {
            if (!exports.BookmarkService._instance) {
                exports.BookmarkService._instance = new BookmarkService();
            }
            return exports.BookmarkService._instance;
        }
    },

    save: {
        value: function (bookmark) {
            if (bookmark && bookmark.isNewObject) {
                bookmark.isNewObject = false;
                BookmarkService._tmpBookmarks.push(bookmark);
            }
        }
    }
});
