/**
 * @module logic/hazard-timezone-service.js
 */
var ObjectService = require("logic/mock-montage-data/object-service").ObjectService;
var ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream;
var Hazard = require("logic/model/hazard").Hazard;
var HazardTypeSelector = require("logic/mock-service/hazard-type-selector").HazardTypeSelector;
var HazardTypeService = require("logic/mock-service/hazard-type-service").HazardTypeService;
var HazardCategorySelector = require("logic/mock-service/hazard-category-selector").HazardCategorySelector;
var HazardCategoryService = require("logic/mock-service/hazard-category-service").HazardCategoryService;
var HazardSeveritySelector = require("logic/mock-service/hazard-severity-selector").HazardSeveritySelector;
var HazardSeverityService = require("logic/mock-service/hazard-severity-service").HazardSeverityService;
var HazardIconRenderer = require("logic/map/hazard-icon-renderer").HazardIconRenderer;
var ProductSelector = require("logic/mock-service/product-selector").ProductSelector;
var ProductService = require("logic/mock-service/product-service").ProductService;


/**
 * @class HazardTimezoneService
 * @extends ObjectService
 *
 * Object representing a service that provides feature data from PDC's Hazard's timezone information
 * . This is a mock service used for testing purposes.
 */
var HazardTimezoneService = exports.HazardTimezoneService = ObjectService.specialize(/** @lends HazardTimezoneService.prototype */ {

    constructor: {
        value: function HazardTimezoneService() {
            this.super("hazardTimezoneService");
        }
    },

    query: {
        value: function (selector) {

            var stream = new ObjectStream(selector);
            this._fetchHazardTimezone(selector, stream);
            return stream;
        }
    },

    _fetchHazardTimezone: {
        value: function (selector, stream) {
            var request = new XMLHttpRequest();
            request.onload = this._onLoad.bind(this, selector, request, stream);
            var url = "http://servicestest.pdc.org/hazards/api?m=hazards&action=getTzOffset";
            if (selector.hazardId && selector.hazardId) {
                url += "&hazard=" + selector.hazardId;
            }
            request.open("get", url);
            request.withCredentials = false;
            request.send();
        }
    },

    _onLoad: {
        value: function (layer, request, stream) {
            var data = JSON.parse(request.responseText),
                timezoneOffset = 0;
            if (data.response && data.response.result) {
                timezoneOffset = data.response.data.timezoneoffset;
                timezoneOffset = timezoneOffset / (60 * 60);
            }
            stream.resolve(timezoneOffset);
        }
    }

});
