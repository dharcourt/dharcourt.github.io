/**
 * Created by Thomas on 4/21/15.
 */
/**
 * @module logic/product-service.js
 */
var ObjectService = require("logic/mock-montage-data/object-service").ObjectService;
var ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream;
var Product = require("logic/mock-model/product").Product;
var ProductSelector = require("logic/mock-service/product-selector").ProductSelector;

/**
 * @class ProductService
 * @extends ObjectService
 *
 * Object representing a service that provides feature data from PDC's product and
 * Product Service. This is a mock service used for testing purposes.
 */
var ProductService = exports.ProductService = ObjectService.specialize(/** @lends ProductService.prototype */ {

    constructor: {
        value: function productService() {
            this.super("productService");
        }
    },

    query: {
        value: function (selector) {
            var stream = new ObjectStream(selector);
            this._fetchProducts(selector,stream);
            return stream;
        }
    },


    _fetchProducts: {
        value: function (selector, stream) {
            var request = new XMLHttpRequest();
            request.onload = this._onLoad.bind(this, selector, request, stream);
            var url = "http://emopstest.pdc.org/hp_srv/services/products/1/json/get_product_list";
            request.open("post", url);
            request.setRequestHeader("Content-type","application/x-www-form-urlencoded");
            request.withCredentials = true;
            request.send("app_ids=18&hazard_id="+selector.hazard.id);
        }
    },

    _onLoad: {
        value: function (layer, request, stream) {

            var data = JSON.parse(request.responseText),
                products = [],
                i, n;

            var tmpProductMap = {};
            for (i = 0, n = data.length; i < n; i++) {
                var product = Product.initialize(data[i]);
                tmpProductMap[product.id] = product;
                if(product.type == "FOLDER_PRODUCT"){
                    Object.defineProperty(product, "children", {
                        writeable:false,
                        get: function() {
                            var stream = new ObjectStream();
                            var self = this;
                            setTimeout(function() {
                                stream.add(self.tempChildren);
                                stream.resolve(self.tempChildren);
                            }, 50);
                            return stream;
                        }
                    });
                }
                stream.add([product]);
                }

            var tmpProduct,tmpParent;
            for (var key in tmpProductMap) {
                tmpProduct = tmpProductMap[key];
                if (tmpProduct.parentId != 0 && tmpProductMap.hasOwnProperty(tmpProduct.parentId)){
                tmpParent = tmpProductMap[tmpProduct.parentId];
                    if (!tmpParent.tempChildren) {
                        tmpParent.tempChildren = [];
                    }
                        tmpParent.tempChildren.push(tmpProduct);
                } else {
                    products.push(tmpProduct);
                }
            }
            stream.resolve(products);
        }
    }
});
