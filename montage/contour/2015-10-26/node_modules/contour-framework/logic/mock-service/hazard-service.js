/**
 * @module logic/hazard-service.js
 */
var ObjectService = require("logic/mock-montage-data/object-service").ObjectService;
var ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream;
var Hazard = require("logic/mock-model/hazard").Hazard;
var HazardTypeSelector = require("logic/mock-service/hazard-type-selector").HazardTypeSelector;
var HazardTypeService = require("logic/mock-service/hazard-type-service").HazardTypeService;
var HazardCategorySelector = require("logic/mock-service/hazard-category-selector").HazardCategorySelector;
var HazardCategoryService = require("logic/mock-service/hazard-category-service").HazardCategoryService;
var HazardSeveritySelector = require("logic/mock-service/hazard-severity-selector").HazardSeveritySelector;
var HazardSeverityService = require("logic/mock-service/hazard-severity-service").HazardSeverityService;
var HazardIconRenderer = require("logic/map/hazard-icon-renderer").HazardIconRenderer;
var ProductSelector = require("logic/mock-service/product-selector").ProductSelector;
var ProductService = require("logic/mock-service/product-service").ProductService;
var HazardTimezoneService = require("logic/mock-service/hazard-timezone-service").HazardTimezoneService;
var HazardTimezoneSelector = require("logic/mock-service/hazard-timezone-selector").HazardTimezoneSelector;
/**
 * @class HazardService
 * @extends ObjectService
 *
 * Object representing a service that provides feature data from PDC's Hazard and
 * Product Service. This is a mock service used for testing purposes.
 */
var HazardService = exports.HazardService = ObjectService.specialize(/** @lends HazardService.prototype */ {

    constructor: {
        value: function HazardService() {
            this.super("hazardService");
        }
    },
    _productService: {
        value: new ProductService()
    },

    _hazardCategoryService: {
        value: new HazardCategoryService()
    },

    _hazardSeverityService: {
        value: new HazardSeverityService()
    },

    _hazardTypeService: {
        value: new HazardTypeService()
    },

    _hazardTimezoneService: {
        value: new HazardTimezoneService()
    },

    query: {
        value: function (selector) {

            var stream = new ObjectStream(selector);

            if (!this._renderer) {
                this._initializeRenderer(selector, stream);
            } else {
                this._fetchHazards(selector, stream);
            }

            return stream;
        }
    },

    _renderer: {
        value: null
    },

    _initializeRenderer: {
        value: function (selector, stream) {

            var hazardTypeSelector = new HazardTypeSelector("http://emopstest.pdc.org/"),
                hazardTypeStream = this._hazardTypeService.query(hazardTypeSelector),
                self = this;

            hazardTypeStream.then(function (hazardTypes) {
                self._renderer = new HazardIconRenderer(hazardTypes);
                self._fetchHazards(selector, stream);
            });
        }
    },

    _fetchHazards: {
        value: function (selector, stream) {
            var request = new XMLHttpRequest();
            if (!selector.layer) {
                request.onload = this._onLoad.bind(this, selector, request, stream);
                var url = "http://emopstest.pdc.org/hp_srv/services/hazards/1/json/get_hazards",
                    sql = "(status='A')";
                if (selector.filter && selector.filter.name) {
                    sql = "(upper(hazard_name) like upper('%25" + selector.filter.name + "%25') AND " + sql + ")";
                }
                request.open("post", url);
                request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                request.withCredentials = true;
                request.send("app_ids=18&where=" + sql);
            } else {
                request.onload = this._onLoad.bind(this, selector.layer, request, stream);
                request.open("post", selector.layer.url + "hp_srv/services/hazards/1/json/get_active_hazards");
                request.withCredentials = true;
                request.send();
            }
        }
    },

    _onLoad: {
        value: function (layer, request, stream) {

            var data = JSON.parse(request.responseText),
                hazards = [],
                i, n;

            for (i = 0, n = data.length; i < n; i++) {
                var hazard = Hazard.initialize(data[i]);
                var self = this;
                Object.defineProperty(hazard, "products", {
                    writeable: false,
                    get: function () {
                        return self._productService.query(new ProductSelector(this));
                    }
                });

                Object.defineProperty(hazard, "searchTerms", {
                    get: function () {
                        if (!this._searchTerms) {
                            var strings = [this.properties.name, this.properties.description, this.properties.typeId, this.properties.categoryId, this.properties.severityId],
                                terms = {},
                                string, split, i, j, n, m;
                            for (i = 0, n = strings.length; i < n; ++i) {
                                string = strings[i] && strings[i].replace(/[\W_]+/g, " ").trim().toLowerCase();
                                split = string && string.split(" ");
                                for (j = 0, m = split ? split.length : 0; j < m; ++j) {
                                    terms[split[j]] = this;
                                }
                            }
                            this._searchTerms = terms;
                        }
                        return this._searchTerms;
                    }
                });


                Object.defineProperties(hazard.properties, {
                    "severity": {
                        get: function () {
                            if (!this._severity) {
                                var properties = this;
                                self._hazardSeverityService.query(new HazardSeveritySelector(this.severityId)).then(function (severity) {
                                    properties.severity = severity[0];
                                    properties.dispatchOwnPropertyChange("severity", properties.severity);
                                });
                            }
                            return this._severity;
                        },
                        set: function (value) {
                            if (value) {
                                this._severity = value;
                                this.severityId = this._severity.id;
                                this.icon = Hazard.iconUrl({properties: this});
                            }
                        }
                    },
                    "category": {
                        get: function () {
                            if (!this._category) {
                                var properties = this;
                                self._hazardCategoryService.query(new HazardCategorySelector(this.categoryId)).then(function (category) {
                                    properties.category = category[0];
                                    properties.dispatchOwnPropertyChange("category", properties.category);
                                });
                            }
                            return this._category;
                        },
                        set: function (value) {
                            if (value) {
                                this._category = value;
                                this.categoryId = this._category.id;
                                this.icon = Hazard.iconUrl({properties: this});
                            }
                        }
                    },
                    "type": {
                        get: function () {
                            if (!this._type) {
                                var properties = this;
                                self._hazardTypeService.query(new HazardTypeSelector("", this.typeId)).then(function (type) {
                                    properties.type = type[0];
                                    properties.dispatchOwnPropertyChange("type", properties.type);
                                });
                            }
                            return this._type;
                        },
                        set: function (value) {
                            if (value) {
                                this._type = value;
                                this.typeId = this._type.id;
                                this.icon = Hazard.iconUrl({properties: this});
                            }
                        }
                    },
                    "layers": {
                        get: function () {
                            var stream = new ObjectStream();
                            var layers = self._hazardTypeService.layersForType(this.typeId);
                            setTimeout(function () {
                                stream.add(layers);
                                stream.resolve(layers);
                            }, 0);
                            return stream;
                        }
                    }
                });

                Object.defineProperty(hazard, "timezoneOffset", {
                    writeable: false,
                    get: function () {
                        var hazardSelf = this;
                        if (!this._timezoneOffset) {
                            self._hazardTimezoneService.query(new HazardTimezoneSelector(this.id)).then(function (offset) {
                                hazardSelf._timezoneOffset = offset;
                                hazardSelf.dispatchOwnPropertyChange("timezoneOffset", this.timezoneOffset);
                            });
                        }
                        return this._timezoneOffset;
                    }
                });

                //hazard.overlayId = layer.id;
                hazards.push(hazard);
                stream.add([hazard]);
                if (layer.features) {
                    if (!layer.renderer) {
                        layer.renderer = this._renderer;
                    }
                    hazard.properties.layerId = layer.id;
                    hazard.layer = layer;
                    layer.features[hazard.id] = hazard;
                }
            }

            stream.resolve(hazards);
        }
    }

});
