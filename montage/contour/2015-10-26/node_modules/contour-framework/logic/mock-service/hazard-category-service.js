/**
 * @module logic/hazard-category-service.js
 */
var ObjectService = require("logic/mock-montage-data/object-service").ObjectService;
var ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream;
var HazardCategory = require("logic/mock-model/hazard-category").HazardCategory;

/**
 * @class HazardCategoryService
 * @extends ObjectService
 *
 * Object representing a service that provides feature data from PDC's Hazard and
 * Product Service. This is a mock service used for testing purposes.
 */
var HazardCategoryService = exports.HazardCategoryService = ObjectService.specialize(/** @lends HazardService.prototype */ {

    constructor: {
        value: function HazardCategoryService() {
            this.super("hazardCategoryService");
        }
    },
    categoryArray: {
        get: function () {
            return HazardCategoryService.categoryArray;
        }
    },
    categoryById: {
        get: function() {
            return HazardCategoryService.categoryById;
        }
    },
    query: {
        value: function (selector) {
            var stream = new ObjectStream(selector), results;
            if (selector.categoryId) {
                results = [this.categoryById[selector.categoryId]];
            } else {
                results = this.categoryArray;
            }
            setTimeout(function() {
                stream.add(results);
                stream.resolve(results);
            },0);
            return stream;
        }
    }
}, {

    /**
     * categoryArray and categoryById are class-level because HazardCategoryService
     * may not be a singleton at this time, but each HazardCategory instance
     * must be to accurately simulate future functionality.
     */
    categoryArray: {
        value: [
            new HazardCategory("EVENT", "Event",  "Icon-multi-event"),
            new HazardCategory("EXERCISE", "Exercise", "Icon-multi-exercise"),
            new HazardCategory("OTHER", "Other", "Icon-multi-other"),
            new HazardCategory("RESPONSE", "Response", "Icon-multi-response")
        ]
    },
    _categoryById: {
        value: null
    },
    categoryById: {
        get: function () {
            if (HazardCategoryService._categoryById == null) {
                HazardCategoryService._categoryById = {};
                var i, len,category;
                for (i = 0, len = HazardCategoryService.categoryArray.length; i < len; i++) {
                    category = HazardCategoryService.categoryArray[i];
                    HazardCategoryService._categoryById[category.id] = category;
                }
            }

            return HazardCategoryService._categoryById;
        }
    }
});
