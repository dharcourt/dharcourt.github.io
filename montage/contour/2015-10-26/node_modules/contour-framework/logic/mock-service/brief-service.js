/**
 * @module logic/brief-service.js
 */
var Brief = require("logic/model/brief").Brief;
var BriefTab = require("logic/model/brief").BriefTab;
var ObjectService = require("logic/mock-montage-data/object-service").ObjectService;
var ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream;

/**
 * @class BriefService
 * @extends ObjectService
 */
exports.BriefService = ObjectService.specialize(/** @lends BriefService.prototype */ {
    constructor: {
        value: function BriefService() {
            this.super("brief");
        }
    },

    query: {
        value: function (selector) {
            var url = this.getUrl(selector.options);
            var stream = new ObjectStream(selector);
            var request = new XMLHttpRequest();
            request.onload = this._onLoad.bind(this, request, stream);
            request.open("get", url, true);
            request.send();
            return stream;
        }
    },

    getUrl: {
        value: function (area) {
            if (area.type == "Rectangle") {
                //return "http://emopstest.pdc.org/emops/area_brief_proxy/ab_proxy.jsp?http://servicestest.pdc.org/control/emops/rr.php?shapetype=rect" +
                return "http://atlastest.pdc.org/atlas/area_brief_proxy/ab_proxy.jsp?http://servicestest.pdc.org/control/atlas/rr.php?shapetype=rect" +
                "&xmin=" + area.bbox[0] +"&ymin=" +  area.bbox[1] + "&xmax=" +  area.bbox[2] + "&ymax=" +  area.bbox[3] + "&detect=1";
            }

            if (area.type == "Circle") {
                var buff = ((area.bbox[3] - area.bbox[1]) / 2);
                //return "http://emopstest.pdc.org/emops/area_brief_proxy/ab_proxy.jsp?http://servicestest.pdc.org/control/emops/rr.php?shapetype=circ" +
                return "http://atlastest.pdc.org/atlas/area_brief_proxy/ab_proxy.jsp?http://servicestest.pdc.org/control/atlas/rr.php?shapetype=circ" +
                    "&x=" + (area.bbox[0] + buff) +"&y=" + (area.bbox[1] + buff) + "&buff=" + buff + "&detect=1";
            }
        }
    },

    _onLoad: {
        value: function (request, stream) {

            var data = JSON.parse(request.responseText);
            if (!data.success) {
                return;
            }

            var templateId = data.template_id;
            var tabs = [];


            for (i = 0, n = data.tabs.length; i < n; i += 1) {
                var tab = data.tabs[i];
                tabs.push(new BriefTab(tab.id, tab.name, tab.disclosure));
            }

            stream.resolve(new Brief(templateId, tabs));
        }
    }
});
