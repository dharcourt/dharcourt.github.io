var ObjectService = require("logic/mock-montage-data/object-service").ObjectService,
    BookmarkService = require("logic/mock-service/bookmark-service").BookmarkService,
    EarthquakeService = require("logic/mock-service/earthquake-service").EarthquakeService,
    FeatureService = require("logic/mock-service/feature-service").FeatureService,
    HazardService = require("logic/mock-service/hazard-service").HazardService,
    HazardTypeService = require("logic/mock-service/hazard-type-service").HazardTypeService,
    HazardSeverityService = require("logic/mock-service/hazard-severity-service").HazardSeverityService,
    HazardCategoryService = require("logic/mock-service/hazard-category-service").HazardCategoryService,
    LayerService = require("logic/mock-service/layer-service").LayerService,
    LocationService = require("logic/mock-service/location-service").LocationService,
    UserService = require("logic/mock-service/user-service").UserService,
    SocialService = require("logic/mock-service/social-service").SocialService,
    TileService = require("logic/mock-service/tile-service").TileService,
    TimeZoneService = require("logic/mock-service/time-zone-service").TimeZoneService,
    TrafficCameraService = require("logic/mock-service/traffic-camera-service").TrafficCameraService,
    LinkService = require("logic/mock-service/link-service").LinkService,
    BriefService = require("logic/mock-service/brief-service").BriefService;

/**
 * @class MockService
 * @extends ObjectService
 */
exports.MockService = ObjectService.specialize(/** @lends MockService.prototype */ {
    constructor: {
        value: function MockService() {
            this.super("main");
        }
    },

    // Sub-services are hard-coded here for now but in the future they, and this
    // class, will be dynamically generated from a blueprint defining the actual
    // web or other service used to provide this application's data.
    services: {
        value: {
            bookmark: BookmarkService.getInstance(),
            earthquake: new EarthquakeService(),
            feature: new FeatureService(),
            hazard: new HazardService(),
            hazardType: new HazardTypeService(),
            hazardSeverity: new HazardSeverityService(),
            hazardCategory: new HazardCategoryService(),
            layer: new LayerService(),
            location: new LocationService(),
            tile: new TileService(),
            user: new UserService(),
            social: new SocialService(),
            timeZone: new TimeZoneService(),
            trafficCamera: new TrafficCameraService(),
            link: new LinkService(),
            brief: new BriefService()
        }
    },

    query: {
        value: function (selector) {
            return this.services[selector.type].query(selector);
        }
    }
});
