var DataService = require("montage-data/logic/service/data-service").DataService;
var Layer = require("logic/mock-model/layer").Layer;
var application = require("montage/core/application").application;

/**
 * Mock user layers service.
 *
 * @class
 * @extends external:DataService
 */
exports.UserLayersService = DataService.specialize(/** @lends UserLayersService# */{}, {
    _folder: {
        value: null
    },
    _layers: {
        value: []
    },

    _services: {
        value: []
    },

    _folders: {
        value: []
    },

    folders: {
        get: function() {
            return this._folders;
        }
    },

    layers: {
        get: function() {
            return this._layers;
        },
        set: function( layers ) {
            this._layers = layers;
        }
    },

    services: {
        get: function() {
            return this._services;
        }
    },

    addFolder: {
        value: function( folder ) {
            this.folders.push(folder);
        }
    },

    _removeById: {
        value: function( array, id ) {
            var len = array.length;
            var index = -1;

            for ( var i = 0; i < len; i++ ) {
                if ( array[i].id === id ) {
                    index = i;
                    break;
                }
            }

            if ( index > -1 ) {
                return array.splice(index, 1)[0];
            }

            return null;
        }
    },

    removeFolder: {
        value: function( folderId ) {
            return this._removeById(this._folders, folderId);
        }
    },

    addService: {
        value: function( service ) {
            var existService = this.getServiceByUrl(service.url);

            if ( existService ) {
                return existService;
            }

            if ( !service.id ) {
                service.id = service.url;
            }

            delete service.layers;

            this.services.push(service);

            return service;
        }
    },

    getService: {
        value: function( serviceId ) {
            var services = this.services;
            var len = services.length;
            for ( var i = 0; i < len; i++ ) {
                if ( services[i].id === serviceId ) {
                    return services[i];
                }
            }
        }
    },

    getServiceByUrl: {
        value: function( url ) {
            var services = this.services;
            var len = services.length;

            for ( var i = 0; i < len; i++ ) {
                if ( services[i].url === url ) {
                    return services[i];
                }
            }
        }
    },

    removeService: {
        value: function ( serviceId ) {
            var service = this._removeById(this._services, serviceId);

            if ( service ) {
                this.removeFolder(service.folderId);
                this.layers = this.layers.filter(function( layer ) {
                    return layer.serviceId !== service.id;
                });
            }

            this.updateLayersTree(); // @TODO fix potentially memory lick

            return service;
        }
    },

    addLayer: {
        value: function( layerData ) {
            if ( !layerData.id ) {
                layerData.id = layerData.uuid;
            }
            this.layers.push(layerData);
            this.updateLayersTree();
        }
    },

    removeLayer: {
        value: function( layerId ) {
            this._removeById(this._layers, layerId);
            this.updateLayersTree();
        }
    },

    getLayersByService: {
        value: function( serviceId ) {
            return this.layers.filter(function( layer ) {
                return layer.serviceId === serviceId;
            });
        }
    },

    _getOverlay: {
        value: function( layer ) {
            var service, overlay;

            service = this.getService(layer.serviceId);

            if ( service.protocol === "WMS" ) {
                overlay = Layer.initializeWMSTileLayer(layer.name, service.url, 11,
                    "102100", "meters", service.protocolVersion);
            } else {
                overlay = Layer.initializeAGSLayer(layer.id, service.url, 10, "feature",
                    layer.id, "102100", "meters");
            }

            return overlay;
        }
    },

    updateLayersTree: {
        value: function() {
            var appLayers = application.delegate.layers;
            var foldersMap = {};
            var folders, layers, folder, layer, len;

            if ( !this._folder ) {
                this._folder = {
                    name: "User Layers",
                    parent: appLayers.tree
                };
                appLayers.tree.children.push(this._folder);
            }

            this._folder.children = [];

            folders = this.folders;
            len = folders.length;

            // @TODO Move work with folderMap to constructor and addFolder/removeFolder functions

            for ( var i = 0; i < len; i++ ) {
                folder = folders[i];
                foldersMap[folder.id] = {
                    name: folder.title,
                    children: []
                };
            }

            for ( i = 0; i < len; i++ ) {
                folder = folders[i];
                if ( folder.folderId ) {
                    foldersMap[folder.folderId].children.push(foldersMap[folder.id]);
                    foldersMap[folder.id].parent = foldersMap[folder.folderId];
                } else {
                    folder = foldersMap[folder.id];
                    this._folder.children.push(folder);
                    folder.parent = this._folder;
                }
            }

            layers = this.layers;
            len = layers.length;

            for ( i = 0; i < len; i++ ) {
                layer = layers[i];
                if ( layer.parentId ) {
                    folder = foldersMap[layer.parentId];
                } else {
                    folder = this._folder;
                }

                layer = {
                    name: layer.title,
                    isSelectable: true,
                    parent: folder,
                    overlay: this._getOverlay(layer)
                };

                Object.defineProperty(layer, "isEnabled", {
                    set: function( isEnabled ) {
                        this.overlay.enabled = isEnabled;
                        if ( isEnabled ) {
                            application.map.addOverlay(this.overlay);
                        } else {
                            application.map.removeOverlay(this.overlay);
                        }
                    },
                    get: function() {
                        return this.overlay.enabled;
                    }
                });

                folder.children.push(layer)
            }
        }
    },

    save: {
        value: function() {
            console.warn("Saving of user layers not implemented yet.");
        }
    }
});
