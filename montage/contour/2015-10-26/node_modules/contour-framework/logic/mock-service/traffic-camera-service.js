/**
 * @module logic/social-service.js
 */
var ObjectService = require("logic/mock-montage-data/object-service").ObjectService;
var ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream;
var TrafficCamera = require("logic/model/traffic-camera").TrafficCamera;
var TrafficCameraSelector = require("logic/mock-service/traffic-camera-selector").TrafficCameraSelector;

/**
 * @class TrafficCameraService
 * @extends ObjectService
 *
 */
var TrafficCameraService = exports.TrafficCameraService = ObjectService.specialize(/** @lends ProductService.prototype */ {

    constructor: {
        value: function TrafficCameraService() {
            this.super("TrafficCameraService");
        }
    },

    _cache: {
        value: {}
    },

    query: {
        value: function (selector) {

            var stream = new ObjectStream(selector),
                request = new XMLHttpRequest(),
                url = selector.layer.url,
                extent = selector.extent,
                queryString = "?xmax=" + extent.xmax + "&xmin=" + extent.xmin +
                    "&ymax=" + extent.ymax + "&ymin=" + extent.ymin;

            request.onload = this._onLoad.bind(this, request, stream, selector.layer);
            request.open("get", url + queryString);
            request.withCredentials = true;
            request.send();
            return stream;
        }
    },

    _onLoad: {
        value: function (request, stream, layer) {
            var data = JSON.parse(request.responseText),
                result = [],
                length =  data.markers.length,
                camera, object;

            for (var i = 0; i < length; i++) {
                object = data.markers[i];
                if (this._cache[object.id]) {
                    result.push(this._cache[object.id]);
                } else {
                    camera = TrafficCamera.initialize(data.markers[i], layer);
                    this._cache[camera.id] = camera;
                    layer.allFeatures.push(camera);
                    result.push(camera);

                }
            }
            stream.add(result);
            stream.resolve(result);
            layer.features = result;
        }
    }
});
