/**
 * @module logic/hazard-type-service.js
 */
var ObjectService = require("logic/mock-montage-data/object-service").ObjectService;
var ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream;
var HazardType = require("logic/mock-model/hazard-type").HazardType;
var HazardSeverity = require("logic/mock-model/hazard-severity").HazardSeverity;
var HazardCategory = require("logic/mock-model/hazard-category").HazardCategory;
var HazardSeverityService = require("logic/mock-service/hazard-severity-service").HazardSeverityService;
var HazardSeveritySelector = require("logic/mock-service/hazard-severity-selector").HazardSeveritySelector;
var HazardCategoryService = require("logic/mock-service/hazard-category-service").HazardCategoryService;
var HazardCategorySelector = require("logic/mock-service/hazard-category-selector").HazardCategorySelector;

/**
 * @class HazardTypeService
 * @extends ObjectService
 *
 * Object representing a service that provides feature data from PDC's Hazard and
 * Product Service. This is a mock service used for testing purposes.
 */
var HazardTypeService = exports.HazardTypeService = ObjectService.specialize(/** @lends HazardService.prototype */ {

    constructor: {
        value: function HazardTypeService() {
            this.super("hazardTypeService");
        }
    },

    _backlog: {
        value: []
    },
    layersForType: {
        value: function (typeId) {
            return HazardTypeService._layers[typeId] || [];
        }
    },
    query: {
        value: function (selector) {

            var stream = new ObjectStream(selector);

            if (this._hazardTypes === null) {
                if (selector.serviceUrl) {
                    var request = new XMLHttpRequest();
                    request.onload = this._onLoad.bind(this, request, stream);
                    request.open("get", selector.serviceUrl + "hp_srv/services/hazards/1/json/get_hazard_types");
                    request.withCredentials = true;
                    request.send();
                } else {
                    this._backlog.push({selector:selector, stream:stream});
                }
            } else {
                var results;
                if (selector.typeId) {
                    results = [this._hazardTypesById[selector.typeId]];
                } else {
                    results = this._hazardTypes;
                }

                setTimeout(function () {
                    stream.add(results);
                    stream.resolve(results);
                }, 0);

            }

            return stream;

        }
    },
    _drawCircle: {
        value: function (context, radius) {
            context.arc(radius, radius, radius - 1, 0, 2 * Math.PI, false);
        }
    },

    _drawPolygon: {
        value: function (context, radius, sides, startAngle) {
            var angle = (Math.PI * 2) / sides, i;

            startAngle = startAngle || 0;
            context.translate(radius, radius);
            context.rotate(startAngle);

            for (i = 0; i <= sides; i++) {
                context.lineTo(radius * Math.cos(i * angle), radius * Math.sin(i * angle));
            }
            context.closePath();
            context.setTransform(1, 0, 0, 1, 0, 0);
        }
    },

    _drawStar: {
        value: function (context, radius) {

            var points = 5,
                inset = 0.6,
                i;

            context.beginPath();
            context.translate(radius, radius);
            context.moveTo(0, 0 - radius);

            for (i = 0; i < points; i++) {
                context.rotate(Math.PI / points);
                context.lineTo(0, 0 - (radius * inset));
                context.rotate(Math.PI / points);
                context.lineTo(0, 0 - radius);
            }

            context.closePath();
            context.setTransform(1, 0, 0, 1, 0, 0);
        }
    },

    _hazardTypes: {
        get: function (){
            return HazardTypeService.__hazardTypes;
        },
        set: function(value) {
            HazardTypeService.__hazardTypes = value;
        }
    },
    _hazardTypesById: {
        get: function (){
            return HazardTypeService.__hazardTypesById;
        },
        set: function(value) {
            HazardTypeService.__hazardTypesById = value;
        }
    },
    _loadHazardIcon: {
        value: function (hazardType, callback) {

            var request = new XMLHttpRequest(),
                self = this;

            if (window.localStorage[hazardType.id]) {

                image.src = window.localStorage[hazardType.id];

            } else {

                request.open("get", "http://static.pdc.org/icons/hazard/large/" + hazardType.icon, true);
                request.responseType = "arraybuffer";
                request.onload = function () {

                    var int8Array = new Uint8Array(request.response),
                        binaryString = [],
                        i, length;

                    for (i = 0, length = int8Array.length; i < length; i++) {
                        binaryString[i] = String.fromCharCode(int8Array[i]);
                    }

                    window.localStorage[hazardType.id] = image.src = "data:image/png;base64," + window.btoa(binaryString.join(""));
                };

                request.send();
            }
        }
    },

    _onLoad: {
        value: function (request, stream) {

            var data = JSON.parse(request.responseText),
                hazardTypes = [],
                hazardType, saved, sstream, sselector, i, n;

            this._hazardTypesById = {};
            for (i = 0, n = data.length; i < n; i += 1) {
                hazardType = HazardType.initialize(data[i]);
                hazardTypes.push(hazardType);
                this._hazardTypesById[hazardType.id] = hazardType;
            }

            this._hazardTypes = hazardTypes;
            stream.resolve(hazardTypes);
            for (var i = 0, n = this._backlog.length; i < n; i++) {
                saved = this._backlog[i];
                sstream = saved.stream;
                sselector = saved.selector;
                if (sselector.typeId) {
                    sstream.add([this._hazardTypesById[sselector.typeId]]);
                    sstream.resolve([this._hazardTypesById[sselector.typeId]]);
                } else {
                    sstream.add(hazardTypes);
                    sstream.resolve(hazardTypes);
                }
            }

        }
    }
},{
    __hazardTypes: {
        value: null
    },
    __hazardTypesById: {
        value:null
    },
    _layers: {
        value: {
            AVALANCHE:[
                {title:"Global Snow Cover (8 day)", isEnabled:false}],
            BIOMEDICAL:[
                {title:"HealthMap Incidents",isEnabled:false},
                {title:"WHO Disease Outbreak News",isEnabled:false},
                {title:"OIE WAHID News",isEnabled:false},
                {title:"CDC Health Alert Network",isEnabled:false},
                {title:"CDC Travel Notices",isEnabled:false},
                {title:"PHAC Travel Notices",isEnabled:false}
            ],
            CYCLONE:[
                {title:"Tropical Cyclone Positions",isEnabled:false},
                {title:"Tropical Cyclone Segments",isEnabled:false},
                {title:"Cone of Uncertainty (3 Day)",isEnabled:false},
                {title:"Cone of Uncertainty (5 Day)",isEnabled:false},
                {title:"Estimated Wind Impacts (TAOS Model)",isEnabled:false}
            ],
            DROUGHT:[
                {title:"Rainfall Accumulation (7 Day)",isEnabled:false}
            ],
            EARTHQUAKE:[
                {title:"Shaking Intensity (ShakeMap Model)",isEnabled:false},
                {title:"Earthquake Locations and Magnitude",isEnabled:false},
                {title:"Tectonic Plate Boundaries",isEnabled:false}
            ],
            EXTREMETEMPERATURE:[
                {title:"Surface Air Temperature",isEnabled:false},
                {title:"Land Surface Temperature Anomaly - Daytime (8 Day)",isEnabled:false},
                {title:"Global Weather Observations (METAR)",isEnabled:false}
            ],
            FLOOD:[
                {title:"Rainfall Accumulation (7 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (3 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (1 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (12 hour)",isEnabled:false}
            ],
            HIGHSURF:[
                {title:"Wave Height Current Forecast",isEnabled:false},
                {title:"Wave Height Forecast 3 Hour",isEnabled:false},
                {title:"Wave Height Forecast 6 Hour",isEnabled:false},
                {title:"Wave Height Forecast 9 Hour",isEnabled:false},
                {title:"Wave Height Forecast 12 Hour",isEnabled:false},
                {title:"Wave Height Forecast 18 Hour",isEnabled:false}
            ],
            HIGHWIND:[
                {title:"Global Wind",isEnabled:false},
                {title:"Global Weather Observations (METAR)",isEnabled:false}
            ],
            LANDSLIDE:[
                {title:"Rainfall Accumulation (7 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (3 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (1 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (12 hour)",isEnabled:false}
            ],
            MANMADE:[],
            MARINE:[
                {title:"Ocean Current Velocity",isEnabled:false},
                {title:"Wave Height Current Forecast",isEnabled:false},
                {title:"Wave Height Forecast 3 Hour",isEnabled:false},
                {title:"Wave Height Forecast 6 Hour",isEnabled:false},
                {title:"Wave Height Forecast 9 Hour",isEnabled:false},
                {title:"Wave Height Forecast 12 Hour",isEnabled:false},
                {title:"Wave Height Forecast 18 Hour",isEnabled:false}
            ],
            STORM:[
                {title:"Rainfall Accumulation (7 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (3 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (1 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (12 hour)",isEnabled:false},
                {title:"Global Weather Observations (METAR)",isEnabled:false}
            ],
            TSUNAMI:[
                {title:"Tsunami Monitoring Stations (DART Buoys)",isEnabled:false},
                {title:"Tsunami Travel Times (Model)",isEnabled:false},
                {title:"Tsunami Estimated First Wave Arrival Times",isEnabled:false},
                {title:"Tsunami Watch and Warning Zones",isEnabled:false},
                {title:"Earthquake Locations and Magnitude",isEnabled:false}
            ],
            VOLCANO:[
                {title:"Active Volcanoes",isEnabled:false},
                {title:"Volcanoes of the World",isEnabled:false},
                {title:"Global Dust and Volcanic Ash",isEnabled:false}
            ],
            WILDFIRE:[
                {title:"Rainfall Accumulation (7 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (3 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (1 Day)",isEnabled:false},
                {title:"Rainfall Accumulation (12 hour)",isEnabled:false}
            ]
        }
    }
});
