/**
 * @module ui/control/interval-controller.js
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component;

/**
 * @class IntervalController
 * @extends Component
 */
var IntervalController = exports.IntervalController = Component.specialize(/** @lends IntervalController.prototype */{
    constructor: {
        value: function IntervalController() {
            this.processInterval();
            var self = this;
            this._interval = setInterval(function () {
                self.processInterval();
            }, 1000);
        }
    },
    _interval : {
        value: null
    },
    _listeners: {
        value: {}
    },
    set: {
        value: function (component,interval) {
            interval = (typeof interval === "number") ? interval : 1000;
            if (this._listeners.hasOwnProperty(component.uuid) && this._listeners[component.uuid].refreshInterval !== interval) {
                this._listeners[component.uuid].refreshInterval = interval;
                this._listeners[component.uuid].lastRedraw = 0;
            } else {
                this._listeners[component.uuid] = {
                    component : component,
                    refreshInterval : interval,
                    lastRedraw : 0
                }
            }
        }
    },
    hasComponent: {
        value: function (component) {
            var componentId = (typeof component === "object") ? component.uuid : component;
            return this._listeners.hasOwnProperty(componentId);
        }
    },
    remove: {
        value: function (component) {
            if (this.hasComponent(component)) {
                var componentId = (typeof component === "object") ? component.uuid : component;
                delete this._listeners[componentId];
            }
        }
    },
    reset: {
        value: function(component) {
            if (this.hasComponent(component)) {
                var componentId = (typeof component === "object") ? component.uuid : component;
                this._listeners[componentId].lastRedraw = 0;
            }
        }
    },
    processInterval: {
        value: function () {
            var listenerId, listener, now = (new Date()).getTime();
            for (listenerId in this._listeners) {
                if ((listener = this._listeners[listenerId]).lastRedraw === 0 || (listener.lastRedraw + listener.refreshInterval) < now) {
                    listener.component.needsDraw = true;
                    listener.lastRedraw = now;
                }
            }
        }
    }
});
