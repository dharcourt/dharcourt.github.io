var Target = require("montage/core/target").Target,
    application = require("montage/core/application").application,
    AreaBrief = require("logic/mock-model/area-brief").AreaBrief,
    Bookmark = require("logic/model/bookmark").Bookmark,
    Bounds = require("logic/model/bounds").Bounds,
    Configuration = require("logic/model/configuration").Configuration,
    ContourService = require("logic/service/contour-service").ContourService,
    Feature = require("logic/model/feature").Feature,
    Hazard = require("logic/model/hazard").Hazard,
    HazardIcon = require("logic/model/hazard-icon").HazardIcon,
    HazardLayer = require("logic/model/hazard-layer").HazardLayer,
    IdentifySummary = require("logic/model/identify-summary").IdentifySummary,
    Layer = require("logic/model/layer").Layer,
    Product = require("logic/model/product").Product,
    Promise = require("bluebird"),
    Protocol = require("logic/model/protocol").Protocol,
    moment = require("moment-timezone");

/**
 * @class ContourController
 * @extends Target
 */
exports.ContourController = Target.specialize(/** @lends ContourController.prototype */ {

    constructor: {
        value: function ContourController() {
            var self = this;
            application.delegate = this;
            this.service = ContourService.instance;
            this.service.fetchData(Configuration.TYPE).then(function (configurations) {
                var hazardService = ContourService.instance.getChildService(Hazard.TYPE),
                    hazardLayerService = ContourService.instance.getChildService(HazardLayer.TYPE),
                    layerService = ContourService.instance.getChildService(Layer.TYPE);
                hazardService.applicationIds = configurations[0].application.ids;
                hazardLayerService.iconUrl = configurations[0].capabilities.icons.url;
                layerService.defaultSummaryFeatureFieldCount = configurations[0].featureFields.defaultSummaryCount;
                layerService.ignoredFeatureFields = configurations[0].featureFields.ignored;
                Product.previewUrl = configurations[0].products.previewUrl;
                self.layers = configurations[0].layers;
                self.layers.sortedEnabled = [];
                self.baseMap = self.layers.background.filter(function (layer) { return layer.isEnabled; })[0];
                self.layers.all.forEach(function (layer) {
                    if (layer.isEnabled === true && self.layers.background.indexOf(layer) === -1) {
                        self.enableLayer(layer);
                    } else if (layer.isEnabled === true) {
                        self.layers.sortedEnabled.unshift(layer);
                    }
                });
                self.defineBinding("layers.enabled", {"<-": "layers.all.filter{isEnabled && !isBackground}"});
                self.layers.enabled.addRangeChangeListener(function (plus, minus) {
                    var i, n, layer, sortedLayersIndex;
                    for (i = 0, n = minus.length; i < n; ++i) {
                        layer = minus[i];
                        self.disableLayer(layer);
                        sortedLayersIndex = self.layers.sortedEnabled.indexOf(layer);
                        if (sortedLayersIndex > -1) {
                            self.layers.sortedEnabled.splice(sortedLayersIndex, 1);
                        }
                    }
                    for (i = 0, n = plus.length; i < n; ++i) {
                        layer = plus[i];
                        self.enableLayer(layer);
                        self.layers.sortedEnabled.unshift(layer);
                    }
                });
                HazardIcon.generateAllIcons(self.layers.hazard);
            });
        }
    },

    service: {
        value: undefined
    },

    layers: {
        value: {
            all: [],
            camera: undefined,
            enabled: [],
            hazard: undefined,
            list: [],
            social: undefined,
            tree: {children: []}
        }
    },

    currentHazard: {
        value: undefined
    },

    _baseMap: {
        value: undefined
    },

    baseMap: {
        get: function () {
            return this._baseMap;
        },
        set: function (value) {
            if (value !== this._baseMap) {
                if (this._baseMap) {
                    this._baseMap.isEnabled = false;
                }
                this._baseMap = value;
                if (this._baseMap) {
                    this._baseMap.isEnabled = true;
                }
            }
        }
    },

    identifySummaries: {
        value: []
    },

    activateBookmark: {
        value: function(bookmark) {
            var self = this;
            bookmark.data.then(function(bookmarkData) {
                var extent = bookmarkData[0].extent,
                    figures = bookmarkData[0].figures,
                    layers = bookmarkData[0].layers,
                    bookmarkLayer, contourLayer,
                    i, length;
                if (extent) {
                    self.setCenterAndZoom(extent.center,extent.zoom);
                }
                if (figures) {
                    self.clearFigures();
                    for (i = 0, length = figures.length; i < length; i++) {
                        self.addFigure(figures[i]);
                    }
                }
                if (layers) {
                    i = 0;
                    length = self.layers.enabled.length;
                    while (i < length) {
                        contourLayer = self.layers.enabled[i];
                        if (!layers.byId[contourLayer.id]) {
                            contourLayer.isEnabled = false;
                            length--;
                        } else {
                            i++;
                        }
                    }
                    for (i = 0, length = layers.all.length; i < length; i++) {
                        bookmarkLayer = layers.all[i];
                        contourLayer = self.layers.byId[bookmarkLayer.id];
                        if (contourLayer && !contourLayer.isEnabled) {
                            contourLayer.isEnabled = true;
                        }
                    }
                }
            });
        }
    },

    addBookmark: {
        value: function () {
            this.inspectBookmark(Bookmark.createBookmark({
                name: "New Bookmark"
            }));
        }
    },

    saveBookmark: {
        value: function (bookmark) {
            var bookmarkData = {
                layers: this.layers.enabled,
                figures: this.figures,
                extent: {
                    zoom: this.zoom,
                    center: this.center
                }
            };
            Bookmark.save(bookmark, bookmarkData);
        }
    },

    briefAreas: {
        value: []
    },

    createBriefAreaWithBoundingBox: {
        value: function (bbox, briefType) {
            if (!bbox || Math.abs(bbox[2] - bbox[0]) > 10 || Math.abs(bbox[3] - bbox[1]) > 10) return;
            var name = "Report " + (this.briefAreas.length + 1),
                type = (briefType === "areaBriefCircle" ? "Circle" : "Rectangle"),
                areaBrief = AreaBrief.initializeAreaBrief(name, bbox, type);
            this.briefAreas.push(areaBrief);
            return areaBrief;
        }
    },

    createIdentifySummaryWithBoundingBox: {
        value: function (bbox) {
            var name = "Summary " + (this.identifySummaries.length + 1),
                identifySummary = IdentifySummary.initializeIdentifySummary(name, bbox, this.layers.enabled);
            this.identifySummaries.unshift(identifySummary);
        }
    },

    createIdentifySummaryWithCurrentExtent: {
        value: function () {
            var bounds = this.getBounds(),
                ne = bounds[1],
                sw = bounds[0];
            this.createIdentifySummaryWithBoundingBox([sw[0], sw[1], ne[0], ne[1]]);
        }
    },

    createBriefAreaWithCurrentExtent: {
        value: function () {
            var center = this.getCenter();
            return this.createBriefAreaWithBoundingBox([center[0] - 1.5, center[1] - 1.5, center[0] + 1.5,
                center[1] + 1.5], "areaBriefRectangle");
        }
    },

    currentMapMode: {
        value: null
    },

    disableCamera: {
        value: function (camera) {
            var index = this.enabledCameras.indexOf(camera);
            if (index === -1) {
                return false;
            }
            camera.properties.isEnabled = false;
            this.redrawFeature(camera);
            this.enabledCameras.splice(index, 1);
        }
    },

    disableLayer: {
        value: function (layer) {
            var index = this.enabledLayers.indexOf(layer);
            if (index > 0) {
                layer.isEnabled = false;
                this.enabledLayers.splice(index, 1);
            }
        }
    },

    disableLayers: {
        value: function () {
            for (var i = 0, length = arguments.length; i < length; i++) {
                this.disableLayer(arguments[i]);
            }
        }
    },

    _enabledCameras: {
        value: undefined
    },

    enabledCameras: {
        enumerable: true,
        writeable: false,
        get: function () {
            if (this._enabledCameras === undefined) {
                this._enabledCameras = [];
            }
            return this._enabledCameras;
        }
    },

    enableCamera: {
        value: function (camera) {
            if (this.enabledCameras.indexOf(camera) >= 0) {
                return false;
            }
            camera.properties.isEnabled = true;
            this.redrawFeature(camera);
            this.enabledCameras.push(camera);
        }
    },

    exportMapToJpeg: {
        value: function (context, includeLegend) {
            var exceptions = {
                loadingFailures: [],
                securityExceptions: []
            };
            return this.map.exportMapToJpeg(context, exceptions);
        }
    },

    toggleCameraEnabled: {
        value: function (camera) {
            if (camera.properties.isEnabled) {
                this.disableCamera(camera);
            } else {
                this.enableCamera(camera);
            }
        }
    },

    drawSymbol: {
        value: function (symbol) {
            return this.map.mapEngine.drawSymbol(symbol);
        }
    },

    removeSymbol: {
        value: function (symbol) {
            return this.map.mapEngine.removeSymbol(symbol);
        }
    },

    // Temporary property until layers.enabled is ready.
    enabledLayers: {
        value: []
    },

    // Temporary function until layers.enabled is ready?
    enableLayer: {
        value: function (layer) {
            if (layer.mapService && layer.map === undefined) {
                layer.map = this.map;
            }
            if (this.enabledLayers.indexOf(layer) < 0) {
                layer.isEnabled = true;
                this.enabledLayers.push(layer);
            }
        }
    },

    // Temporary function until layers.enabled is ready?
    enableLayers: {
        value: function () {
            for (var i = 0, length = arguments.length; i < length; i++) {
                this.enableLayer(arguments[i]);
            }
        }
    },

    enterAreaSelectionMode: {
        value: function () {
            console.warn("Method not implemented");
        }
    },

    centerOnFeature: {
        value: function (feature) {
            this.map.centerOnFeature(feature);
        }
    },

    centerOnAndZoomToFeature: {
        value: function (feature) {
            this.map.centerOnAndZoomToFeature(feature);
        }
    },

    addFigure: {
        value: function (figure) {
            this.figures.push(figure);
        }
    },

    addHazard: {
        value: function () {
            var newHazard = this.service.createDataObject(Hazard.TYPE),
                category, severity, type;
            //Assign defaults
            newHazard.properties.autoExpire = false;
            newHazard.properties.categoryId = "EVENT";
            category = Hazard.Category.forId(newHazard.properties.categoryId);
            newHazard.properties.category = category;
            newHazard.properties.longitude = this.getCenter()[0];
            newHazard.properties.latitude = this.getCenter()[1];
            newHazard.properties.name = "New Hazard";
            newHazard.properties.point = this.getCenter();
            newHazard.properties.severityId = "WARNING";
            severity = Hazard.Severity.forId(newHazard.properties.severityId);
            newHazard.properties.severity = severity;
            newHazard.properties.startDate = moment();
            newHazard.properties.status = "A";
            newHazard.properties.typeId = "AVALANCHE";
            type = Hazard.Type.forId(newHazard.properties.typeId);
            newHazard.properties.type = type;
            newHazard.properties.icon = HazardIcon.get(category, severity, type).url;
            newHazard.properties.isNew = true;
            this.editHazard(newHazard);
        }
    },

    clearFigures: {
        value: function () {
            this.figures.splice(0, this.figures.length);
        }
    },

    editHazard: {
        value: function (hazard) {
            var self = this;
            this.currentHazard = hazard;
            this.panel.openLeft("ui/hazard/hazard-browser.reel").then(function (hazardBrowser) {
                hazardBrowser.openHazardInspector(self._hazardInspectorModes.EDIT);
            });
        }
    },

    getBounds: {
        value: function () {
            var bounds = this.map.bounds;
            return [
                [bounds.west, bounds.south],
                [bounds.east, bounds.north]
            ];
        }
    },

    getCenter: {
        value: function () {
            return this.map.position.center;
        }
    },

    getZoom: {
        value: function () {
            return this.map.position.zoom;
        }
    },

    fitToBounds: {
        // TODO: Go through application and migrate to new
        // Bounds object.
        value: function (bounds) {
            if (bounds instanceof Bounds) {
                this.map.fitToBounds([
                    [bounds.xMin, bounds.yMin],
                    [bounds.xMax, bounds.yMax]
                ]);
            } else {
                this.map.fitToBounds(bounds);
            }
        }
    },

    handleMapClickAction: {
        value: function (event) {
            event.stopPropagation();
            this.dispatchEventNamed("mapClickAction", true, true, event.detail);
        }
    },

    handleSelectionAction: {
        value: function (e) {
            e.stopPropagation();
            if (e.detail.selectionType === "point") {
                this.dispatchEventNamed("pointSelectionAction", true, true, e.detail);
            } else if (e.detail.selectionType === "identify") {
                this.createIdentifySummaryWithBoundingBox(e.detail.bbox);
            }
        }
    },

    _hazardInspectorModes: {
        value: {
            INSPECT: 0,
            LAYERS: 1,
            PRODUCTS: 2,
            AREA_BRIEF: 3,
            EDIT: 4
            // RELATED missing
        }
    },

    hideMapOverlay: {
        value: function (overlayId) {
            if (overlayId && typeof overlayId === "string" && overlayId.toUpperCase() === "MGRS") {
                this.map.mgrsEnabled = false;
            }
        }
    },

    _isMgrsValid: {
        value: function (mgrsCoordinate) {
            var mgrsArray, numericalLocation,
                isValid = false,
                mgrsRegex = new RegExp("^([6][0]|[1-5][0-9]|[0][1-9]|[1-9])([C-HJ-NP-Xc-hj-np-x])([A-HJ-NP-Za-hj-np-z][A-HJ-NP-Za-hj-np-z])([0-9]*)$");
            if (mgrsRegex.test(mgrsCoordinate)) {
                mgrsArray = mgrsRegex.exec(mgrsCoordinate);
                numericalLocation = mgrsArray.pop();
                if (numericalLocation.length % 2 === 0 && 1 < numericalLocation.length && numericalLocation.length < 11) {
                    isValid = true;
                }
            }
            return isValid;
        }
    },

    inspectBookmark: {
        value: function (bookmark) {
            //TODO: Update creation logic to mimic hazard mock

            this.panel.openLeft("ui/bookmark/bookmark-browser.reel").then(function (bookmarkBrowser) {
                bookmarkBrowser.openBookmarkInspector(bookmark);
            });
        }
    },

    inspectFigure: {
        value: function (figure) {
            this.panel.openLeft("ui/drawing/drawing-inspector.reel").then(function (drawingInspector) {
                drawingInspector.openFigureInspector(figure);
            });
        }
    },

    inspectHazard: {
        value: function (hazard) {
            var self = this;
            this.currentHazard = hazard;
            this.panel.openLeft("ui/hazard/hazard-browser.reel").then(function (hazardBrowser) {
                hazardBrowser.openHazardInspector(self._hazardInspectorModes.INSPECT);
            });
        }
    },

    inspectHazardAreaBrief: {
        value: function (hazard) {
            var self = this;
            this.currentHazard = hazard;
            this.panel.openLeft("ui/hazard/hazard-browser.reel").then(function (hazardBrowser) {
                hazardBrowser.openHazardInspector(self._hazardInspectorModes.AREA_BRIEF);
            });
        }
    },

    inspectCamera: {
        value: function (camera) {
            this.panel.openLeft("ui/camera/camera-browser.reel").then(function (cameraPanel) {
                cameraPanel.inspectCamera(camera);
            });
        }
    },

    /**
     * @todo: not used anywhere, doesn't appear to be implemented
     */
    //inspectIdentifyLayer: {
    //    value: function (identifyLayer) {
    //        this.panels.inspectIdentifyLayer(identifyLayer);
    //    }
    //},

    inspectLayer: {
        value: function (layer) {
            this.panel.openLeft("ui/layer/layer-browser.reel").then(function (layerBrowser) {
                layerBrowser.inspectLayer(layer);
            });
        }
    },

    inspectIdentifySummary: {
        value: function (identify) {
            this.panel.openLeft("ui/identify/identify-browser.reel").then(function (identifyBrowser) {
                identifyBrowser.openIdentifyInspector(identify);
            });
        }
    },

    inspectAreaBrief: {
        value: function (brief) {
            this.panel.openLeft("ui/brief/brief-browser.reel").then(function (briefBrowser) {
                briefBrowser.openBriefInspector(brief);
            });
        }
    },

    /**
     * @todo: not used anywhere, doesn't appear to be implemented
     */
    //inspectBriefDetailsSummary: {
    //    value: function (brief) {
    //        this.panels.inspectBriefDetailsSummary(brief);
    //    }
    //},

    listRelatedHazards: {
        value: function () {
            var self = this;

            this.panel.openLeft("ui/hazard/hazard-browser.reel").then(function (hazardBrowser) {
                hazardBrowser.openHazardInspector(self._hazardInspectorModes.RELATED);
            });
        }
    },

    listHazardProducts: {
        value: function () {
            var self = this;

            this.panel.openLeft("ui/hazard/hazard-browser.reel").then(function (hazardBrowser) {
                hazardBrowser.openHazardInspector(self._hazardInspectorModes.PRODUCTS);
            });
        }
    },

    inspectProduct: {
        value: function (product) {
            var self = this;

            this.panel.openLeft("ui/hazard/hazard-browser.reel")
                .then(function (hazardBrowser) {
                    // use PRODUCTS mode so when user goes back, the products tab is shown
                    return hazardBrowser.openHazardInspector(self._hazardInspectorModes.PRODUCTS);
                })
                .then(function (hazardInspector) {
                    hazardInspector.openProductInspector(product);
                })
        }
    },

    _map: {
        value: null
    },

    map: {
        get: function () {
            return this._map;
        },
        set: function (map) {
            var previous = this._map;
            if (map !== previous) {
                this._map = map;
                if (previous) {
                    this.cancelBinding("currentMapMode");
                }
                if (map) {
                    this.defineBinding("currentMapMode", {"<->": "_map.currentMode"});
                    this.defineBinding("figures", {"<->": "_map.figures"});
                    this._map.addEventListener("selectionAction", this, false);
                }
                if (map || previous) {
                    this.layers.enabled.forEach(function (layer) { layer.map = map; });
                }
            }
        }
    },

    /**
     Returns the map's current dimensions in pixels.
     The returned object has two properties width and height.
     @return {object} the zoom level
     **/
    mapSize: {
        get: function () {
            return this.map.size;
        }
    },

    maxZoomLevelAtCoordinate: {
        value: function (coordinate, callback) {
            this.map.maxZoomLevelAtCoordinate(coordinate, callback);
        }
    },

    panel: {value: null},

    /**
     * Use this method to redraw a feature.  Useful for instances where
     * a property may have changed that would alter its symbol.
     * @param object
     */
    redrawFeature: {
        value: function (feature) {
            this.map.redrawFeature(feature);
        }
    },

    showMapOverlay: {
        value: function (overlayId) {
            if (overlayId && typeof overlayId === "string") {
                if (overlayId.toUpperCase() === "MGRS") {
                    this.map.mgrsEnabled = true;
                }
            }
        }
    },

    setCenterWithMgrsCoordinates: {
        value: function (mgrs) {
            if (mgrs && this._isMgrsValid(mgrs)) {
                this.map.setCenterWithMgrsCoordinates(mgrs);
                return true;
            } else {
                return false;
            }
        }
    },

    setCenter: {
        value: function (center) {
            this.map.setCenter(center);
        }
    },

    setCenterAndZoom: {
        value: function (center, zoom) {
            this.map.setCenterAndZoom(center, zoom);
        }
    },

    /**
     Set the map to nearest supported zoom level.
     @param {number} the zoom level
     **/
    setMapZoomWithRange: {
        value: function (range) {
            if (this.map) {
                this.map.setZoomWithRange(range);
            }
        }
    },

    setZoom: {
        value: function (value) {
            this.map.setZoom(value);
        }
    },

    viewHazardList: {
        value: function () {
            this.panel.openLeft("ui/hazard/hazard-browser.reel");
        }
    },

    toggleUserTimeZoneList: {
        value: function () {
            var toggleAction = this.panel.toggleLeft("ui/user/user-settings.reel");

            // If opened (close is void & doesn't return a promise)
            if (toggleAction && toggleAction.then) {
                toggleAction.then(function (panel) {panel.selectedTabIndex = 1;});
            }
        }
    }
});
