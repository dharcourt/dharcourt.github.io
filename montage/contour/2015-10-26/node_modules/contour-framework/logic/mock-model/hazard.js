/**
 * @module logic/hazard.js
 */
var Montage = require("montage").Montage,
    HazardCategory = require("logic/mock-model/hazard-category").HazardCategory,
    HazardCategorySelector = require("logic/mock-service/hazard-category-selector").HazardCategorySelector,
    HazardCategoryService = require("logic/mock-service/hazard-category-service").HazardCategoryService,
    HazardIcon = require("logic/model/hazard-icon").HazardIcon,
    HazardSeverity = require("logic/mock-model/hazard-severity").HazardSeverity,
    HazardSeveritySelector = require("logic/mock-service/hazard-severity-selector").HazardSeveritySelector,
    HazardSeverityService = require("logic/mock-service/hazard-severity-service").HazardSeverityService,
    HazardTypeService = require("logic/mock-service/hazard-type-service").HazardTypeService,
    NewFeature = require("logic/model/feature").Feature,
    NewHazard = require("logic/model/hazard").Hazard,
    ObjectStream = require("logic/mock-montage-data/object-stream").ObjectStream,
    ProductSelector = require("logic/mock-service/product-selector").ProductSelector,
    ProductService = require("logic/mock-service/product-service").ProductService,
    moment = require("moment-timezone");

var AttributeMap = {
    "app_ID": "appId",
    "app_IDs": "appIds",
    "hazard_Name" : "name",
    "autoexpire": "autoExpire",
    "category_ID": "categoryId",
    "severity_ID": "severityId",
    "type_ID": "typeId",
    "create_Date": "creationDate",
    "start_Date": "startDate",
    "end_Date": "endDate",
    "last_Update":"updateDate",
    "glide_Uri":"glideUri",
    "comment_Text":"comment",
    "charter_Uri": "charterUri"
};
/**
 * @class Hazard
 * @extends Montage
 *
 * Object representing a feature. This may or may not be a placehoder (TBD).
 *
 */
var Hazard = exports.Hazard = Montage.specialize(/** @lends Hazard.prototype */ {

    constructor: {
        value: function Hazard(data) {
            data = data || Hazard.DEFAULT_PROPERTIES;
            this.type = NewFeature.Type.HAZARD;
            this.properties = new Montage();
            this.properties.hazard = this;

            for (var key in data) {
                if (AttributeMap[key]) {
                    this.properties[AttributeMap[key]] = data[key];
                } else {
                    this.properties[key] = data[key];
                }
            }

            this.id = this.properties.hazard_ID;
            this.geometry = {
                coordinates: [this.properties.longitude, this.properties.latitude],
                type: "Point"
            };

            this.properties.point = this.geometry.coordinates;
            this.properties.creationDate = new moment(+this.properties.creationDate);
            this.properties.startDate = new moment(+this.properties.startDate);
            this.properties.endDate = new moment(+this.properties.endDate);
            this.properties.updateDate = new moment(+this.properties.updateDate);
            this.properties.autoExpire = this.properties.autoExpire === "Y";
            this.properties.icon = Hazard.iconUrl(this);
        }
    },

    // JM: hackism implementation.  Adding just so that we can show the flow of
    // hazard creation before the actual hazard service comes in.
    createHazard: {
        value: function (options) {
            var hazard = new Hazard();
            hazard.properties.point = hazard.geometry.coordinates = options.coordinates;

            Object.defineProperty(hazard, "products", {
                writeable: false,
                get: function () {
                    return new ProductService().query(new ProductSelector(this));
                }
            });

            Object.defineProperty(hazard, "searchTerms", {
                get: function () {
                    if (!this._searchTerms) {
                        var strings = [this.properties.name, this.properties.description, this.properties.typeId, this.properties.categoryId, this.properties.severityId],
                            terms = {},
                            string, split, i, j, n, m;
                        for (i = 0, n = strings.length; i < n; ++i) {
                            string = strings[i] && strings[i].replace(/[\W_]+/g, " ").trim().toLowerCase();
                            split = string && string.split(" ");
                            for (j = 0, m = split ? split.length : 0; j < m; ++j) {
                                terms[split[j]] = this;
                            }
                        }
                        this._searchTerms = terms;
                    }
                    return this._searchTerms;
                }
            });

            Object.defineProperty(hazard.properties, 'layers', {
                get: function () {
                    var stream = new ObjectStream(),
                        layers = HazardTypeService._layers[hazard.properties.typeId];
                    setTimeout(function() {
                        stream.add(layers);
                        stream.resolve(layers);
                    }, 0);
                    return stream;
               },
                writeable: false,
                enumerable: true
            });
            hazard.isNewObject = true;
            return hazard;
        }
    },

    updateIcon: {
        value: function () {
            this.properties.dispatchOwnPropertyChange("icon", this.properties.icon);
        }
    },

    getCenter: {
        value: function () {
            return this.geometry.coordinates;
        }
    }

}, {

    DEFAULT_PROPERTIES: {
        get: function () {

            var now = new moment();

            return {
                appIds: undefined,
                name: "New Hazard",
                autoexpire: false,
                categoryId: Object.keys(HazardCategoryService.categoryById)[0],
                severityId: Object.keys(HazardSeverityService.severityById)[0],
                typeId: Object.keys(HazardTypeService.__hazardTypesById)[0],
                creationDate: now.format(),
                startDate: now.format(),
                endDate: now.format(),
                updateDate: now.format(),
                glideUri: undefined,
                commentText: "",
                charterUri: ""
            };
        }
    },

    initialize: {
        value: function (data) {
            return new Hazard(data);
        }
    },

    iconUrl: {
        value:function (hazard) {
            var category = NewHazard.Category.forId(hazard.properties.categoryId),
                severity = NewHazard.Severity.forId(hazard.properties.severityId),
                type = NewHazard.Type.forId(hazard.properties.typeId);
                icon = HazardIcon.get(category, severity, type);
            return icon && icon.url;
        }
    }

});
