var Target = require("montage/core/target").Target;
var Request = require("montage/core/request");
var Q = require("q");

var AgsLoader = exports.AgsLoader = Target.specialize({ }, {
    _prepareLayer: {
        value: function (data) {
            var serviceUrl = AgsLoader.getServiceUrl(data.url);

            return this.load(serviceUrl).then(function (resp) {
                resp.layer = _.find(resp.service.layers, { name: data.name });
                return resp;
            });
        }
    },
    _prepareService: {
        value: function (data) {
            var service = AgsLoader._normalizeServiceData(data);

            return Request.request(service.url + "/layers?f=json").then(function (resp) {
                var layers, data;
                var error = !resp || !resp.body;

                try {
                    data = JSON.parse(resp.body);
                } catch ( e ) {
                    error = true;
                }

                if ( error || !Array.isArray(data.layers) ) {
                    return Q.reject();
                }

                layers = data.layers;

                layers = layers.map(function (layer) {
                    if (Array.isArray(layer.layers)) {
                        return AgsLoader._normalizeFolderData(layer);
                    } else {
                        return AgsLoader._normalizeLayerData(layer);
                    }
                });

                //_.forEachRight(layers, function (layer) {
                //    var parent;
                //    if (layer.parentId) {
                //        parent = _.find(layers, { id: layer.parentId });
                //        if (!parent.layers) {
                //            parent.layers = [layer];
                //        } else {
                //            parent.layers.push(layer);
                //        }
                //        _.pull(layers, layer);
                //    }
                //});

                service.layers = layers;

                return {
                    service: service
                };
            }, function (err) {
                if (err.status === 0) {
                    throw "CORS";
                }
            });
        }
    },
    load: {
        value: function (url) {
            return Request.request(url + "?f=json", {
                withCredentials: false
            }).then(function (resp) {
                var reject = Q.reject("Wrong data");
                var error = !resp || !resp.body;
                var data;

                try {
                    data = JSON.parse(resp.body);
                } catch ( e ) {
                    error = true
                }

                if ( error ) {
                    return reject;
                }

                data.url = url;

                if (AgsLoader.isServiceData(data)) {
                    return AgsLoader._prepareService(data).then(function (data) {
                        data.type = "service";
                        return data;
                    });
                } else if (AgsLoader.isLayerData(data)) {
                    return AgsLoader._prepareLayer(data).then(function (data) {
                        data.type = "layer";
                        return data;
                    });
                }

                return reject;
            }, function (err) {
                if (err.status === 0) {
                    throw "CORS";
                } else {
                    throw err;
                }
            });
        }
    },
    isServiceData: {
        value: function (data) {
            return Array.isArray(data.layers);
        }
    },
    isLayerData: {
        value: function (data) {
            return data && data.name;
        }
    },
    getProtocol: {
        value: function () {
            return "ArcGIS Server REST";
        }
    },
    _normalizeLayerData: {
        value: function (data) {
            return {
                id: data.id,
                title: data.name.replace(/_/g, " "),
                name: data.name,
                type: "AgsLayer",
                url: data.url,
                refreshInterval: data.refreshInterval,
                description: data.description,
                parentId: (data.parentLayer || {}).id
            };
        }
    },
    _normalizeFolderData: {
        value: function (data) {
            return {
                id: data.id,
                title: data.name.replace(/_/g, " "),
                layers: data.layers,
                parentId: (data.parentLayer || {}).id
            };
        }
    },
    _normalizeServiceData: {
        value: function (data) {
            return {
                name: data.mapName,
                title: data.mapName.replace(/_/g, " "),
                url: data.url,
                description: data.description || data.serviceDescription,
                protocol: AgsLoader.getProtocol(),
                coordSysId: AgsLoader.getCoordSysId(data),
                layers: data.layers.map(function (layer) {
                    return AgsLoader._normalizeLayerData(layer);
                })
            };
        }
    },
    getServiceUrl: {
        value: function (url) {
            var arr;

            url = url.trim().replace(/\/$/, "");
            arr = url.split("/");
            arr.pop();

            return arr.join("/");
        }
    },
    getCoordSysId: {
        value: function (data) {
            return data.spatialReference || "web mercator";
        }
    }
});
