var DataService = require("montage-data/logic/service/data-service").DataService,
    Configuration = require("logic/model/configuration").Configuration,
    ConfigurationService = require("logic/service/configuration-service").ConfigurationService,
    FeatureService = require("logic/service/feature-service").FeatureService,
    HazardLayerService = require("logic/service/hazard-layer-service").HazardLayerService,
    HazardService = require("logic/service/hazard-service").HazardService,
    LayerService = require("logic/service/layer-service").LayerService,
    ProductService = require("logic/service/product-service").ProductService,
    TileService = require("logic/service/tile-service").TileService,
    User = require("logic/model/user").User,
    UserService = require("logic/service/user-service").UserService;

/**
 * The interface to all services used by Contour.
 *
 * @class
 * @extends external:DataService
 */
var ContourService = exports.ContourService = DataService.specialize({}, /** @lends ContourService */ {

    instance: {
        get: function () {
            var instance = this._instance;
            if (!instance) {
                // TO DO [Charles]: Have this defined in blueprint files.
                instance = this._instance = new ContourService();
                instance.addChildService(new ConfigurationService());
                instance.addChildService(new FeatureService());
                instance.addChildService(new HazardService());
                instance.addChildService(new HazardLayerService());
                instance.addChildService(new LayerService());
                instance.addChildService(new ProductService());
                instance.addChildService(new TileService());
                instance.addChildService(new UserService());
                instance.getChildService(Configuration.TYPE).userService = instance.getChildService(User.TYPE);
            }
            return instance;
        }
    }

});
