/**
 * @module "ui/feature/feature-list-settings.reel"
 */
var Component = require("montage/ui/component").Component,
    FeatureCriteria = require("logic/model/feature-criteria").FeatureCriteria;

/**
 * @class FeatureListSettings
 * @extends Component
 */
exports.FeatureListSettings = Component.specialize(/** @lends FeatureListSettings */{
    // properties =======================

    _filter: {
        value: null
    },

    _layer: {
        value: null
    },

    _resetFilter: {
        value: function () {
            var key, subKey,
                filter;
            filter = {};
            for (key in this._layer.featureCriteria.filters) {
                filter[key] = {};
                for (subKey in this._layer.featureCriteria.filters[key]) {
                    filter[key][subKey] = this._layer.featureCriteria.filters[key][subKey];
                }
            }
            this._filter = filter;
        }
    },

    enterDocument: {
        value: function () {
            if (this._layer && !this._filter) {
                this._resetFilter();
            }
        }
    },

    feature: {
        value: null
    },

    layer: {
        get: function () {
            return this._layer;
        },
        set: function (value) {
            var key, subKey;
            if (value !== this._layer) {
                this._layer = value;
                if (this._layer && this._layer.featureFields.filter.length && this._layer.featureCriteria.filters) {
                    var filter = {};
                    this.filterFields = this._layer.featureFields.filter;
                    for (key in this._layer.featureCriteria.filters) {
                        filter[key] = {};
                        for (subKey in this._layer.featureCriteria.filters[key]) {
                            filter[key][subKey] = this._layer.featureCriteria.filters[key][subKey];
                        }
                    }
                    this._filter = filter;
                } else {
                    this._filter = undefined;
                    this.filterFields = [];
                }
            }

        }
    },

    succession: {
        value: null
    },



    // event handlers =======================

    handleBackAction: {
        value: function(event) {
            event.stopPropagation();
            this.succession.components.pop();
            var bounds = this._layer.featureCriteria.bounds;
            this._layer.featureCriteria = FeatureCriteria.withLayerBoundsAndFilters(this._layer, bounds, this._filter);
            this._filter = undefined;
        }
    },

    handleHeadingAction: {
        value: function (event) {
            event.stopPropagation();
            this._resetFilter();
        }
    },

    // lifecycle hooks =======================

    prepareForActivationEvents: {
        value: function () {
            this._titleBar.addEventListener("backAction", this, false);
            this._filterHeading.addEventListener("headingAction", this, false);
        }
    }
});
