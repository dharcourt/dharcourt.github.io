var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer,
    FeatureInspector = require("ui/feature/feature-inspector.reel").FeatureInspector,
    FeatureListSettings = require("ui/feature/feature-list-settings.reel").FeatureListSettings;

/**
 * @class FeatureList
 * @extends external:Component
 */
var FeatureList = exports.FeatureList = Component.specialize(/** @lends FeatureList# */{

    // Set by owner.
    features: {
        get: function () {
            return this._features;
        },
        set: function (features) {
            this._features = features;
        }
    },

    // Set by owner.
    succession: {
        value: undefined
    },

    // Set in serialization.
    _list: {
        value: undefined
    },

    _listSettings: {
        value: undefined
    },

    // Set in serialization.
    _title: {
        value: undefined
    },

    prepareForActivationEvents: {
        value: function () {
            this._pressComposer = new PressComposer();
            this.addComposerForElement(this._pressComposer, this._list.element);
            this._pressComposer.addEventListener("press", this);
            this._title.addEventListener("settingsAction", this);
        }
    },

    handlePress: {
        value: function (event) {
            event.stopPropagation();
            var component = event.targetElement.component,
                feature = component && component.feature,
                pane;
            if (component.identifier === "location" && component.ownerComponent.feature) {
                this.application.delegate.centerOnFeature(component.ownerComponent.feature);
            } else if (feature) {
                pane = new FeatureInspector();
                pane.succession = this.succession;
                pane.feature = feature;
                this.succession.components.push(pane);
            }
        }
    },

    handleSettingsAction: {
        value: function (e) {
            e.stopPropagation();
            if (!this._listSettings) {
                this._listSettings = new FeatureListSettings();
                this._listSettings.owner = this;
                this._listSettings.defineBinding("layer", {"<-": "owner.layer"});
                this._listSettings.succession = this.succession;
            }
            this.succession.components.push(this._listSettings);
        }
    },


    // Used in serialization.
    _getTitle: {
        value: function (count) {
            return count === 1 ? "1 Feature" :
                   count >= 0 ?   count + " Features" :
                                  "";
        }
    }

}, {

});
