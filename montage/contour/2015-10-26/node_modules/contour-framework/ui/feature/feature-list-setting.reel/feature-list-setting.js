/**
 * @module ui/feature/feature-list-setting.reel
 */
var Component = require("montage/ui/component").Component,
    DateEditor = require("ui/control/date-editor.reel").DateEditor,
    NumberEditor = require("ui/control/number-editor.reel").NumberEditor,
    moment = require("moment-timezone");

/**
 * @class FeatureListSetting
 * @extends Component
 */
exports.FeatureListSetting = Component.specialize(/** @lends FeatureListSetting# */ {

    _cancelBindingOnComponent: {
        value: function (component, target) {
            component.getBinding(target) && component.cancelBinding(target);
        }
    },

    _defineBindingOnComponent: {
        value: function (component, target, descriptor) {
            component && (component.getBinding(target) || component.defineBinding(target, descriptor));
        }
    },

    _clearMaxAndMinEditors: {
        value: function (destroyEditors) {
            if (this._minEditor && this._maxEditor) {
                this._cancelBindingOnComponent(this._minEditor, "disabled");
                this._cancelBindingOnComponent(this._minEditor, "max");
                this._cancelBindingOnComponent(this._minEditor, "value");
                this._cancelBindingOnComponent(this._maxEditor, "disabled");
                this._cancelBindingOnComponent(this._maxEditor, "min");
                this._cancelBindingOnComponent(this._maxEditor, "value");
                if (destroyEditors) {
                    this._minEditor = null;
                    this._maxEditor = null;
                }

            }
        }
    },

    _field: { value: undefined },

    __isMinimumEnabled: { value: false },

    _isMinimumEnabled: {
        get: function () {
            return this.__isMinimumEnabled;
        },
        set: function (value) {
            this.__isMinimumEnabled = value;
            if (this._filter) {
                this._setMinAndMaxEditors();
                if (!this.__isMinimumEnabled) {
                    this._filter.minimum = undefined;
                } else {
                    if (this._filter.type === "number" && typeof this._filter.minimum !== "number") {
                        this._filter.minimum = this._isMaximumEnabled ? this._filter.maximum : 0;
                    } else if (this._filter.type === "date" && !this._filter.minimum) {
                        this._filter.minimum = moment();
                    }
                    this._defineBindingOnComponent(this._minEditor, "value", {"<->": "owner.filter.minimum"});
                }
            }
        }
    },

    __isMaximumEnabled: { value: false },

    _isMaximumEnabled: {
        get: function () {
            return this.__isMaximumEnabled;
        },
        set: function (value) {
            this.__isMaximumEnabled = value;
            if (this._filter) {
                this._setMinAndMaxEditors();
                if (!this.__isMaximumEnabled) {
                    this._filter.maximum = undefined;
                } else {
                    if (this._filter.type === "number" && typeof this._filter.maximum !== "number") {
                        this._filter.maximum = this._isMinimumEnabled ? this._filter.minimum : 0;
                    } else if (this._filter.type === "date" && !this._filter.maximum) {
                        this._filter.maximum = moment();
                    }
                    this._defineBindingOnComponent(this._maxEditor, "value", {"<->": "owner.filter.maximum"});
                }
            }
        }
    },

    __minEditor: {
        value: null
    },

    _minEditor: {
        get: function () {
            if (!this.__minEditor && this._filter) {
                this.__minEditor = this._newEditorForType(this._filter.type);
            }
            return this.__minEditor
        },
        set: function (value) {
            if (this.__minEditor && this.__minEditor !== value) {
                this.__minEditor.cancelBindings();
            }
            this.__minEditor = value;
        }
    },

    __maxEditor: { value: undefined },

    _maxEditor: {
        get: function () {
            if (!this.__maxEditor && this._filter) {
                this.__maxEditor = this._newEditorForType(this._filter.type);
            }
            return this.__maxEditor
        },
        set: function (value) {
            if (this.__maxEditor && this.__maxEditor !== value) {
                this.__maxEditor.cancelBindings();
            }
            this.__maxEditor = value;
        }
    },

    _newEditorForType: {
        value: function (type) {
            var editor;
            if (type && type !== "string") {
                switch (type) {
                    case "date":
                        editor = new DateEditor();
                        break;
                    case "number":
                        editor = new NumberEditor();
                        editor.decimalDigits = 2;
                        break;
                }
                editor.owner = this;
            }
            return editor;
        }
    },

    _previousType: { value: null },

    _setMinAndMaxEditors: {
        value: function () {
            if (this._filter) {
                if (this._filter.type === "number") {
                    if (this._isMinimumEnabled && this._isMaximumEnabled) {
                        this._defineBindingOnComponent(this._minEditor, "max", {"<-": "owner._maxEditor.value"});
                        this._defineBindingOnComponent(this._maxEditor, "min", {"<-": "owner._minEditor.value"});
                    } else {
                        this._cancelBindingOnComponent(this._minEditor, "max");
                        this._cancelBindingOnComponent(this._maxEditor, "min");
                        this._minEditor.max = undefined;
                        this._maxEditor.min = undefined;
                    }
                } 
            }
        }
    },

    filter: {
        get: function () {
            return this._filter;
        },
        set: function (fieldFilter) {
            if (this._filter && this._filter.type !== "string") {
                this._clearMaxAndMinEditors(fieldFilter == null);
            }
            this._filter = fieldFilter;


            if (this._filter && this._filter.type !== "string") {
                if (typeof fieldFilter.minimum === "undefined" || fieldFilter.minimum === null) {
                    this._isMinimumEnabled = false;
                } else {
                    this._isMinimumEnabled = true;
                    this._minEditor.value = fieldFilter.minimum;
                }
                if (typeof fieldFilter.maximum === "undefined" || fieldFilter.maximum === null) {
                    this._isMaximumEnabled = false;
                } else {
                    this._isMaximumEnabled = true;
                    this._maxEditor.value = fieldFilter.maximum;
                }
                this._defineBindingOnComponent(this._minEditor, "disabled", {"<-": "!owner._isMinimumEnabled"});
                this._defineBindingOnComponent(this._maxEditor, "disabled", {"<-": "!owner._isMaximumEnabled"});
            }


        }
    }

});
