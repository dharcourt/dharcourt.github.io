/**
 * @module "ui/feature/feature-inspector.reel"
 */
var Component = require("montage/ui/component").Component,
    ImageArrayFormatter = require("logic/model/formatter").ImageArrayFormatter;

/**
 * @class FeatureInspector
 * @extends Component
 */
exports.FeatureInspector = Component.specialize(/** @lends FeatureInspector */{

    _feature: {
        value: null
    },

    // properties =======================

    photos: {
        value: null
    },

    feature: {
        set: function (feature) {
            this._feature = feature;
            this._updatePhotos();
        },
        get: function () {
            return this._feature;
        }
    },

    succession: {
        value: null
    },

    exitDocument: {
        value: function () {
            this.photos = null;
        }
    },

    enterDocument: {
        value: function () {
            this._updatePhotos();
        }
    },

    _updatePhotos: {
        value: function () {
            var hasPhotos = false,
                featureFieldConfiguration = this.feature.layer.featureFieldConfiguration,
                field, formatters, i;

            for (var key in featureFieldConfiguration) {
                if (featureFieldConfiguration.hasOwnProperty(key)) {
                    field = featureFieldConfiguration[key].field;
                    if (field.formatter) {
                        formatters = field.formatter._children;
                        for (i = 0; i < formatters.length; i++) {
                            if (formatters[i] instanceof ImageArrayFormatter) {
                                hasPhotos = true;
                                break;
                            }
                        }
                        if (hasPhotos) {
                            break;
                        }
                    }
                }
            }

            if (hasPhotos) {
                this.photos = this.feature.valueForField(field);
            } else {
                this.photos = null;
            }
        }
    },

    // event handlers =======================

    handleBackAction: {
        value: function (event) {
            event.stopPropagation();
            this.succession.components.pop();
        }
    },

    // lifecycle hooks =======================

    prepareForActivationEvents: {
        value: function () {
            this.addEventListener("backAction", this, false);
        }
    }
});
