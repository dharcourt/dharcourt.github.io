/**
 * @module "ui/hazard/hazard-inspector.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    application = require("montage/core/application").application,
    HazardTypeService = require("logic/mock-service/hazard-type-service").HazardTypeService,
    Layer = require("logic/mock-model/layer").Layer,
    Product = require("logic/model/product").Product,
    Montage = require("montage").Montage;

/**
 * @class HazardInspector
 * @extends Component
 */
exports.HazardInspector = Component.specialize(/** @lends HazardInspector.prototype */{

    succession: { // Defined in serialization.
        value: undefined
    },

    identifier: {
        value: "hazardInspector"
    },

    _prepareProductBindings: {
        value: function () {
            if (this._productTreePane) {
                if (this._isNewHazard && this._productTreePane.getBinding("products")) {
                    this._productTreePane.cancelBinding("products");
                } else if (!this._isNewHazard && !this._productTreePane.getBinding("products")) {
                    this._productTreePane.defineBinding("products", {"<-": "hazard.legacyProducts"});
                }
            }
            if (this._productTimelinePane) {
                if (this._isNewHazard && this._productTimelinePane.getBinding("products")) {
                    this._productTimelinePane.cancelBinding("products");
                } else if (!this._isNewHazard && !this._productTimelinePane.getBinding("products")) {
                    this._productTimelinePane.defineBinding("products", {"<-": "hazard.legacyProducts"});
                }
            }
        }
    },

    _displayAllTabs: {
        value: true
    },

    _isNewHazard: {
        get: function () {
            return this.application.delegate.service.createdDataObjects.has(this._hazard);
        }
    },

    displayAllTabs: {
        get: function () {
            return !this._isNewHazard;
        }
    },

    tabBar: {
        value: null
    },

    tabs: {
        value: undefined
    },

    _tabBarIndex: {
        set: function (value) {
            // When switching tabs, user may have gone from portrait to landscape mode,
            // and ProductTree may already be drilled down several levels,
            // but we only need 1 level for its tree mode.
            if (!this.isPortrait &&
                this._productTreePane &&
                this._productTreePane.isTreeMode &&
                this.succession.components.has(this._productTreePane) &&
                this.succession.components.length > 1) {
                this.succession.components.splice(1, this.succession.components.length - 1);
            }

            if (value !== this.mode && !(value === 0 && this.mode === 4)) {
                this.mode = value;
            }
        }
    },

    _hazard: {
        value: null
    },

    hazard: {
        set: function (value) {
            var self = this,
                pseudoLayers;

            if (value && value !== this._hazard) {;
                this._hazard = value;

                this._prepareProductBindings();
                if (this._isNewHazard) {
                    this.tabBar.selectedIndex = 0;
                }

                // Clear old data before async data comes back
                // otherwise pane may load with old data
                this.layers = null;

                // Unwrap data promise as hazard is set
                // so other components can bind to the unwrapped data property
                // Not unwrapping products data here due to multiple panes needing
                // to bind to multiple products data
                pseudoLayers = HazardTypeService._layers[this._hazard.properties.typeId] || [];
                self.layers = pseudoLayers.map(function (pseudoLayer) {
                    var layer = new Layer(),
                        key;
                    for (key in pseudoLayer) {
                        layer[key] = pseudoLayer[key];
                    }
                    return layer;
                });
                this.dispatchOwnPropertyChange("_isNewHazard", this._isNewHazard);
                this.dispatchOwnPropertyChange("displayAllTabs", this.displayAllTabs);
            } else if (!value) {
                this.mode = 0;
            }
        },
        get: function () {
            return this._hazard;
        }
    },

    layers: {
        value: null
    },

    _isPortrait: {
        value: null
    },

    isPortrait: {
        get: function () {
            return this._isPortrait;
        },
        set: function (value) {
            if (this._isPortrait !== value) {
                this._isPortrait = value;

                // When switching from portrait to landscape mode, ProductTree may already
                // be drilled down several levels, but we only need 1 level for ProductTree
                // in tree mode.
                if (!this._isPortrait &&
                    this.succession.components.has(this._productTreePane) &&
                    this.succession.components.length > 1) {
                    this.succession.components.splice(1, this.succession.components.length - 1);
                }
            }
        }
    },

    _isVisible: {
        value: false
    },

    isVisible: {
        get: function () {
            return this._isVisible;
        },
        set: function (value) {
            this._isVisible = value;

            //if (value && this.tabBar) {
            //    this.mode = 0;
            //}

            if ( !value && this._productsOverlay ) {
                this._productsOverlay.enabled = false;
            }

            if (value && this.productSettings) {
                this.productSettings.view = "tree";
                this.productSettings.sortField = "name";
                this.productSettings.isHidden = false;
                this.productSettings.sortDirection = "Ascending";
            }
        }
    },

    modes: {
        value: {
            INSPECT: 0,
            LAYERS: 1,
            PRODUCTS: 2,
            AREA_BRIEF: 3,
            EDIT: 4
            // RELATED missing
        }
    },

    _mode: {
        value: 0
    },

    mode: {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            if (value !== this._mode) {
                this._mode = value;
            }
        }
    },

    /**
     * @property
     * @type {Promise}
     */
    hazardInfo: {
        get: function () {
            var self = this;
            return require.async("ui/hazard/hazard-info.reel").then(function(exports) {
                var pane = new exports.HazardInfo();
                pane.identifier = "hazardInfo";
                pane.owner = self;
                pane.defineBinding("hazard", {"<-": "hazard", source: self});
                pane.defineBinding("mode", {"<->": "owner.mode"});
                return pane;
            });
        }
    },

    /**
     * @property
     * @type {Promise}
     */
    hazardLayerList: {
        get: function () {
            var self = this;

            return require.async("ui/layer/layer-list.reel").then(function(exports) {
                var pane = new exports.LayerList();
                pane.identifier = "hazardLayerList";
                pane.defineBinding("layers", {"<-": "layers", source: self});
                return pane;
            });
        }
    },

    /**
     * @property
     * @type {Promise}
     */
    hazardAreaBrief: {
        get: function () {
            var self = this;
            return require.async("ui/hazard/hazard-area-brief.reel").then(function(exports) {
                var pane = new exports.HazardAreaBrief();
                pane.identifier = "hazardAreaBrief";
                pane.defineBinding("hazard", {"<-": "hazard", source: self});
                return pane;
            });
        }
    },

    _productSettings: {
        value: null
    },

    productSettings: {
        get: function () {
            if (!this._productSettings) {
                this._productSettings = new Montage();
                this._productSettings.view = "tree";
                this._productSettings.sortField = "name";
                this._productSettings.isHiddenDisplayed = false;
                this._productSettings.sortDirection = "Ascending";
                this._productSettings.addPathChangeListener(
                    "view", this, "handleProductViewChange"
                );
            }
            return this._productSettings;
        }
    },

    _productTimelinePane: { value: null },

    _productTimelinePanePromise: { value: null },

    /**
     * @property
     * @type {Promise}
     */
    productTimelinePane: {
        get: function () {
            var self = this;
            //if ( !this._productsOverlay ) {
            //    this._productsOverlay = new Layer.initializeProductsLayer();
            //
            //    Object.defineProperty(this._productsOverlay, "enabled", {
            //        set: function( enabled ) {
            //            if ( this._enabled !== enabled ) {
            //                this._enabled = enabled;
            //                if ( enabled ) {
            //                    application.map.addOverlay(self._productsOverlay);
            //                } else {
            //                    application.map.removeOverlay(self._productsOverlay);
            //                }
            //            }
            //        },
            //        get: function() {
            //            return this._enabled;
            //        }
            //    });
            //
            //    this._productsOverlay.defineBinding("enabled", {"<->": "productSettings.isGeocodedVisible", source: this});
            //}
            //
            //application.delegate.service.getObjectData(this.hazard, "products").then(function (ret) {
            //    console.log("Hazard: %o %o", self.hazard.legacyProducts, ret);
            //    //self.hazard.legacyProducts = ret;
            //    //self._productsOverlay.data = self.hazard.legacyProducts;
            //    //self._productsOverlay.enabled = true;}
            //});
            if (!this._productTimelinePanePromise) {
                this._productTimelinePanePromise = require.async("ui/product/product-timeline.reel").then(function(exports) {
                    var pane = new exports.ProductTimeline();
                    pane.succession = self.succession;
                    self._productTimelinePane = pane;
                    self._productTreePane.substitute = pane;
                    pane.defineBinding("sortDirection", {"<-": "productSettings.sortDirection", source: self});
                    pane.defineBinding("sortField", {"<-": "productSettings.sortField", source: self});
                    pane.defineBinding("shouldDisplayHiddenProducts", {"<-": "productSettings.isHiddenDisplayed", source: self});
                    pane.defineBinding("products", {"<-": "hazard.products.list", source: self});
                    return pane;
                });
            }
            return this._productTimelinePanePromise;
        }
    },

    _productTreePane: { value: null },

    _productTreePanePromise: { value: null },
    /**
     * @property
     * @type {Promise}
     */
    productTreePane: {
        get: function () {
            var self = this;
            if (!this._productTreePanePromise) {
                this._productTreePanePromise = require.async("ui/product/product-tree.reel").then(function(exports) {
                    var pane = new exports.ProductTree();
                    pane.succession = self.succession;
                    pane.isRootFolder = true;
                    self._productTreePane = pane;
                    pane.defineBinding("isTreeMode", {"<-": "!isPortrait", source: self});
                    pane.defineBinding("sortDirection", {"<-": "productSettings.sortDirection", source: self});
                    pane.defineBinding("sortField", {"<-": "productSettings.sortField", source: self});
                    pane.defineBinding("shouldUseSubstitute", {"<-": "productSettings.view == 'list'", source: self});
                    // Binding products instead of setting it due to data may be lazy-loaded
                    pane.defineBinding("products", {"<-": "hazard.products.tree.children", source: self});
                    return pane;
                });
            }
            return this._productTreePanePromise;
        }
    },

    _productSettingsPanePromise: { value: null },

    _productSettingsPane: { value: null },
    /**
     * @property
     * @type {Promise}
     */
    productSettingsPane: {
        get: function () {
            var self = this;
            if (!this._productSettingsPanePromise) {
                this._productSettingsPanePromise = require.async("ui/product/product-settings.reel").then(function(exports) {
                    var pane = new exports.ProductSettings();
                    self._productSettingsPane = pane;
                    pane.identifier = "productSettings";
                    pane.defineBinding("settings", {"<->": "productSettings", source: self});
                    return pane;
                });
            }

            return this._productSettingsPanePromise
        }
    },

    // lifecycle hooks =======================

    enterDocument: {
        value: function () {
            // MediaQueryList must match panel.css' portrait section
            var portraitMediaQuery = window.matchMedia(
                "(max-width: 1199px) and (max-aspect-ratio: 999999/1000000), (max-width: 299px)"
            );
            portraitMediaQuery.addListener(this.handleMediaQueryChange.bind(this));
            this.isPortrait = portraitMediaQuery.matches;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            this.addEventListener("backAction", this, false);
            this.addEventListener("selectProductTimelineItemAction", this, false);
            this.addEventListener("settingsAction", this, false);
            this.actionMenu.addEventListener("menuAction", this, false);
        }
    },

    // event handlers =======================

    handleMediaQueryChange: {
        value: function (event) {
            event.stopPropagation();
            this.isPortrait = event.matches;
        }
    },

    /**
     * Handles only the back action of panes. The back actions of panels are
     * left to panel.js to handle.
     */
    handleBackAction: {
        value: function (event) {
            if (event.target.parentComponent !== this) {
                event.stopPropagation();
                this.succession.components.pop();
            }
        }
    },

    handleSettingsAction: {
        value: function (event) {
            var self = this;
            event.stopPropagation();

            this.productSettingsPane.then(function (pane) {
                pane.succession = self.succession;
                self.succession.components.push(pane);
            });
        }
    },

    handleMenuAction: {
        value: function (e) {
            e.stopPropagation();
            if (e.detail && e.detail.item) {
                switch (e.detail.item.value) {
                    case "edit":
                        this.mode = this.modes.EDIT !== this.mode ? this.modes.EDIT : this.modes.INSPECT;
                        break;
                    case "zoom":
                        this.application.delegate.centerOnAndZoomToFeature(this._hazard);
                        break;
                    case "pan":
                        this.application.delegate.centerOnFeature(this._hazard);
                        break;
                    case "product":
                        this._addProduct();
                    break;
                }
            }
        }
    },

    /**
     * addPathChangeListener emits unidentified then the actual value,
     * even when the value hasn't changed; below includes hacks to detect whether the
     * "new" value is actually what we care about
     */
    handleProductViewChange: {
        value: function (view) {
            var self = this,
                successionStackSize = this.succession && this.succession.components ? this.succession.components.length : 0;
            if (successionStackSize > 1) {
                if (view === "tree" &&
                    this.succession.components[successionStackSize-2].identifier !== "productTree") {
                    this.productTreePane.then(function (pane) {
                        self.succession.components.splice(0, self.succession.components.length - 1, pane);
                    });
                }

                if (view === "list" &&
                    this.succession.components[successionStackSize-2].identifier !== "productTimeline") {
                    this.productTimelinePane.then(function (pane) {
                        self.succession.components.splice(0, self.succession.components.length - 1, pane);
                    })
                }
            }


        }
    },

    _productInspector: {value: null},

    _productInspectorPromise: {value: null},

    openProductInspector: {
        value: function (product) {
            var self = this;

            // opening for first time
            if (!this._productInspectorPromise) {
                this._productInspectorPromise = require.async("ui/product/product-inspector.reel")
                    .then(function (exports) {
                        self._productInspector = new exports.ProductInspector();
                        self._productInspector.product = product;
                        self._productInspector.panelSuccession = self.panelSuccession;
                        self.panelSuccession.components.push(self._productInspector);
                        self._productInspector.isEditMode = false;
                        return self._productInspector;
                    });

            // not currently open
            } else if (this.panelSuccession.content !== this._productInspector) {
                this._productInspector.product = product;
                self._productInspector.isEditMode = false;
                this.panelSuccession.components.push(this._productInspector);
            }

            return this._productInspectorPromise;
        }
    },

    _addProduct: {
        value: function () {
            var newProduct = this.application.delegate.service.createDataObject(Product.TYPE);
            //Assign defaults
            newProduct.isHidden = "N";
            newProduct.name = "New Product";
            newProduct.type = Product.Type.forId('TEXT_PRODUCT');
            newProduct.organizationAcronym = newProduct.orgAcronym = "PDC";
            this.openProductInspector(newProduct).then(function (pane) {
                pane.isEditMode = true;
            });
        }
    }
});
