/**
 * @module "ui/hazard/hazard-list-settings.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    moment = require("moment-timezone"),
    FeatureCriteria = require("logic/model/feature-criteria").FeatureCriteria;

/**
 * @class HazardListSettings
 * @extends Component
 */
exports.HazardListSettings = Component.specialize(/** @lends HazardListSettings.prototype */ {

    _filter: { value: null },

    _preparedForAction: { value: false },

    _resetFilter: {
        value: function () {
            var key, subKey,
                filter, filterValue, newArray;
            filter = {};

            for (key in this._layer.featureCriteria.filters) {
                filter[key] = {};
                for (subKey in this._layer.featureCriteria.filters[key]) {
                    filterValue = this._layer.featureCriteria.filters[key][subKey];
                    if (filterValue && Array.isArray(filterValue)) {
                        filterValue = filterValue.slice();
                    }

                    filter[key][subKey] = filterValue;
                }
            }
            this._filter = filter;
        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (this._layer) {
                this._resetFilter();
            }
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
      value: function() {
          if (this._preparedForAction) {
              this._preparedForAction = false;
              this.sortLegendBar.removeEventListener("headingAction",this);
              this.filterLegendBar.removeEventListener("headingAction",this);
              this.startDateLabelCheckbox.removeEventListener("action",this);
              this.endDateLabelCheckbox.removeEventListener("action",this);
              this.titleBar.removeEventListener("backAction",this);
          }
      }
    },

    handleBackAction: {
        value: function (event) {
            event.stopPropagation();
            this._layer.featureCriteria = FeatureCriteria.withLayerBoundsAndFilters(this._layer, this.application.delegate.getBounds(), this._filter);
            this.succession.components.pop();
        }
    },

    handleEndDateLabelCheckboxAction: {
        value: function (event) {
            event.stopPropagation();
            this._filter.creationDate.maximum = this._filter.creationDate.maximum ? null : new moment();
        }
    },
    handleFilterLegendBarHeadingAction: {
        value: function (event) {
            event.stopPropagation();
            this._resetFilter();
        }
    },

    handleSortLegendBarHeadingAction: {
        value: function (event) {
            event.stopPropagation();
            this.sortFieldSelectBar.value = this.sortFieldSelectBar.default;
            this.sortDirectionSelectBar.value = this.sortDirectionSelectBar.default;
        }
    },

    handleStartDateLabelCheckboxAction: {
        value: function (event) {
            event.stopPropagation();
            this._filter.creationDate.minimum = this._filter.creationDate.minimum ? null : new moment();
        }
    },

    layer: {
        get: function () {
            return this._layer;
        },
        set: function (value) {
            this._layer = value;

        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this.sortLegendBar.addEventListener("headingAction",this,false);
                this.filterLegendBar.addEventListener("headingAction",this,false);
                this.startDateLabelCheckbox.addEventListener("action",this,false);
                this.endDateLabelCheckbox.addEventListener("action",this,false);
                this.titleBar.addEventListener("backAction",this);
            }
        }
    }

});
