/**
 * @module "ui/hazard/hazard-browser.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    HazardSelector = require("logic/mock-service/hazard-selector").HazardSelector,
    FeatureCriteria = require("logic/model/feature-criteria").FeatureCriteria;;

/**
 * @class HazardBrowser
 * @extends Component
 */
exports.HazardBrowser = Component.specialize(/** @lends HazardBrowser.prototype */ {

    identifier: {value: "hazardBrowser"},

    /**
     * Adding event listeners upon re-entry due to prepareForActivationEvents being fired only once:
     * https://github.com/montagejs/montage/issues/1521
     */
    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this._addEventListeners();

                // Always start with HazardList, in case user drilled down to HazardListSettings
                // previously
                if (this._paneSuccession.content !== this._hazardList) {
                    this._paneSuccession.content = this._hazardList;
                }
            }
        }
    },

    exitDocument: {
        value: function () {
            this._removeEventListeners();
        }
    },

    _layer: { value: null},
    layer: {
        get: function () {
            return this._layer;
        },
        set: function (value) {
            if (this._layer !== value) {
                this._layer = value;
                this.defineBinding("hazards", {"<-":"_layer.features.all"});
            }
        }
    },

    _hazardListSettings: {value: null},

    handleSettingsAction: {
        value: function (event) {
            var self = this;

            event.stopPropagation();

            if (!this._hazardListSettings) {
                require.async("ui/hazard/hazard-list-settings.reel").then(function (exports) {
                    self._hazardListSettings = new exports.HazardListSettings();
                    self._hazardListSettings.layer = self.layer;
                    var tmpFilters = {
                        category: {
                            type: "set",
                            values: []
                        },
                        comment: {
                            type:"string",
                            string: ""
                        },

                        creationDate: {
                            type: "date",
                            minimum: null,
                            maximum: null
                        },
                        name: {
                            type:"string",
                            string: ""
                        },
                        severity: {
                            type: "set",
                            values: []
                        },
                        sort: {
                            propertyName: "",
                            direction: 0 //0 = desc, 1 = asc
                        },

                        status: {
                            type: "set",
                            values: []
                        },
                        type: {
                            type: "set",
                            values: []
                        }
                    };
                    self._layer.featureCriteria =
                        FeatureCriteria.withLayerBoundsAndFilters(self._layer, self.application.delegate.getBounds(), tmpFilters);
                    self._hazardListSettings.succession = self._paneSuccession;
                    self._paneSuccession.components.push(self._hazardListSettings);
                    return self._hazardListSettings;
                });

            } else {
                this._paneSuccession.components.push(this._hazardListSettings);
            }
        }
    },

    handleRefreshHazardsAction: {
        value: function (e) {
            e.stopPropagation();
            this._layer.featureCriteria = FeatureCriteria.withLayerBoundsAndFilters(this._layer, this.application.delegate.getBounds(), this._layer.featureCriteria.filters);
        }
    },

    handleSelectHazardAction: {
        value: function (event) {
            event.stopPropagation();
            this.application.delegate.inspectHazard(event.detail);
        }
    },

    /**
     * Value to be automatically updated
     */
    hazards: {value: [] },

    prepareForActivationEvents: {
        value: function () {
            this._addEventListeners();
        }
    },

    _addEventListeners: {
        value: function () {
            this.addEventListener("backAction", this, false);
            this.addEventListener("settingsAction", this, false);
            this._hazardList.addEventListener("selectHazardAction", this, false);
            this._hazardList.addEventListener("refreshHazardsAction", this, false);
        }
    },

    _removeEventListeners: {
        value: function () {
            if (this._hazardListSettings) {
                this.removeEventListener("backAction", this, false);
            }
            this.removeEventListener("settingsAction", this, false);
            this._hazardList.removeEventListener("selectHazardAction", this, false);
            this._hazardList.removeEventListener("refreshHazardsAction", this, false);
        }
    },

    _hazardInspector: {value: null},

    _hazardInspectorPromise: {value: null},

    openHazardInspector: {
        value: function (mode) {
            var self = this,
                mode = mode || 0;
            // opening for first time
            if (!this._hazardInspectorPromise) {
                this._hazardInspectorPromise = require.async("ui/hazard/hazard-inspector.reel")
                    .then(function (exports) {
                        self._hazardInspector = new exports.HazardInspector();
                        self._hazardInspector.mode = mode;
                        // Setting hazardInspector's panelSuccession so it can
                        // push its productInspector onto the panelSuccession
                        self._hazardInspector.panelSuccession = self.panelSuccession;
                        self.panelSuccession.components.push(self._hazardInspector);

                        return self._hazardInspector;
                    });

            // not currently open
            } else if (this.panelSuccession.content !== this._hazardInspector) {
                this._hazardInspector.mode = mode;
                this.panelSuccession.components.push(this._hazardInspector);

            // currently open but not in the right mode
            } else if (this._hazardInspector.mode !== mode) {
                this._hazardInspector.mode = mode;
            }

            return this._hazardInspectorPromise;
        }
    }
});
