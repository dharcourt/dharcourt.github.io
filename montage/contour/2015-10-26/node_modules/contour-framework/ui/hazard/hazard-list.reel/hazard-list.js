/**
 * @module "ui/hazard-list.reel"
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer,
    TreeController = require("montage/core/tree-controller").TreeController;

/**
 * @class HazardList
 * @extends Component
 */
exports.HazardList = Component.specialize(/** @lends HazardList.prototype */ {
    _hazards: { value: [] },

    _preparedForAction: { value: false },

    _pressComposer: { value: null },

    _treeList: { value: null },

    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
        value: function() {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                if (this._pressComposer) {
                    this._pressComposer.removeEventListener("press", this);
                    this.treeList.removeComposer(this._pressComposer);
                    this._pressComposer = null;
                }
            }
        }
    },

    handleMenuAction: {
        value: function (e) {
            e.stopPropagation();
            var actionKey = e.detail.item.value;
            if (actionKey === "add") {
                this.application.delegate.addHazard();
            } else if (actionKey === "refresh") {
                this.dispatchEventNamed("refreshHazardsAction", true, true, {});
            }

        }
    },

    handlePress: {
        value: function (e) {
            e.stopPropagation();
            var component = e.targetElement.component;
            if (component) {
                if (component.hazard) {
                    this.dispatchEventNamed("selectHazardAction", true, true, component.hazard);
                } else if (component.identifier === "location" && component.ownerComponent.hazard) {
                    this.application.delegate.centerOnFeature(component.ownerComponent.hazard);
                }
            }
        }
    },

    hazards: {
        set: function (hazardList) {
            this._hazards = hazardList;
        },
        get: function () {
            return this._hazards;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                if (!this._pressComposer) {
                    this._pressComposer = new PressComposer();
                    this.treeList.addComposer(this._pressComposer);
                    this._pressComposer.addEventListener("press", this, false);
                }
                this._preparedForAction = true;
            }
        }
    },


    searchTextDidChange: {
        value: function (text, callback) {
            callback();
        }
    },

    treeList: {
        get: function () {
            return this._treeList;
        },
        set: function (value) {
            this._treeList = value;
            this._treeController = new TreeController();
            this._treeController.data = {name: "root"};
            this._treeList.controller = this._treeController;
        }
    }

});
