/**
 * @module ui/hazard/hazard-info.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    Hazard = require("logic/mock-model/hazard").Hazard,
    Enum = require("montage/core/enum").Enum;


/**
 * @class HazardInfo
 * @extends Component
 */
exports.HazardInfo = Component.specialize(/** @lends HazardInfo.prototype */{
    _creationDate: {
        set: function(text) {
            text.converter = this._dateConverter;
        }
    },

    _hazardLink: { value: null },

    __iconUrl: {
        value: ""
    },
    _iconUrl: {
        get: function() {
            return this.__iconUrl;
        },
        set:function(value) {
            this.__iconUrl = value;
            this.needsDraw = true;
        }
    },
    _isNewHazard: {
        get: function () {
            return this.application.delegate.service.createdDataObjects.has(this._hazard);
        }
    },
    _dateConverter: {
        value: {
            convert: function(input) {
                return input ? input.format("M.DD.YYYY H\\h:mm\\m") : "";
            }
        }
    },
    draw: {
        value: function () {
            if (this._hazard) {
                this.icon.style.backgroundImage = 'url(' + this.__iconUrl + ')';
            }

            if (this.__newTypeClass) {
                if (this.__oldTypeClass) {
                    this.type.classList.remove(this.__oldTypeClass);
                }
                this.type.classList.add(this.__newTypeClass);
            }
        }
    },
    _disablePointSelectionMode: {
        value: function () {
            this.isSelectingLocation = false;
            this.application.map.enterPanMode();
        }
    },
    _enablePointSelectionMode: {
        value: function () {
            this.isSelectingLocation = true;
            this.application.map.enterPointSelectionMode({
                callback: this.handlePointSelection.bind(this)
            });
        }
    },
    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }

        }
    },
    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this.coordinateEditor.removeEventListener("coordinateAction", this);
            }
            if (this.isSelectingLocation) {
                this._disablePointSelectionMode();
            }
        }
    },
    handleCancelAction: {
        value: function (e) {
            e.stopPropagation();
            if (this.mode === 5 && this._isNewHazard) {
                this.application.delegate.viewHazardList();
            } else {
                this.mode = 0;
            }
        }
    },
    handleAddAction: {
        value: function (e) {
            e.stopPropagation();
            var self = this;
            this.application.delegate.service.saveDataChanges().then(function (result) {
                self.application.delegate.viewHazardList();
            });

        }
    },
    handleSaveAction: {
        value: function (e) {
            e.stopPropagation();
            var self = this;
            this.application.delegate.service.saveDataChanges().then(function (result) {
                self.mode = 0;
            });
        }
    },
    handleCoordinateAction: {
        value: function (e) {
            e.stopPropagation();
            if (!this.isSelectingLocation) {
                this._enablePointSelectionMode();
            } else {
                this._disablePointSelectionMode();
            }
        }
    },

    handlePointSelection: {
        value: function (coordinate) {
            this.hazard.properties.point = coordinate;
        }
    },
    _hazard: {
        value: null
    },
    hazard: {
        get: function () {
            return this._hazard;
        },
        set: function (hazard) {
            this._hazard = hazard;
            if (hazard) {
                this.longitudeDirection = this._hazard.properties.point.get(0) > 0 ? "E" : "W";
                this.latitudeDirection = this._hazard.properties.point.get(1) > 0 ? "N" : "S";
                this.__iconUrl = hazard.properties.icon;
                this._typeClass = hazard.properties.typeId;
                this._hazardLink = [location.protocol, '//', location.host, location.pathname,"?hazard_id="+ (this._hazard ? this._hazard.id : "") ].join('');
            }

            this.dispatchOwnPropertyChange("_isNewHazard", this._isNewHazard);
            if (this.isSelectingLocation) {
                this._disablePointSelectionMode();
            }
            this.needsDraw = true;
        }
    },
    isSelectingLocation: {
        value: false
    },
    _latitudeDirection: {
        value: "N"
    },
    latitudeDirection: {
        set: function (value) {
            if (value && value !== this._latitudeDirection) {
                this._latitudeDirection = value;
            }
        },
        get: function () {
            return this._latitudeDirection;
        }
    },
    _longitudeDirection: {
        value: "E"
    },
    longitudeDirection: {
        set: function (value) {
            if (value && value !== this._longitudeDirection) {
                this._longitudeDirection = value;
            }
        },
        get: function () {
            return this._longitudeDirection;
        }
    },
    _mode: {
        value: 0
    },
    mode: {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            if (this._mode !== value) {
                this._mode = value === 4 ? 4 : 0;
                this.needsDraw = true;
            }
        }
    },
    _preparedForAction: {
        value: false
    },
    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this.coordinateEditor.addEventListener("coordinateAction", this, false);
                this.editBar.addEventListener("cancelAction", this);
                this.editBar.addEventListener("addAction", this);
                this.editBar.addEventListener("saveAction", this);
            }
        }
    },
    __oldTypeClass: {
        value: null
    },
    __newTypeClass: {
        value: null
    },
    _typeClass: {
        set: function (value) {
            if (this.__newTypeClass !== value) {
                this.__oldTypeClass = this.__newTypeClass;
                this.__newTypeClass = value;
                this.needsDraw = true;
            }
        },
        get: function () {
            return this.__newTypeClass;
        }
    },
    _typeScrollLeft: {
        value: -1
    }
});
