/**
 * @module ui/map/feature-overlay.reel
 * @requires montage/ui/component
 */
var LayerOverlayComponent = require("ui/map/layer-overlay-component").LayerOverlayComponent,
    OverlayType = require("logic/map/overlay-type").OverlayType,
    MapDataConverter = require("logic/map/converters/map-data-converter").MapDataConverter,
    Feature = require("logic/model/feature").Feature;

/**
 * @class ImportOverlay
 * @extends LayerOverlayComponent
 */
exports.ImportOverlay = LayerOverlayComponent.specialize(/** @lends ImportOverlay */ {
    clustered: {
        value: false
    },

    isInitialized: {
        value: false
    },

    features: {
        value: []
    },

    symbols: {
        value: {}
    },

    _type: {
        value: OverlayType["Import"]
    },

    constructor: {
        value: function ImportOverlay() {
            this.super();
            this.enable = true;
        }
    },

    initialize: {
        value: function () {
            var layer = this.layer,
                data = layer.data,
                geojson;

            switch (layer.dataType) {
                case "kml":
                    MapDataConverter.kmlToGeojson(data, this.prepare.bind(this));
                    return;
                case "gpx":
                    geojson = MapDataConverter.gpxToGeojson(data);
                    break;
                case "wkt":
                    geojson = MapDataConverter.wktToGeojson(data);
                    break;
                case "geojson":
                    geojson = data;
                    break;
                default:
                    console.error("Wrong data type.");
                    return;
            }
            this.prepare(geojson);
        }
    },

    prepare: {
        value: function (geojson) {
            var layer = this.layer;

            if (!geojson) {
                // @TODO Show error to user
                console.error("Wrong data.");
                return;
            }

            layer.dataType = "geojson";
            layer.data = geojson;

            this.features = [];

            if (geojson.type === "FeatureCollection") {
                this.addFeatures(geojson.features);
            } else if (geojson.type === "Feature") {
                this.addFeature(geojson);
            }

            this.isInitialized = true;
        }
    },

    remove: {
        value: function () {
            this.isInitialized = false;

            var symbols = this.symbols[this._engine.uuid];

            if (!symbols) {
                return;
            }

            var keys = Object.keys(symbols),
                len = keys.length;

            for (var i = 0; i < len; i++) {
                this._removeFeature(symbols[keys[i]]);
            }

            this.symbols = {};
        }
    },

    addFeature: {
        value: function (data) {
            var feature = new Feature();

            feature.properties = data.properties || {};
            feature.geometry = data.geometry;

            feature.type = Feature.Type.IMPORTED;
            feature.properties.componentId = this.uuid;

            feature.layer = this.layer;

            this.features.push(feature);

            this.needsDraw = true;
        }
    },

    addFeatures: {
        value: function (features) {
            var len = features.length;

            if (Array.isArray(features)) {
                for (var i = 0; i < len; i++) {
                    this.addFeature(features[i]);
                }
            }
        }
    },

    engine: {
        get: function () {
            return this._engine;
        },
        set: function (value) {
            if (value && value !== this._engine) {
                this._engine = value;
                this._engine.addOverlayComponent(this);

                if (!this.symbols[this.engine.uuid]) {
                    this.symbols[this.engine.uuid] = {};
                }
            }
        }
    },

    mapComponent: {
        get: function () {
            return this._mapComponent;
        },
        set: function (value) {
            if (value) {
                this._mapComponent = value;
                this.defineBinding("engine", {"<-": "mapEngine", "source": this._mapComponent});
            }
        }
    },

    draw: {
        value: function () {
            var features = this.features,
                len = features.length;

            for (var i = 0; i < len; i++) {
                this._drawFeature(features[i]);
            }
        }
    },

    getGeoJson: {
        value: function () {
            if (!this.isInitialized) {
                return null;
            }
            return this.layer.data;
        }
    },

    _drawFeature: {
        value: function (feature) {
            var symbol;

            if (!this.symbols[this.engine.uuid]) {
                this.symbols[this.engine.uuid] = {};
            }

            if (!this.symbols[this.engine.uuid][feature.uuid]) {
                symbol = this.engine.drawFeature(feature);
                this.symbols[this.engine.uuid][feature.uuid] = symbol;
            }
        }
    },

    _removeFeature: {
        value: function (feature) {
            this.engine.removeSymbol(feature);
        }
    }

});
