var Component = require("montage/ui/component").Component,
    FeatureOverlay = require("ui/map/feature-overlay.reel").FeatureOverlay,
    HeatMapOverlay = require("ui/map/heat-map-overlay.reel").HeatMapOverlay,
    ImportOverlay = require("ui/map/import-overlay.reel").ImportOverlay,
    Layer = require("logic/model/layer").Layer,
    MockFeatureOverlay = require("ui/map/mock-feature-overlay.reel").MockFeatureOverlay,
    ProductOverlay = require("ui/map/product-overlay.reel").ProductOverlay,
    Protocol = require("logic/model/protocol").Protocol,
    TileOverlay = require("ui/map/tile-overlay.reel").TileOverlay;

/**
 * @class LayerOverlayContainer
 * @extends Component
 */
exports.LayerOverlayContainer = Component.specialize(/** @lends LayerOverlayContainer# */ {

    animationController: { // Set by owner.
        value: null
    },

    layer: { // Set by owner.
        get: function () {
            return this._layer;
        },
        set: function (layer) {
            if (layer && layer !== this._layer) {
                this._layer = layer;
                this._updateSlotContent();
            }
        }
    },

    mapComponent: { // Set by owner.
        value: undefined
    },

    _slot: { // Set in serialization.
        get: function () {
            return this.__slot;
        },
        set: function (slot) {
            if (slot && slot !== this.__slot) {
                this.__slot = slot;
                this._updateSlotContent();
            }
        }
    },

    _updateSlotContent: {
        value: function() {
            // TODO: Remove support for mock layers, leaving only the binding
            // management here.
            if (this._slot && this.layer) {
                if (this.layer.type instanceof Layer.Type) {
                    this.__layerType = undefined;
                    if (this.getBinding("_layerType")) {
                        this.cancelBinding("_layerType");
                    }
                    this.defineBinding("_layerType", {"<-": "type", source: this.layer});
                } else {
                    this._updateSlotComponentForMockLayer();
                }
            }
        }
    },

    _layerType: {
        get: function () {
            return this.__layerType;
        },
        set: function (type) {
            type = type || undefined;
            if (type instanceof Layer.Type && type !== this.__layerType) {
                this.__layerType = type;
                if (type === Layer.Type.FEATURE) {
                    this._setSlotContent(new FeatureOverlay());
                } else if (type === Layer.Type.RASTER) {
                    this._setSlotContent(new TileOverlay());
                } else if (type === Layer.Type.HEAT_MAP) {
                    this._setSlotContent(new HeatMapOverlay());
                } else if (type === Layer.Type.IMPORT) {
                    this._setSlotContent(new ImportOverlay());
                } else if (type === Layer.Type.PRODUCT) {
                    this._setSlotContent(new ProductOverlay());
                }
            }
        }
    },

    _updateSlotComponentForMockLayer: {
        value: function () {
            var overlayComponent,
                switchValue;

            // hack while integrating new service with mock service.
            if (this.layer.mapService) {
                switchValue = this.layer.mapService.protocol;
            } else {
                switchValue = this.layer.type;
            }

            switch (switchValue) {
                case Protocol.ARCGIS:
                    if (this.layer.type === "Feature Layer") {
                        overlayComponent = new FeatureOverlay();
                    } else {
                        overlayComponent = new TileOverlay();
                    }
                    break;
                case Protocol.WMTS:
                case Protocol.WMS:
                    overlayComponent = new TileOverlay();
                    break;
                case "feature":
                    overlayComponent = new MockFeatureOverlay();
                    break;
                case Protocol.SOCIAL:
                case "heatMap":
                    overlayComponent = new HeatMapOverlay();
                    break;
                case "tile":
                    overlayComponent = new TileOverlay();
                    break;
                case "import":
                    overlayComponent = new ImportOverlay();
                    break;
                case "product":
                    overlayComponent = new ProductOverlay();
                    break;
            }
            if (overlayComponent) {
                this._setSlotContent(overlayComponent);
            }
        }
    },

    _setSlotContent: {
        value: function (component) {
            component.mapComponent = this.mapComponent;
            component.animationController = this.animationController;
            component.layer = this.layer;
            this._slot.content = component;
        }
    }

});
