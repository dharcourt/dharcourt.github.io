/**
 * @module ui/user-timezone-country-list.reel
 */
var Component = require("montage/ui/component").Component,
    ObjectSelector = require("logic/mock-montage-data/object-selector").ObjectSelector;

/**
 * @class UserTimezoneCountryList
 * @extends Component
 */
exports.UserTimezoneCountryList = Component.specialize(/** @lends UserTimezoneCountryList# */ {
    constructor: {
        value: function UserTimezoneCountryList() {
            var self = this;
            this.application.mockService.query(new ObjectSelector("timeZone")).then(function (timeZones) {
                self.timeZones = timeZones;
                self.dispatchOwnPropertyChange("countryList", self.countryList);
            })
        }
    },

    // Set by owner
    currentTimezone: {
        value: null
    },

    countryList: {
        get: function () {
            var countryList = [];
            if (!this.timeZones) {
                return countryList;
            }
            var len = this.timeZones.length;
            for (var i = 0; i < len; i++) {
                var item = {"title": this.timeZones[i].country};
                if (item.title === this.currentTimezone.country) {
                    item.isEnabled = true;
                } else {
                    item.isEnabled = false;
                }
                countryList.push(item);
            }
            return countryList;
        }
    },

    cityList: {
        get: function () {
            var cityList = [];
            if (!this.timeZones) {
                return cityList;
            }
            var countryCityList = [];
            var len = this.timeZones.length;
            var i;
            for (i = 0; i < len; i++) {
                if (this.timeZones[i].country == this.currentTimezone.country) {
                    countryCityList = this.timeZones[i].cities;
                    break;
                }
            }
            len = countryCityList.length;
            var found = false;
            for (i = 0; i < len; i++) {
                var item = {"title": countryCityList[i]};
                if (item.title === this.currentTimezone.city) {
                    item.isEnabled = true;
                    found = true;
                } else {
                    item.isEnabled = false;
                }
                cityList.push(item);
            }
            if (!found) {
                cityList[0].isEnabled = true;
            }
            return cityList;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this.addEventListener("userListItemSelected", this, false);
                this._preparedForAction = true;
            }
        }
    },

    handleUserListItemSelected: {
        value: function () {
            var selectedItem = "";
            if (this.templateObjects.selectList._selectedItem) {
                selectedItem = this.templateObjects.selectList._selectedItem.title;
            }
            if (this.currentTimezone.country != selectedItem) {
                this.currentTimezone.country = selectedItem;
                this.currentTimezone.city = this.cityList[0].title;
            }
            this.dispatchEventNamed("openCityListAction", true, true, {
                currentTimezone: this.currentTimezone,
                cityList: this.cityList
            });
        }
    }
});
