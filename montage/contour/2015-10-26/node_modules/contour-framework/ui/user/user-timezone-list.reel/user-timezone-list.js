/**
 * @module ui/user-timezone-list.reel
 */
var Component = require("montage/ui/component").Component,
    TranslateComposer = require("montage/composer/translate-composer").TranslateComposer;

var LIST_ITEM_HEIGHT = 56;

/**
 * @class UserTimezoneList
 * @extends Component
 */
exports.UserTimezoneList = Component.specialize(/** @lends UserTimezoneList# */ {

    constructor: {
        value: function UserTimezoneList() {

        }
    },

    // Element provided by serialization.
    // This is the element that the user drags.
    dragHolder: {
        value: undefined
    },

    // The repetition component that contains the
    // list of timezones.
    list: {
        value: undefined
    },

    // The component that is being dragged.
    _draggedComponent: {
        value: undefined
    },

    // The timezone that is being dragged.
    _draggedTimezone: {
        value: undefined
    },

    // The y offset of the original press down.
    _translationOrigin: {
        value: undefined
    },

    // The translate composer.
    _translateComposer: {
        value: undefined
    },

    // The component that is pressed.
    _target: {
        value: undefined
    },

    content: {
        value: null
    },

    handleAddTimezoneButtonAction: {
        value: function (event) {
            this.dispatchEventNamed("createTimezoneAction", true, true, event.detail);
        }
    },

    handleTranslate: {
        value: function (event) {
            if (this._isDragging) {
                this.needsDraw = true;
            }
        }
    },

    handleTranslateEnd: {
        value: function (event) {
            if (this._isDragging) {
                this._isDragging = false;
                this._draggedComponent.value = this._draggedTimezone;
                this._draggedComponent.hideElement = false;
                this._translationOrigin = undefined;
                this._translateComposer.translateX = this._translateComposer.translateY = 0;
                this.dispatchEventNamed("saveUserToServerAction", true, true, null);
            }
        }
    },

    handleTranslateStart: {
        value: function (event) {
            this._target = this._translateComposer.pointerStartEventPosition.target.component;
            if (this._target.identifier === "dragIcon") {
                event.stopPropagation();
                this._isDragging = true;
                this._draggedComponent = this._target.ownerComponent;
                this._draggedTimezone = this.dragHolder.value = this._draggedComponent.value;
                this._target.ownerComponent.hideElement = true;
                this.needsDraw = true;
            }
        }
    },

    prepareForActivationEvents: {
        value: function () {
            this._translateComposer = TranslateComposer.create();
            this._translateComposer.hasMomentum = false;
            this._translateComposer.addEventListener("translate", this, false);
            this._translateComposer.addEventListener("translateStart", this, false);
            this._translateComposer.addEventListener("translateEnd", this, false);
            this.addComposer(this._translateComposer);
        }
    },

    draw: {
        value: function () {
            var draggedComponentIndex,
                hoverIndex,
                top;
            if (this._isDragging) {
                top = this._translationOrigin + this._translateComposer.translateY;
                if (top < 0) top = 0;
                if (top > this._maxHeight) top = this._maxHeight;
                this.dragHolder.element.style.width = this._width;
                this.dragHolder.element.style.top = top + "px";
                this.dragHolder.element.style.left = 0;
                hoverIndex = Math.round(top / LIST_ITEM_HEIGHT);
                draggedComponentIndex = this.content.indexOf(this._draggedTimezone);
                if (draggedComponentIndex !== hoverIndex) {
                    this.content.splice(draggedComponentIndex, 1);
                    this.content.splice(hoverIndex, 0, this._draggedTimezone);
                }
            }
        }
    },

    willDraw: {
        value: function () {
            this._width = this.element.offsetWidth + "px";
            this._maxHeight = this.list.element.offsetHeight - LIST_ITEM_HEIGHT;
            if (this._translateComposer && this._translationOrigin === undefined && this._translateComposer.pointerStartEventPosition) {
                var boundingBox = this.element.getBoundingClientRect();
                this._translationOrigin = this._translateComposer.pointerStartEventPosition.pageY - LIST_ITEM_HEIGHT / 2 - boundingBox.top + this.element.scrollTop;
            }
        }
    }
});
