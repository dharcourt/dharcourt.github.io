/**
 * @module ui/user-settings.reel
 */
var Component = require("montage/ui/component").Component,
    ObjectSelector = require("logic/mock-montage-data/object-selector").ObjectSelector,
    UserLanguage = require("ui/user/user-language.reel").UserLanguage,
    UserBookmarkList = require("ui/user/user-bookmark.reel").UserBookmark,
    UserTimezoneInspector = require("ui/user/user-timezone-inspector.reel").UserTimezoneInspector,
    UserTimezoneCountryList = require("ui/user/user-timezone-country-list.reel").UserTimezoneCountryList,
    UserTimezoneCityList = require("ui/user/user-timezone-city-list.reel").UserTimezoneCityList;

/**
 * @class UserSettings
 * @extends Component
 */
exports.UserSettings = Component.specialize(/** @lends UserSettings.prototype */ {

    constructor: {
        value: function UserSettings() {
            var self = this;
            this.application.mockService.query(new ObjectSelector("user")).then(function (user) {
                self.user = user;
            });
        }
    },

    isVisible: {
        value: false
    },

    identifier: {value: "user"},

    user: {
        value: null
    },

    _selectedTabIndex: {
        value: 0
    },

    selectedTabIndex: {
        set: function (val) {
            this._selectedTabIndex = val >= 0 ? val : 0;
        },
        get: function () {
            return this._selectedTabIndex;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            //this.addEventListener("saveLanguageAction", this, false);
            this.addEventListener("saveBookmarkAction", this, false);
            this.addEventListener("saveTimezoneAction", this, false);
            this.addEventListener("changePasswordAction", this, false);
            this.addEventListener("saveUserToServerAction", this, false);
            this.addEventListener("openLanguageListAction", this, false);
            this.addEventListener("openBookmarkListAction", this, false);
            this.addEventListener("openTimezoneInspectorAction", this, false);
            this.addEventListener("openCountryListAction", this, false);
            this.addEventListener("openCityListAction", this, false);
            this.addEventListener("cityListSelectedAction", this, false);
            this.addEventListener("backAction", this, false);
            this.addEventListener("deleteTimezoneAction", this, false);
            this.addEventListener("createTimezoneAction", this, false);
        }
    },

    handleDeleteTimezoneAction: {
        value: function (event) {
            event.stopPropagation();
            var index = this.user.timeZones.indexOf(event.detail);
            if (index >= 0) {
                this.user.timeZones.splice(index, 1);
            }
            this._succession.components.pop();
            this.dispatchEventNamed("saveUserToServerAction", true, true, null);
        }
    },

    handleCreateTimezoneAction: {
        value: function (event) {
            event.stopPropagation();
            var newTimezone = {label: "", country: "United States", city: "Washington, D.C."};
            this.user.timeZones.push(newTimezone);
            var event = {};
            event.detail = newTimezone;
            this.handleOpenTimezoneInspectorAction(event);
            this.dispatchEventNamed("saveUserToServerAction", true, true, null);
        }
    },

    handleOpenCountryListAction: {
        value: function (event) {
            event.stopPropagation();
            var component = new UserTimezoneCountryList();
            component.currentTimezone = event.detail;
            this._succession.components.push(component);
        }
    },

    handleOpenCityListAction: {
        value: function (event) {
            event.stopPropagation();
            var component = new UserTimezoneCityList();
            component.content = event.detail.cityList;
            component.currentTimezone = event.detail.currentTimezone;
            this._succession.components.push(component);
        }
    },

    handleCityListSelectedAction: {
        value: function (event) {
            event.stopPropagation();
            // Popup twice to return inspector page
            this._succession.components.pop();
            this._succession.components.pop();
        }
    },


    handleOpenTimezoneInspectorAction: {
        value: function (event) {
            var component = new UserTimezoneInspector();
            component.value = event.detail;
            component.user = this.user;
            this._succession.components.push(component);
        }
    },

    handleOpenBookmarkListAction: {
        value: function (event) {
            event.stopPropagation();
            var component = new UserBookmarkList();
            component.bookmarks = this.user.bookmarks;
            this._succession.components.push(component);
        }
    },

    handleOpenLanguageListAction: {
        value: function (event) {
            event.stopPropagation();
            var component = new UserLanguage();
            component.languages = this.user.languages;
            this._succession.components.push(component);
        }
    },

    handleBackAction: {
        value: function (event) {
            event.stopPropagation();
            this._succession.components.pop();
        }
    },

    _userTimezoneBrowser: {
        get: function () {
            var self = this;
            return require.async("ui/user/user-timezone-browser.reel").then(function (exports) {
                var pane = new exports.UserTimezoneBrowser();
                pane.owner = self;
                pane.succession = self._succession;
                pane.defineBinding("isVisible", {"<-": "owner.isVisible"});
                pane.defineBinding("user", {"<->": "owner.user"});
                return pane;
            });
        }
    },

    viewDidAppear: {
        value: function () {
            // Current display component.
            var component = this.templateObjects.tabPanel.element.children[0].component;
            if (component.templateObjects.selectList && component.templateObjects.selectList.isEditing) {
                component.templateObjects.selectList.handleEditBarCancelAction();
            }
        }
    },

    handleSaveLanguageAction: {
        value: function (event) {
            //TODO call service to save settings;
            this.templateObjects.userLanguage.handleSaveLanguageSuccess();
        }
    },

    handleSaveBookmarkAction: {
        value: function (event) {
            //TODO call service to save settings;
            this.templateObjects.userBookmark.handleSaveBookmarkSuccess();
        }
    },

    handleSaveTimezoneAction: {
        value: function (event) {
            //TODO call service to save settings;
            this.templateObjects.userTimezone.handleSaveTimezoneSuccess();
        }
    },

    handleChangePasswordAction: {
        value: function (event) {
            //TODO call service to save settings;
            this.templateObjects.userPassword.handleChangePasswordSuccess();
        }
    },

    handleSaveUserToServerAction: {
        value: function (event) {
            this.application.mockService.services.user.save(this.user);
            this.application.dispatchEventNamed("userDidSaveAction", true, true, null);
        }
    }

});
