/**
 * @module ui/layer/layer-import.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    LayerImportList = require("ui/layer/import/layer-import-list.reel").LayerImportList,
    LayerImportFileInspector = require("ui/layer/import/layer-import-file-inspector.reel").LayerImportFileInspector,
    LayerUserAgsServiceInspector = require("ui/layer/import/layer-user-ags-service-inspector.reel").LayerUserAgsServiceInspector,
    LayerUserWmsServiceInspector = require("ui/layer/import/layer-user-wms-service-inspector.reel").LayerUserWmsServiceInspector,
    LayerUserFolderInspector = require("ui/layer/import/layer-user-folder-inspector.reel").LayerUserFolderInspector,
    LayerImportFileDetails = require("ui/layer/import/layer-import-file-details.reel").LayerImportFileDetails,
    LayerUserServiceDetails = require("ui/layer/import/layer-user-service-details.reel").LayerUserServiceDetails,
    LayerListSettings = require("ui/layer/layer-list-settings.reel").LayerListSettings,
    ImportLayersService = require("logic/mock-service/import-layers-service").ImportLayersService;

/**
 * @class LayerImport
 * @extends Component
 */
exports.LayerImport = Component.specialize(/** @lends LayerImport.prototype */{
    /**
     * Keep track of what's instantiated already and reuse if available.
     */
    panes: {
        value: {
            layerListSettings: null,
            layerImportList: null,
            layerImportFileInspector: null
        }
    },

    succession: {
        value: null
    },

    constructor: {
        value: function LayerImport() {

        }
    },

    _getLayerImportList: {
        value: function () {
            if (!this.panes.layerImportList) {
                this.panes.layerImportList = new LayerImportList();
                this.panes.layerImportList.addEventListener("menuAction", this, false);
                this.panes.layerImportList.addEventListener("itemSelected", this, false);
            }
            return this.panes.layerImportList;
        }
    },

    _getLayerImportFileInspector: {
        value: function () {
            if (!this.panes.layerImportFileInspector) {
                this.panes.layerImportFileInspector = new LayerImportFileInspector();
                this.panes.layerImportFileInspector.addEventListener("fileLoadedAction", this, false);
            }
            return this.panes.layerImportFileInspector;
        }
    },

    _getUserAgsServiceInspector: {
        value: function () {
            if (!this.panes.agsServiceInspector) {
                this.panes.agsServiceInspector = new LayerUserAgsServiceInspector();
                this.panes.agsServiceInspector.identifier = "layerUserAgsServiceInspector";
                this.panes.agsServiceInspector.addEventListener("action", this, false);
                this.panes.agsServiceInspector.addEventListener("serviceLoaded", this, false);
            }
            return this.panes.agsServiceInspector;
        }
    },

    _getUserWmsServiceInspector: {
        value: function () {
            if (!this.panes.wmsServiceInspector) {
                this.panes.wmsServiceInspector = new LayerUserWmsServiceInspector();
                this.panes.wmsServiceInspector.identifier = "layerUserWmsServiceInspector";
                this.panes.wmsServiceInspector.addEventListener("action", this, false);
                this.panes.wmsServiceInspector.addEventListener("serviceLoaded", this, false);
            }
            return this.panes.wmsServiceInspector;
        }
    },

    _getUserFolderInspector: {
        value: function () {
            if (!this.panes.folderInspector) {
                this.panes.folderInspector = new LayerUserFolderInspector();
                this.panes.folderInspector.identifier = "layerUserFolderInspector";
                this.panes.folderInspector.addEventListener("action", this, false);
            }
            return this.panes.folderInspector;
        }
    },

    _getLayerImportFileDetails: {
        value: function () {
            if (!this.panes.importFileDetails) {
                this.panes.importFileDetails = new LayerImportFileDetails();
                this.panes.importFileDetails.identifier = "layerImportFileDetails";
                this.panes.importFileDetails.addEventListener("action", this, false);
                this.panes.importFileDetails.addEventListener("fileRemoved", this, false);
            }
            return this.panes.importFileDetails;
        }
    },

    _getUserServiceDetails: {
        value: function () {
            if (!this.panes.userServiceDetails) {
                this.panes.userServiceDetails = new LayerUserServiceDetails();
                this.panes.userServiceDetails.identifier = "layerUserServiceDetails";
                this.panes.userServiceDetails.addEventListener("action", this, false);
            }
            return this.panes.userServiceDetails;
        }
    },

    _back: {
        value: function () {
            while (this.succession.components.length !== 1) {
                this.succession.components.pop();
            }
        }
    },

    enterDocument: {
        value: function () {
            this.succession.content = this._getLayerImportList();
        }
    },

    // Lifecycle hooks =======================

    /**
     * Though the settings & back buttons may be owned by other components,
     * handling them centrally here to minimize duplicated code
     */
    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAtion) {
                this._preparedForAtion = true;
                this.addEventListener("settingsAction", this, false);
                this.addEventListener("backAction", this, false);
            }
        }
    },

    // Event handlers =======================

    handleServiceLoaded: {
        value: function (event) {
            var layerUserServiceDetails = this._getUserServiceDetails();
            layerUserServiceDetails.service = event.detail;
            this.succession.components.push(layerUserServiceDetails);
        }
    },

    handleItemSelected: {
        value: function (event) {
            var data = event.detail,
                layerImportFileDetails,
                layerUserServiceDetails;

            if (data.type === "file") {
                layerImportFileDetails = this._getLayerImportFileDetails();
                layerImportFileDetails.file = data.data;
                this.succession.components.push(layerImportFileDetails);
            } else if (data.type === "service") {
                layerUserServiceDetails = this._getUserServiceDetails();
                layerUserServiceDetails.service = data.data;
                this.succession.components.push(layerUserServiceDetails);
            }
        }
    },

    handleFileRemoved: {
        value: function (event) {
            var file = event.detail,
                layerImportList = this._getLayerImportList(),
                layers = layerImportList.layers,
                len = layers.length,
                index = -1, i;

            for (i = 0; i < len; i++) {
                if (layers[i].layer === file.layer) {
                    index = i;
                    break;
                }
            }

            if (index > -1) {
                layers.splice(index, 1);
            }

            this._back();
        }
    },

    handleImportMenuMenuAction: {
        value: function (event) {
            var eventData = event.detail.item;
            switch (eventData.value) {
                case "file":
                    this.succession.components.push(this._getLayerImportFileInspector());
                    break;
                case "ags":
                    this.succession.components.push(this._getUserAgsServiceInspector());
                    break;
                case "wms":
                    this.succession.components.push(this._getUserWmsServiceInspector());
                    break;
                case "folder":
                    this.succession.components.push(this._getUserFolderInspector());
                    break;
                case "back":
                    this._back();
                    break;
            }
        }
    },

    handleFileLoadedAction: {
        value: function handleFileLoadedAction(event) {
            var layerImportList = this._getLayerImportList(),
                file = event.detail.file,
                layer = ImportLayersService.addLayer(file);

            layerImportList.layers.push({
                title: file.name,
                type: file.ext,
                layer: layer
            });

            this._back();
        }
    },

    handleSettingsAction: {
        value: function (event) {
            event.stopPropagation();

            if (!this.panes.layerListSettings) {
                this.panes.layerListSettings = new LayerListSettings();
            }

            this.succession.components.push(this.panes.layerListSettings);
        }
    },

    handleBackAction: {
        value: function (event) {
            event.stopPropagation();
            this._back();
        }
    }
});
