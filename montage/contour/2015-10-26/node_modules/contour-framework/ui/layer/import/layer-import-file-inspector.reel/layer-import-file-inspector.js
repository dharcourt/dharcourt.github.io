/**
 * @module ui/layer/layer-import-file-inspector.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    Request = require("montage/core/request");

/**
 * @class LayerImportFileInspector
 * @extends Component
 */
exports.LayerImportFileInspector = Component.specialize(/** @lends LayerImportFileInspector# */ {
    fileUrl: {
        value: ""
    },
    fileInspector: {
        value: null
    },
    downloadableFile: {
        value: null
    },
    errorMessage: {
        value: ""
    },
    constructor: {
        value: function LayerImportFileInspector() {

        }
    },
    _getFileExt: {
        /**
         * Return file extension
         *
         * @param {string} name File name
         * @returns {string | null}
         * @private
         */
        value: function getFileExtension(name) {
            var arr;

            if (typeof name !== "string") {
                return null;
            }

            arr = name.split(".");

            if (arr.length < 1) {
                return null;
            }

            return arr.pop();
        }
    },
    _getFileName: {
        value: function getFileName(url) {
            return url.split("/").pop();
        }
    },
    exitDocument: {
        value: function () {
            this.fileUrl.value = "";
            this.downloadableFile = null;
        }
    },
    handleCancelButtonAction: {
        value: function () {
            this.downloadableFile.isLoadingCancaled = true;
            this.downloadableFile = null;
        }
    },
    handleStartLoadingFileAction: {
        value: function (event) {
            this.downloadableFile = event.detail;
        }
    },
    handleFileLoadedAction: {
        value: function () {
            this.downloadableFile = null;
        }
    },
    handleImportButtonAction: {
        value: function handleImportButtonAction() {
            var self = this,
                fileUrl = this.fileUrl,
                fileInspector = this.fileInspector,
                fileName;

            if (!fileUrl.hasError && fileUrl.value) {
                fileName = this._getFileName(fileUrl.value);

                this.downloadableFile = {
                    name: fileName,
                    url: fileUrl
                };

                try {
                    Request.request(fileUrl.value).then(function (resp) {
                        if (self.downloadableFile && self.downloadableFile.url === fileUrl) {
                            self.dispatchEventNamed("fileLoadedAction", true, true, {
                                file: {
                                    content: resp.xhr.responseText,
                                    name: fileName,
                                    ext: self._getFileExt(fileName)
                                }
                            });
                        }
                        self.downloadableFile = null;
                    }, function (e) {
                        self.downloadableFile = null;
                        self.errorMessage = e;
                    });
                } catch (e) {
                    this.downloadableFile = null;
                    this.errorMessage = e;
                }
            } else if (fileInspector.files && fileInspector.files.length > 0) {
                try {
                    fileInspector.readFiles();
                } catch (e) {
                    this.errorMessage = e;
                }
            }
        }
    }
});
