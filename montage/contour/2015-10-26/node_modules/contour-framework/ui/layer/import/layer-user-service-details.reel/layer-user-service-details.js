/**
 * @module ui/layer/layer-import.reel/layer-import-file-details.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    AgsLoader = require("logic/layer/ags-loader").AgsLoader,
    WmsLoader = require("logic/layer/wms-loader").WmsLoader,
    UserLayersService = require("logic/mock-service/user-layers-service").UserLayersService;

/**
 * @class LayerUserServiceDetails
 * @extends Component
 */
exports.LayerUserServiceDetails = Component.specialize(/** @lends LayerUserServiceDetails# */ {
    _service: {
        value: null
    },

    _layers: {
        value: null
    },

    service: {
        set: function (service) {
            var self = this,
                loader;

            if (!service) {
                this.layers = [];
                return;
            }

            this._service = service;

            loader = service.protocol === "WMS" ? WmsLoader : AgsLoader;

            loader.load(service.url)
                .then(function (data) {
                    console.log(data);
                    self.layers = data.service.layers.map(function (layer) {
                        layer.serviceId = self.service.id;
                        return layer;
                    });
                });
        },
        get: function () {
            return this._service;
        }
    },

    layers: {
        set: function (layers) {
            var map = {},
                existLayers = UserLayersService.getLayersByService(this.service.id),
                len = existLayers.length,
                layer, i;

            for (i = 0; i < len; i++) {
                map[existLayers[i].name] = existLayers[i];
            }

            len = layers.length;

            for (i = 0; i < len; i++) {
                layer = map[layers[i].name];
                if (layer) {
                    layers[i] = layer;
                    layer.enabled = true;
                }
            }

            this._layers = layers;
        },
        get: function () {
            return this._layers;
        }
    },

    constructor: {
        value: function LayerUserServiceDetails() {

        }
    },

    exitDocument: {
        value: function () {
            this.service = null;
        }
    },

    handleServiceMenuMenuAction: {
        value: function (event) {
            var eventData = event.detail.item;
            switch (eventData.value) {
                case "remove":
                    UserLayersService.removeService(this.service.id);
                    this.dispatchEventNamed("backAction", true, true);
                    break;
            }
        }
    }
});
