var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class LayerTree
 * @extends external:Component
 */
var LayerTree = exports.LayerTree = Component.specialize(/** @lends LayerTree.prototype */{
    // Set by owner.
    root: {
        value: undefined
    },

    identifier: {
        value: "layerTree"
    },

    // Set by owner.
    succession: {
        value: undefined
    },

    // Set in serialization.
    _treeList: {
        value: undefined
    },

    _isTreeMode: {
        value: null
    },

    /**
     * Bound to LayerBrowser's isPortrait flag
     */
    isTreeMode: {
        get: function () {
            return this._isTreeMode;
        },
        set: function (value) {
            if (this._isTreeMode !== value) {
                this._isTreeMode = value;

                if (!this._isTreeMode && this._treeController) {
                    // Reset LayerTree to default state with only root expanded to 2nd level nodes
                    this._treeController.collapseAll();
                    this._treeController.expandNode(this.root);
                }
            }
        }
    },

    templateDidLoad: {
        value: function () {
            this.root = this.root || this.application.delegate.layers.tree;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            this.addEventListener("action", this, false); // for expandButton & drillDownButton

            if (!this._pressComposer) {
                this._pressComposer = new PressComposer();
                this.addComposerForElement(this._pressComposer, this._treeList.element);
            }
            this._pressComposer.addEventListener("press", this);
        }
    },

    handlePress: {
        value: function (event) {
            event.stopPropagation();
            if (event.targetElement.component && event.targetElement.component.checkbox) {
                event.targetElement.component.checkbox.checked = !event.targetElement.component.checkbox.checked;
            }
        }
    },

    handleExpandButtonAction: {
        value: function (event) {
            event.stopPropagation();
            if (this.isTreeMode) {
                event.target.ownerComponent.node.isExpanded = !event.target.ownerComponent.node.isExpanded;
            }
        }
    },

    handleDrillDownButtonAction: {
        value: function (event) {
            event.stopPropagation();
            var node = event.target.ownerComponent.node.data;

            if (node.children) { // folder; used in portrait mode
                var pane = new LayerTree();
                pane.succession = this.succession;
                pane.root = node;
                pane.isTreeMode = this.isTreeMode;
                this.succession.components.push(pane);

            } else { // layer; used in both portrait and landscape modes
                this.application.delegate.inspectLayer(node);
            }
        }
    }
});
