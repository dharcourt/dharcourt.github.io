var Component = require("montage/ui/component").Component,
    DataService = require("montage-data/logic/service/data-service").DataService,
    LayerTree = require("ui/layer/layer-tree.reel").LayerTree,
    Promise = require("bluebird");

/**
 * @class LayerBrowser
 * @extends external:Component
 */
exports.LayerBrowser = Component.specialize(/** @lends LayerBrowser.prototype */{

    // Set in serialization.
    succession: {
        value: undefined
    },

    identifier: {
        value: "layerBrowser"
    },

    _isPortrait: {
        value: null
    },

    isPortrait: {
        get: function () {
            return this._isPortrait;
        },
        set: function (value) {
            if (this._isPortrait !== value) {
                this._isPortrait = value;

                // When switching from portrait to landscape mode, LayerTree may already be
                // drilled down several levels, but we only need 1 level for LayerTree in tree mode.
                if (!this._isPortrait &&
                    this.succession.components.has(this._treePane) &&
                    this.succession.components.length > 1) {
                    this.succession.components.splice(1, this.succession.components.length - 1);
                }
            }
        }
    },

    // Set in serialization.
    _treePane: {
        get: function () {
            return this.__treePane;
        },
        set: function (pane) {
            this.__treePane = pane;
            this.__treePane.items = this.application.delegate.layers.tree.children;
        }
    },

    // Returns a promise.
    _listPane: {
        get: function () {
            var self = this;
            return require.async("ui/layer/layer-list.reel").then(function (exports) {
                var pane = new exports.LayerList();
                pane.succession = self.succession;
                pane.layers = self.application.delegate.layers.list;
                pane.hasSettings = true;
                return pane;
            });
        }
    },

    // Returns a promise.
    _backgroundsPane: {
        get: function () {
            var self = this;
            return require.async("ui/layer/layer-background-list.reel").then(function (exports) {
                var pane = new exports.LayerBackgroundList();
                pane.layers = self.application.delegate.layers.background;
                pane.hasSettings = false;
                return pane;
            });
        }
    },

    // Returns a promise.
    _importsPane: {
        get: function () {
            return require.async("ui/layer/import/layer-import.reel").then(function (exports) {
                return new exports.LayerImport();
            });
        }
    },

    enterDocument: {
        value: function () {
            // MediaQueryList must match panel.css' portrait section
            this.isPortrait = window.matchMedia(
                "(max-width: 1199px) and (max-aspect-ratio: 999999/1000000), (max-width: 299px)"
            ).matches;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            // Although back buttons and layer selection will be provided by
            // pane components, their action will be handled here to reduce code
            // duplication.
            this.addEventListener("backAction", this);
        }
    },

    handleBackAction: {
        value: function (event) {
            event.stopPropagation();
            this.succession.components.pop();
        }
    },

    handleLayerAction: {
        value: function (event) {
            event.stopPropagation();

            var node = event.detail.node,
                pane;

            if (node) {
                if (node.children) {
                    pane = new LayerTree();
                    pane.succession = this.succession;
                    pane.root = node;
                    this.succession.components.push(pane);
                } else {
                    this.inspectLayer(node);
                }
            }
        }
    },

    _layerInspector: {
        value: null
    },

    _layerInspectorPromise: {
        value: null
    },

    inspectLayer: {
        value: function (reference) {
            if (this.panelSuccession.content === this._layerInspector) {
                return false;
            }
            var promises = [],
                self = this;
            reference.layers.forEach(function (layer) {
                promises.push(DataService.mainService.getObjectData(layer, "type"));
            });
            if (this._layerInspector) {
                Promise.all(promises).then(function () {
                    self._layerInspector.layerReference = reference;
                    self.panelSuccession.components.push(self._layerInspector);
                });
            } else {
                this._layerInspectorPromise = require.async("ui/layer/layer-inspector.reel");
                this._layerInspectorPromise.then(function (exports) {
                    self._layerInspector = new exports.LayerInspector();
                    return Promise.all(promises);
                }).then(function () {
                    self._layerInspector.layerReference = reference;
                    self.panelSuccession.components.push(self._layerInspector);
                });
            }
        }
    }

});