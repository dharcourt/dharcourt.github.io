/**
 * @module ui/figure-style-settings.reel
 */
var Component = require("montage/ui/component").Component,
    Enum = require("montage/core/enum").Enum;
    var StyleGroup = exports.StyleGroup = new Enum().initWithMembers(
        "Border", "Fill",  "Label", "Stroke", "Text"
    );

/**
 * @class FigureStyleSettings
 * @extends Component
 */
exports.FigureStyleSettings = Component.specialize(/** @lends FigureStyleSettings# */ {

    _addBindingsForStyleGroup: {
        value: function(key) {
            if (this._styleBindings.length > 0) {
                this._clearStyleBindings();
            }
            if (this.figure) {
                switch(key) {
                    case StyleGroup["Border"]:
                        this._bindToStrokeProperties();
                        this.title = "Border Settings";
                        break;
                    case StyleGroup["Fill"]:
                        this._bindToFillProperties();
                        this.title = "Fill Settings";
                        break;
                    case StyleGroup["Label"]:
                        this._bindToLabelProperties();
                        this.title = "Label Settings";
                        break;
                    case StyleGroup["Stroke"]:
                        this._bindToStrokeProperties();
                        this.title = "Stroke Settings";
                        break;
                    case StyleGroup["Text"]:
                        this._bindToTextProperties();
                        this.title = "Text Settings";
                        break;
                }
                this.needsDraw = true;
            }
        }
    },
    _bindToFillProperties: {
        value: function () {
            this._hasWidth = false;
            this._hasText = false;
            this._hasUnits = false;
            this._hasColor = true;
            this._isFill = true;
            this._hasMeasurementTypes = false;
            this.defineBindings({
                "color":{"<->":"figure.fillColor"},
                "opacity":{"<->":"figure.fillOpacity"}
            });
            Array.prototype.push.apply(this._styleBindings,["color","opacity"]);
        }
    },
    _bindToLabelProperties: {
        value: function () {
            this._hasWidth = true;
            this._hasText = true;
            this._hasUnits = true;
            this._hasColor = true;
            this._isFill = false;
            this._hasMeasurementTypes = true;
            this.defineBindings({
                "color":{"<->":"figure.labelStrokeColor"},
                "width":{"<->":"figure.labelStrokeWidth"},
                "opacity":{"<->":"figure.labelStrokeOpacity"},
                "fontSize":{"<->":"figure.fontSize"},
                "fontColor":{"<->":"figure.fontColor"},
                "units":{"<->":"figure.units"},
                "labelType":{"<->":"figure.labelType"},
                "hasLabel": {"<->":"figure.hasLabel"}
            });
            Array.prototype.push.apply(this._styleBindings, ["color","fontColor","fontSize","hasLabel","labelType","opacity","units","width"]);
        }
    },
    _bindToStrokeProperties: {
        value: function () {
            this._hasWidth = true;
            this._hasText = false;
            this._hasUnits = false;
            this._hasColor = true;
            this._isFill = false;
            this._hasMeasurementTypes = false;
            this.defineBindings({
                "color":{"<->":"figure.strokeColor"},
                "width":{"<->":"figure.strokeWidth"},
                "opacity":{"<->":"figure.strokeOpacity"}
            });
            Array.prototype.push.apply(this._styleBindings,["color","opacity","width"]);
        }
    },
    _bindToTextProperties: {
        value: function () {
            this._hasWidth = false;
            this._hasText = true;
            this._hasUnits = false;
            this._hasColor = false;
            this._isFill = false;
            this._hasMeasurementTypes = false;
            this.defineBindings({
                "fontSize":{"<->":"figure.fontSize"},
                "fontColor":{"<->":"figure.fontColor"}
            });
            Array.prototype.push.apply(this._styleBindings,["fontSize","fontColor"]);
        }
    },
    _clearStyleBindings: {
        value: function () {
            var binding;
            while (this._styleBindings.length > 0) {
                binding = this._styleBindings.pop();
                try {
                    this.cancelBinding(binding);
                } catch (e) {}
            }
        }
    },
    _color: {
        value: "#FFFFFF"
    },
    color: {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
            this.needsDraw = true;
        }
    },
    draw: {
      value: function () {
          this._colorButton.element.style.color = this._color;
          if (this._hasText) {
              this._fontColorButton.element.style.color = this._fontColor;
          }
      }
    },
    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },
    exitDocument: {
      value: function () {
          this._preparedForAction = false;
          this._colorButton.removeEventListener("action",this);
          this._fontColorButton.removeEventListener("action",this);
      }
    },
    _figure: {
        value: null
    },
    figure: {
        get: function () {
            return this._figure;
        },
        set: function(value) {
            if (this._figure !== value) {
                this._figure = value;
                this.labelTypes = this._figure.labelTypes;
                this.activeStyleGroup = null;
            }
        }
    },
    _fontColor: {
        value: "#000000"
    },
    fontColor: {
        get: function () {
            return this._fontColor;
        },
        set: function(value) {
            if (value && this._hasText) {
                this._fontColor = value;
                this.needsDraw = true;
            }
        }
    },
    _fontSize: {
        value: 14
    },
    fontSize: {
        get: function () {
            return this._fontSize;
        },
        set: function (value) {
            this._fontSize = value;
            this.needsDraw = true;
        }
    },
    handleColorAction: {
        value: function (e) {
            e.stopPropagation();
            var self = this;
            this._openColorSelector().then(function (selectorPane) {
                selectorPane.getBinding("selection") && selectorPane.cancelBinding("selection");
                selectorPane.defineBinding("selection", {"<->": "color", source: self});
            });
        }
    },
    handleFontColorAction: {
        value: function (e) {
            e.stopPropagation();
            var self = this;
            this._openColorSelector().then(function (selectorPane) {
                selectorPane.getBinding("selection") && selectorPane.cancelBinding("selection");
                selectorPane.defineBinding("selection", {"<->": "fontColor", source: self});
            });
        }
    },

    handleExitColorSelectorAction: {
        value: function (e) {
            e.stopPropagation();
            this.succession.components.pop();
        }
    },

    _hasColor: {
        value: false
    },
    _hasLabel: {
        value: false
    },
    hasLabel: {
        get: function () {
            return this._hasLabel;
        },
        set: function (value) {
            if (this.activeStyleGroup === StyleGroup["Label"]) {
                this._hasText = value;
                this._hasWidth = value;
                this._hasUnits = value;
                this._hasColor = value;
                this._isFill = value;
                this._hasLabel = value;
                this._hasMeasurementTypes = value && this._figure.labelTypes.length > 1;
                this.needsDraw = true;
            }
        }
    },
    _hasText: {
        value: false
    },
    _hasUnits: {
        value: false
    },
    _hasMeasurementTypes: {
        value: false
    },
    _hasWidth: {
        value: false
    },
    _isFill: {
        value: false
    },

    _labelTypes: {
        value: []
    },
    labelTypes: {
        get: function () {
            return this._labelTypes;
        },
        set: function(value) {
            if (value && Array.isArray(value)) {

                if (this.templateObjects && this.templateObjects.measurementType) {
                    //Temporary workaround: When provided a new array of options, the select-bar
                    //concatenates the new to the existing ones rather than replacing the existing.
                    this.templateObjects.measurementType.templateObjects.repetition.contentController.clear();
                }
                this._labelTypes = value;
            }
        }
    },
    _opacity: {
        value: 1
    },
    opacity: {
        set: function (value) {
            if (this._opacity != value) {
                this._opacity = value;
                this.needsDraw = true;
            }
        },
        get: function () {
            return this._opacity;
        }
    },
    _preparedForAction: {
      value: false
    },
    prepareForActivationEvents: {
      value: function() {
          if (!this._preparedForAction) {
              this._preparedForAction = true;
              this._colorButton.addEventListener("action",this,false);
              this._fontColorButton.addEventListener("action",this,false);
          }
      }
    },
    _activeStyleGroup: {
        value: null
    },
    activeStyleGroup: {
        set: function (value) {
            if (this._activeStyleGroup !== value) {
                if (typeof value === "number") {
                    this.succession.content == this._colorSelectorPane && (this.succession.content = this);
                }
                this._activeStyleGroup = value;
                this._addBindingsForStyleGroup(this._activeStyleGroup);
            }
        },
        get: function () {
            return this._activeStyleGroup;
        }
    },
    _styleBindings: {
        value: []
    },
    title: {
        value: ""
    },
    _units: {
        value:""
    },
    units: {
        set: function (value) {
            if (this._units != value) {
                this._units= value;
                this.needsDraw = true;
            }
        },
        get: function () {
            return this._units;
        }
    },
    _width: {
        value: 5
    },
    width: {
        set: function (value) {
            if (this._width != value) {
                this._width = value;
                this.needsDraw = true;
            }
        },
        get: function () {
            return this._width;
        }
    },

    _colorSelectorPane: { value: null },

    _colorSelectorPromise: { value: null },

    _openColorSelector: {
        value: function () {
            var self = this;
            if (!this._colorSelectorPromise) {
                this._colorSelectorPromise = require.async("ui/drawing/figure-color-selector.reel")
                    .then(function (exports) {
                        self._colorSelectorPane = new exports.FigureColorSelector();
                        self._colorSelectorPane.addEventListener("exitColorSelectorAction", self);
                        self.succession.components.push(self._colorSelectorPane);
                        return self._colorSelectorPane;
                    });

                // not currently open
            } else if (this.succession.content !== this._colorSelectorPane) {
                //this.figureInspector.figure = figure;
                this.succession.components.push(this._colorSelectorPane);
            }

            return this._colorSelectorPromise;
        }
    }


});
