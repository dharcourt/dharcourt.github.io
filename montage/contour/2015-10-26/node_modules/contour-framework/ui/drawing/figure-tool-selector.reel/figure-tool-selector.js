/**
 * @module ui/figure-tool-selector.reel
 */
var Component = require("montage/ui/component").Component,
    Mode = require("ui/map/map.reel/map").Mode,
    Figure = require("logic/model/figure").Figure,
    FigureType = require("logic/model/figure").FigureType;

/**
 * @class FigureToolSelector
 * @extends Component
 */
exports.FigureToolSelector = Component.specialize(/** @lends FigureToolSelector.prototype */{
    clearSelection: {
        value: function (resetMapMode) {
            if (this._selectedTool) {
                this.templateObjects.selectionEditor._optionsController.deselect(this._selectedTool);
                if (resetMapMode) {
                    this.application.map.currentMode = Mode["Pan"];
                }
            }
        }
    },
    didDraw: {
        value: function () {
            this._imageFileInput = this.element.querySelector(".Icon-figure-image input");
            this._imageTool = this._imageFileInput.parentElement.component.data;
        }
    },
    exitDocument: {
        value: function () {
            this._error = null;
        }
    },
    _fileInputOpen: {
        value: false
    },
    handleChange: {
        value: function (event) {
            event.stopPropagation();
            var dataUrl, file = this.__imageFileInput.files[0], figure, reader, self = this;
            if (file && Figure.isSupportedImageMimeType(file.type)) {
                this.selectionEditor._optionsController.select(this._imageTool);
                reader = new FileReader();
                reader.onloadend = function () {
                    dataUrl = reader.result;
                    figure = Figure.initializeFigureWithType(FigureType["Image"], [0, 0], {
                        dataURL: dataUrl
                    });
                    self.application.map._oldMode = Mode["ImageTool"];
                    self.application.map.figures.add(figure);
                    self._imageFileInput.value = "";
                };
                reader.readAsDataURL(file);
            } else if (file) {
                this._error = new Error("Unsupported mimetype");
                this.needsDraw = true;
                this._imageFileInput.value = "";
                this.errorBar.addEventListener("closeAction", this, false);
            }
        }
    },
    handleCloseAction: {
        value: function (e) {
            e.stopPropagation();
            this._error = null;
            this.needsDraw = true;
        }
    },
    handleFocus: {
        value: function () {
            if (this._fileInputOpen) {
                this._fileInputOpen = false;
            } else {
                this.__imageFileInput.removeEventListener("focus", this, false);
                this.clearSelection();
                this._imageFileInput.value = "";
            }
        }
    },
    handleMousedown: {
        value: function () {
            this._fileInputOpen = true;
            this.selectionEditor._optionsController.select(this._imageTool);
            this.__imageFileInput.addEventListener("focus", this, false);
        }
    },
    _error: {
        value: null
    },
    __imageFileInput: {
        value: null
    },
    _imageFileInput: {
        set: function (value) {
            if (value) {
                this.__imageFileInput = value;
                this.__imageFileInput.addEventListener("change", this, false);
                this.__imageFileInput.addEventListener("mousedown", this, false);
            }
        },
        get: function () {
            return this.__imageFileInput;
        }
    },
    _imageTool: {
        value: null
    },
    options: {
        value: [
            {
                icon: "Icon-figure-annotate",
                id: "annotate",
                name: "Annotate",
                mode: Mode.AnnotationTool
            },
            {
                icon: "Icon-figure-circle",
                id: "circle",
                name: "Circle",
                mode: Mode.Circle
            },
            {
                icon: "Icon-figure-freeLine",
                id: "freeLine",
                name: "Free Line",
                mode: Mode.FreeLineTool
            },
            {
                icon: "Icon-figure-freePolygon",
                id: "freePolygon",
                name: "Free Polygon",
                mode: Mode.FreePolygonTool
            },

            {
                icon: "Icon-figure-icon",
                id: "icon",
                name: "Icon",
                mode: Mode.PlacemarkTool
            },
            {
                icon: "Icon-figure-image",
                id: "image",
                name: "Image",
                mode: Mode.ImageTool
            },
            {
                icon: "Icon-figure-line",
                id: "line",
                name: "Line",
                mode: Mode.LineTool
            },
            {
                icon: "Icon-figure-polygon",
                id: "polygon",
                name: "Polygon",
                mode: Mode.PolygonTool
            },
            {
                icon: "Icon-figure-rectangle",
                id: "rectangle",
                name: "Rectangle",
                mode: Mode.Rectangle
            }
        ]
    },
    _previousTool: {
        value: null
    },
    _selectedTool: {
        value: null
    },
    selectedTool: {
        set: function (value) {
            this._error = null;
            this._previousTool = this._selectedTool;
            if (value !== this.selectedTool) {
                this._selectedTool = value;
                if (this._selectedTool) {
                    this.application.map.currentMode = this._selectedTool.mode;
                } else {
                    this.application.map.currentMode = Mode["Pan"];
                }
            }
        },
        get: function () {
            return this._selectedTool;
        }
    },
    currentMapMode: {
        set: function (value) {
            if (this._selectedTool && (value === Mode["Pan"] || value === Mode["Zoom"])) {
                this.clearSelection();
            } else if (value && (!this._selectedTool || value !== this._selectedTool.mode)) {
                var newSelection, i, length = this.options.length;
                for (i = 0; i < length; i++) {
                    newSelection = (this.options[i].mode === value) ? this.options[i] : null;
                    if (newSelection) break;
                }
                if (newSelection) {
                    this._selectedTool = newSelection;
                    this.templateObjects.selectionEditor._optionsController.select(newSelection);
                } else {
                    this.clearSelection();
                }
            }
        }
    }
});
