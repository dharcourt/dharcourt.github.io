/**
 * @module ui/figure-inspector.reel
 */
var Component = require("montage/ui/component").Component,
    StyleGroup = require("ui/drawing/figure-style-settings.reel").StyleGroup,
    RangeController = require("montage/core/range-controller").RangeController,
    FigureType = require("logic/model/figure").FigureType,
    Set = require("collections/set");



/**
 * @class FigureInspector
 * @extends Component
 */
exports.FigureInspector = Component.specialize(/** @lends FigureInspector.prototype */{

    _colorOptions: {
        value: null
    },

    _figure: { value: null },

    _imageSettingsPane: {
        get: function () {
            var self = this;
            return require.async("ui/drawing/figure-image-settings.reel").then(function (exports) {
                var pane = new exports.FigureImageSettings();
                pane.addEventListener("resetAspectRatioAction", self, false);
                pane.ownerComponent = self;
                pane.defineBindings({
                    "opacity": {"<->":"ownerComponent.figure.imageOpacity"},
                    "preserveAspectRatio": {"<->":"ownerComponent.figure.preserveAspectRatio"},
                    "hasResetAspectRatio": {"<-": "ownerComponent.figure.aspectRatio != ownerComponent.figure.originalAspectRatio"}
                });
                return pane;
            });
        }
    },

    __infoPane: { value: null },

    _infoPane: {
        get: function () {
            return this.__infoPane;
        },
        set: function (value) {
            this.__infoPane = value;
        }
    },

    _isFigureBoundToColorSelector: { value: false },

    _isFigureBoundToImageSettings: { value: false },

    _isVisible: { value: false },

    _panes: {
        value: {
            image: null,
            placemark: null,
            placemarkStyle: null,
            style: null
        }
    },

    _placemarkSelectorPane: {
        get: function () {
            var self = this;
            return require.async("ui/drawing/figure-placemark-selector.reel").then(function (exports) {
                var pane = new exports.FigurePlacemarkSelector();
                self._panes.placemark = pane;
                pane.figure = self.figure;
                return pane;
            });
        }
    },

    _placemarkStyleSettingsPane: {
        get: function () {
            var self = this;
            return require.async("ui/drawing/figure-color-selector.reel").then(function (exports) {
                var pane = new exports.FigureColorSelector();
                self._panes.placemarkStyle = pane;
                pane.colors = ["#FF0000", "#FFFF00", "#00FF00", "#0000FF"];
                pane.hasDone = false;
                pane.defineBinding("selection", {"<->": "figure.fontColor", "source": self});
                return pane;
            });
        }
    },

    //_activeTab: {
    //    set: function (value) {
    //        if (this.succession.components && this.succession.components.length > 1) {
    //            debugger;
    //        }
    //
    //    }
    //},

    _styleSettingsPane: {
        get: function () {
            var self = this;
            return require.async("ui/drawing/figure-style-settings.reel").then(function (exports) {
                var pane = new exports.FigureStyleSettings();
                self._panes.style = pane;
                pane.succession = self.succession;
                pane.defineBinding("figure", {"<-": "figure", "source": self});
                pane.defineBinding("activeStyleGroup", {"<-": "selectedTab.styleGroup", "source": self.tabBar});
                pane.addEventListener("enterColorSelectorAction", self, false);
                return pane;
            });
        }
    },

    figure: {
        get: function() {
            return this._figure;
        },
        set: function(value) {
            if (value) {
                var needsToRecalculateTabs = !this._figure || this._figure.type !== value.type ||
                    this._figure.properties.isFreeHand !== value.properties.isFreeHand;
                this._figure = value;
                needsToRecalculateTabs && this.dispatchOwnPropertyChange("_tabs", this._tabs);
                this.tabBar.selectedTab = this._tabs[0];

            }
        }
    },

    handleResetAspectRatioAction: {
        value: function(event) {
            event.stopPropagation();
            this.figure.aspectRatio = this.figure.originalAspectRatio;
            this.figure.preserveAspectRatio = true;
            this.figure.needsDraw = true;
        }
    },



    isVisible: {
        get: function() {
            return this._isVisible;
        },
        set: function(value) {
            this._isVisible = value;
            if (!this._isVisible && this._isFigureBoundToImageSettings) {
                this._panes.image.cancelBinding("opacity");
                this._panes.image.cancelBinding("preserveAspectRatio");
                this._panes.image.cancelBinding("hasResetAspectRatio");
                this._isFigureBoundToImageSettings = false;

            }
        }
    },

    _excludeLabelForFreeHand: {
        value: function (tab, figure) {
            var ret = (tab.styleGroup != 2 || !figure.properties.isFreeHand);
            return ret;
        }
    },

    __tabs: { value: null },

    _tabs: {
        get: function () {
            if (!this.__tabs) {
                this.__tabs = [
                    {
                        label: "Info",
                        figureTypes: new Set([FigureType["Annotation"], FigureType["Circle"], FigureType["Image"], FigureType["Placemark"], FigureType["Polygon"], FigureType["Polyline"], FigureType["Rectangle"]]),
                        paneReference: {object: this, propertyName: "_infoPane"},
                        iconClass: "contour-FigureInspector-icon-info"
                    },
                    {
                        label: "Border",
                        figureTypes: new Set([FigureType["Annotation"], FigureType["Circle"], FigureType["Image"], FigureType["Polygon"], FigureType["Rectangle"]]),
                        paneReference: {object: this, propertyName: "_styleSettingsPane"},
                        iconClass: "contour-FigureInspector-icon-border",
                        styleGroup: StyleGroup["Border"]
                    },
                    {
                        label: "Stroke",
                        figureTypes: new Set([FigureType["Polyline"]]),
                        paneReference: {object: this, propertyName: "_styleSettingsPane"},
                        iconClass: "contour-FigureInspector-icon-border",
                        styleGroup: StyleGroup["Stroke"]
                    },
                    {
                        label: "Fill",
                        figureTypes: new Set([FigureType["Annotation"], FigureType["Circle"], FigureType["Polygon"], FigureType["Rectangle"]]),
                        paneReference: {object: this, propertyName: "_styleSettingsPane"},
                        iconClass: "contour-FigureInspector-icon-fill",
                        styleGroup: StyleGroup["Fill"]
                    },
                    {
                        label: "Label",
                        figureTypes: new Set([FigureType["Circle"], FigureType["Polygon"], FigureType["Polyline"]]),
                        paneReference: {object: this, propertyName: "_styleSettingsPane"},
                        iconClass: "contour-FigureInspector-icon-label",
                        styleGroup: StyleGroup["Label"]
                    },
                    {
                        label: "Text",
                        figureTypes: new Set([FigureType["Annotation"]]),
                        paneReference: {object: this, propertyName: "_styleSettingsPane"},
                        iconClass: "contour-FigureInspector-icon-text",
                        styleGroup: StyleGroup["Text"]
                    },
                    {
                        label: "Placemark",
                        figureTypes: new Set([FigureType["Placemark"]]),
                        paneReference: {object: this, propertyName: "_placemarkSelectorPane"},
                        iconClass: "contour-FigureInspector-icon-placemark"
                    },
                    {
                        label: "Style",
                        figureTypes: new Set([FigureType["Placemark"]]),
                        paneReference: {object: this, propertyName: "_placemarkStyleSettingsPane"},
                        iconClass: "contour-FigureInspector-icon-fill"
                    },
                    {
                        label: "Style",
                        figureTypes: new Set([FigureType["Image"]]),
                        paneReference: {object: this, propertyName: "_imageSettingsPane"},
                        iconClass: "contour-FigureInspector-icon-image"
                    }
                ]
            }
            return this.__tabs;
        }
    }


});
