/**
 * @module ui/figure-color-selector.reel
 */
var Component = require("montage/ui/component").Component,
    RangeController = require("montage/core/range-controller").RangeController;

/**
 * @class FigureColorSelector
 * @extends Component
 */
exports.FigureColorSelector = Component.specialize(/** @lends FigureColorSelector# */ {
    constructor: {
        value: function FigureColorSelector() {

            this._colorController = new RangeController();
            this._colorController.addEach(this.colors);
        }
    },
    _baseColors: {
        value: [
            {hex:"#FF0000",r:255,g:0,b:0},
            {hex:"#00FF00",r:0,g:255,b:0},
            {hex:"#0000FF",r:0,g:0,b:255}
        ]
    },
    _baseTenToHexadecimal: {
        value: function (integer) {
            var hex = integer.toString(16);
            return hex.length == 1 ? "0" + hex : hex;
        }
    },
    _colors: {
        value: null
    },
    colors: {
        set: function(value) {
            if (!value || !Array.isArray(value)) {
                this._colors = this._defaultColors;
            } else if (this._colors !== value){
                this._colors = value;
            }
            this._colorController.clear();
            this._colorController.addEach(this._colors);


        },
        get: function () {
            if (!this._colors) {
                if (!this._defaultColors) {
                    this._defaultColors = this._createColorPalette();
                }
                this._colors = this._defaultColors;
            }
            return this._colors;
        }
    },
    _colorController: {
        value: null
    },
    _createColorPalette: {
        value: function () {
            var colors = [], i, len,indexToMix,primary, secondary, tertiary;
            for (i = 0, len = this._baseColors.length; i < len; i++) {
                primary = this._baseColors[i];
                indexToMix = i+1 < len ? i+1 : 0;
                secondary = this._createSecondaryColorFromBaseColors(primary,this._baseColors[indexToMix]);
                tertiary = this._mixColors(primary,secondary);
                Array.prototype.push.apply(colors,this._createHuesForColor(primary));
                Array.prototype.push.apply(colors,this._createHuesForColor(tertiary));
                Array.prototype.push.apply(colors,this._createHuesForColor(secondary));
            }
            for (i = 0, len = this._grayScaleColors.length; i < len; i++) {
                primary = this._grayScaleColors[i];
                Array.prototype.push.apply(colors,this._createHuesForColor(primary));
            }
            return colors;
        }
    },
    _createHuesForColor: {
        value: function (color) {
            var hues = [color.hex];
            if (color.r === 88 && color.g === 88 && color.b === 88) {
                hues.push(this._createHueForColorWithBrightness(color.hex, -.2));
                hues.push(this._createHueForColorWithBrightness(color.hex,-.6));
                hues.push(this._createHueForColorWithBrightness(color.hex, -1));
            } else {
                hues.push(this._createHueForColorWithBrightness(color.hex, -.2));
                hues.push(this._createHueForColorWithBrightness(color.hex,-.4));
                hues.push(this._createHueForColorWithBrightness(color.hex, -.6));
            }

            return hues;
        }
    },
    _createHueForColorWithBrightness: {
        value: function(hex, deltaBrightness) {
            hex = String(hex).replace(/[^0-9a-f]/gi, '');
            deltaBrightness = deltaBrightness || 0;
            var adjHex = "#", c, i, rgb;
            for (i = 0; i < 3; i++) {
                c = parseInt(hex.substr(i*2,2), 16);
                c = Math.round(Math.min(Math.max(0, c + (c * deltaBrightness)), 255)).toString(16);
                adjHex += ("00"+c).substr(c.length);
            }
            return adjHex;
        }
    },
    _createSecondaryColorFromBaseColors: {
        value: function (base1, base2) {
            return this._mixColors(base1,base2,true);
        }
    },
    _defaultColors: {
        value: null
    },
    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },
    exitDocument: {
        value: function() {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this.templateObjects.title.removeEventListener("backAction",this);
            }
        }
    },
    _grayScaleColors: {
        value: [
            {hex:"#FFFFFF",r:255,g:255,b:255},
            {hex:"#BBBBBB",r:187,g:187,b:187},
            {hex:"#585858",r:88,g:88,b:88}
        ]
    },
    handleBackAction: {
        value: function(event) {
            event.stopPropagation();
            this.dispatchEventNamed("exitColorSelectorAction",true, true, {});
        }
    },
    hasBack: {
        value: true
    },
    hasDone: {
        value: true
    },
    _hexToRgb: {
        value: function (hex) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
    },
    _mixColors: {
        value: function (color1, color2, useSum) {
            var coef1 = useSum ? 1 : .5, coef2 = useSum ? 1 : .5;
            var childColor = {
                r: Math.floor(color1.r*coef1 + color2.r*coef2),
                g: Math.floor(color1.g*coef1 + color2.g*coef2),
                b: Math.floor(color1.b*coef1 + color2.b*coef2)
            };
            childColor.hex = this._rgbToHex(childColor.r,childColor.g,childColor.b);
            return childColor;
        }
    },
    _preparedForAction: {
      value: false
    },
    prepareForActivationEvents: {
        value: function() {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this.templateObjects.title.addEventListener("backAction",this,false);
            }
        }
    },
    _rgbToHex: {
        value: function (r,g,b) {
            return "#" + this._baseTenToHexadecimal(r) + this._baseTenToHexadecimal(g) + this._baseTenToHexadecimal(b);
        }
    },
    _internalSelection: {
        get: function() {
            return this._selection;
        },
        set: function(value) {
            if (value && value !== this._selection) {
                this._selection = value;
                this.dispatchOwnPropertyChange("selection",value);
            }
        }
    },
    _selection: {
        value: null
    },
    selection: {
        set: function(value) {
            if (value && value !== this._selection) {
                this._selection = value;
                this.dispatchOwnPropertyChange("_internalSelection",value);
            }
        },
        get: function() {
            return this._selection;
        }
    }
});
