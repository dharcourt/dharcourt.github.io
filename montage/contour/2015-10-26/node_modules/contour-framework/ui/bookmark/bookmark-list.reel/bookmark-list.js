/**
 * @module ui/bookmark/bookmark-list.reel
 */
var Component = require("montage/ui/component").Component,
    RangeController = require("montage/core/range-controller").RangeController,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class BookmarkList
 * @extends Component
 */
exports.BookmarkList = Component.specialize(/** @lends BookmarkList.prototype */ {
    _bookmarks: {
        value: []
    },
    _bookmarkListRangeController: {
        value: new RangeController()
    },
    bookmarks: {
        set: function (value) {
            if (value && Array.isArray(value) && value !== this._bookmarks) {
                this._bookmarks = value;
            }
        },
        get: function() {
            return this._bookmarks;
        }
    },
    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },
    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this.templateObjects.title.removeEventListener("settingsAction", this);
                this._pressComposer.removeEventListener("press", this);
                this._pressComposer = null;
            }
        }
    },
    handlePress: {
        value: function (event) {
            event.stopPropagation();
            var component = event.targetElement.component;
            if (component && component.bookmark) {
                this.application.delegate.activateBookmark(component.bookmark);
            } else if ((component = event.targetElement.parentElement.component) && component && component.bookmark) {
                this.dispatchEventNamed("selectBookmarkAction", true, true, {bookmark: component.bookmark});
            }
        }
    },
    handleSettingsAction: {
        value: function (e) {
            e.stopPropagation();
            this.dispatchEventNamed("bookmarkListSettingsAction", false, false, {});
        }
    },
    _preparedForAction: {
        value: false
    },
    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this.templateObjects.title.addEventListener("settingsAction", this, false);
                this._pressComposer.addEventListener("press", this, false);
            }
        }
    },
    __pressComposer: {
        value: null
    },
    _pressComposer: {
        get: function () {
            if (!this.__pressComposer) {
                this.__pressComposer = new PressComposer();
                this.addComposer(this.__pressComposer);
            }
            return this.__pressComposer;
        },
        set: function (value) {
            if (value !== this.__pressComposer) {
                if (this.__pressComposer) {
                    this.removeComposer(this.__pressComposer);
                }
                this.__pressComposer = value;
                if (value) {
                    this.addComposer(this.__pressComposer);
                }
            }
        }
    }
});
