/**
 * @module ui/bookmark/bookmark-inspector.reel
 */
var Component = require("montage/ui/component").Component,
    Figure = require("logic/model/figure").Figure,
    FigureType = require("logic/model/figure").FigureType;

/**
 * @class BookmarkInspector
 * @extends Component
 */
exports.BookmarkInspector = Component.specialize(/** @lends BookmarkInspector.prototype */ {
    _bookmark: { value: null },

    _type: {
        value:{
            options: [
                {"label": "Extent", "value": "extent"},
                {"label": "Layers", "value": "layers"}
            ],
            selection: []
        }

    },

    bookmark: {
        get: function() {
            return this._bookmark;
        },
        set: function(value) {
            if (value !== this._bookmark) {
                if (this._bookmark && this._bookmark.isNewObject) {
                    this._editBar.removeEventListener("cancelAction", this, false);
                    this._editBar.removeEventListener("addAction", this, false);
                }
                this._bookmark = value;
                if (this._bookmark && this._bookmark.isNewObject) {
                    this._type.selection = [];
                    this._editBar.addEventListener("cancelAction", this, false);
                    this._editBar.addEventListener("addAction", this, false);
                }
            }
        }
    },

    handleCancelAction: {
        value: function (e) {
            e.stopPropagation();
            //TODO: Use delegate and panel to backtrack
            this.dispatchEventNamed("panelBackAction", true, true, {});

        }
    },

    handleAddAction: {
        value: function (e) {
            e.stopPropagation();
            this.application.delegate.saveBookmark(this.bookmark);
            this.dispatchEventNamed("panelBackAction", true, true, {});
        }
    }

});
