/**
 * @module ui/bookmark/bookmark-browser.reel
 */
var Component = require("montage/ui/component").Component,
    BookmarkSelector = require("logic/mock-service/bookmark-selector").BookmarkSelector;

/**
 * @class BookmarkBrowser
 * @extends Component
 */
exports.BookmarkBrowser = Component.specialize(/** @lends BookmarkBrowser.prototype */ {

    _actionMenu: { value: null },

    _bookmarkList: { value: null },

    _bookmarkListSettings: {value: null},

    _preparedForAction: {value: false},

    _bookmarks: {value: []},

    bookmarks: {
        get: function () {
            return this._bookmarks
        },
        set: function (value) {
            if (Array.isArray(value) && value !== this._bookmarks) {
                this._bookmarks = value;
            }
        }
    },

    enterDocument: {
        value: function(firstTime) {
            var self = this;
            this.application.mockService.query(new BookmarkSelector()).then(function(bookmarks) {
                self.bookmarks = bookmarks;
            });
            if (!firstTime) {
                this.prepareForActivationEvents();
                this.succession.content = this._bookmarkList;
            }
        }
    },

    exitDocument: {
        value: function() {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                if (this.succession.components.length > 1) {
                    this._bookmarkListSettings.removeEventListener("exitBookmarkListSettingsAction", this);
                } else {
                    this._bookmarkList.removeEventListener("bookmarkListSettingsAction", this);
                    this._bookmarkList.removeEventListener("selectBookmarkAction", this);
                }
                this._actionMenu.removeEventListener("menuAction", this, false);
            }
        }
    },

    handleMenuAction: {
        value: function (e) {
            e.stopPropagation();
            this.application.delegate.addBookmark();
        }
    },

    handleBookmarkListSettingsAction: {
        value: function (e) {
            var self = this;

            e.stopPropagation();

            if (!this._bookmarkListSettings) {
                require.async("ui/bookmark/bookmark-list-settings.reel").then(function (exports) {
                    self._bookmarkListSettings = new exports.BookmarkListSettings();
                    self.succession.components.push(self._bookmarkListSettings);
                    self._bookmarkListSettings.addEventListener("exitBookmarkListSettingsAction", self, false);
                });
            } else {
                this.succession.components.push(this._bookmarkListSettings);
                this._bookmarkListSettings.addEventListener("exitBookmarkListSettingsAction", this, false);
            }

            this._bookmarkList.removeEventListener("bookmarkListSettingsAction", this);
            this._bookmarkList.removeEventListener("selectBookmarkAction", this);
            this._bookmarkList.removeEventListener("addBookmarkAction", this);
        }
    },

    handleExitBookmarkListSettingsAction: {
        value: function (e) {
            e.stopPropagation();
            this.succession.components.pop();
            this._bookmarkListSettings.removeEventListener("exitBookmarkListSettingsAction", this);
            this._bookmarkList.addEventListener("bookmarkListSettingsAction", this, false);
            this._bookmarkList.addEventListener("selectBookmarkAction", this, false);
            this._bookmarkList.addEventListener("addBookmarkAction", this, false);
        }
    },

    handleSelectBookmarkAction: {
        value: function(e) {
            e.stopPropagation();
            this.openBookmarkInspector(e.detail.bookmark);
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this._bookmarkList.addEventListener("bookmarkListSettingsAction", this, false);
                this._bookmarkList.addEventListener("selectBookmarkAction", this, false);
                this._actionMenu.addEventListener("menuAction", this, false);
            }
        }
    },

    succession: {value: null},

    _bookmarkInspector: {value: null},

    _bookmarkInspectorPromise: {value: null},

    openBookmarkInspector: {
        value: function (bookmark) {
            var self = this;

            // opening for first time
            if (!this._bookmarkInspectorPromise) {
                this._bookmarkInspectorPromise = require.async("ui/bookmark/bookmark-inspector.reel")
                    .then(function (exports) {
                        self._bookmarkInspector = new exports.BookmarkInspector();
                        self._bookmarkInspector.bookmark = bookmark;
                        self.panelSuccession.components.push(self._bookmarkInspector);

                        return self._bookmarkInspector;
                    });

            // not currently open
            } else if (this.panelSuccession.content !== this._bookmarkInspector) {
                this._bookmarkInspector.bookmark = bookmark;
                this.panelSuccession.components.push(this._bookmarkInspector);
            }

            return this._bookmarkInspectorPromise;
        }
    }
});
