/**
 * @module ui/link/link-browser.reel
 */
var Component = require("montage/ui/component").Component,
    LinkSelector = require("logic/mock-service/link-selector").LinkSelector,
    LinkCategoryList = require("ui/link/link-category-list.reel").LinkCategoryList;

/**
 * @class LinkBrowser
 * @extends Component
 */
exports.LinkBrowser = Component.specialize(/** @lends LinkBrowser.prototype */ {
    constructor: {
        value: function LinkBrowser() {
            var self = this;
            this.application.mockService.query(new LinkSelector()).then(function(categories) {
                self.categories = categories;
            });
        }
    },
    _categories: {
        value: []
    },
    categories: {
        get: function () {
            return this._categories
        },
        set: function (value) {
            if (Array.isArray(value) && value !== this._categories) {
                this._categories = value;
            }
        }
    },
    __linkCategoryList: {
        value: null
    },
    _linkCategoryList: {
        get: function () {
            if (this.__linkCategoryList === null) {
                this.__linkCategoryList = new LinkCategoryList();
                this.__linkCategoryList.ownerComponent = this;
                this.__linkCategoryList.defineBinding("categories", {"<-": "ownerComponent.categories"});
            }
            return this.__linkCategoryList;
        }
    },
    _succession: {
        value: null
    },
    succession: {
        set: function (value) {
            if (value) {
                this._succession = value;
                this._succession.content = this._linkCategoryList;
            }
        },
        get: function () {
            return this._succession;
        }
    },
    handleSelectLinkCategory: {
        value: function(event) {
            event.stopPropagation();
            this.dispatchEventNamed("linkCategoryDrillDownAction", true, true, {category: event.detail});
        }
    },
    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },
    _preparedForAction: {
        value: false
    },
    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this.addEventListener("selectLinkCategory", this, false);
                this._preparedForAction = true;
            }
        }
    },
    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this.removeEventListener("selectLinkCategory", this);
            }
        }
    }

});
