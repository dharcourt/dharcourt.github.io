/**
 * @module ui/camera/camera-image-viewer.reel
 */
var Component = require("montage/ui/component").Component;

/**
 * @class CameraImageViewer
 * @extends Component
 */
exports.CameraImageViewer = Component.specialize(/** @lends CameraImageViewer# */ {
    constructor: {
        value: function CameraImageViewer() {

        }
    },

    _camera: { value: null },

    //TODO Use refresh interval provided in camera service
    _clearTimer: {
        value: function () {
            if (this._imageTimer) {
                clearInterval(this._imageTimer);
                this._imageTimer = null;
            }
            this.application.intervalController.remove(this);
        }
    },

    __image: {
        value: null
    },

    _image: {
        get: function () {
            return this.__image;
        },
        set: function (value) {
            this.__image = value;
            this.__image.onload = this._onImageLoad.bind(this);
        }
    },

    _onImageLoad: {
        value: function () {
            this._clearDimensions = true;
            this.needsDraw = true;
        }
    },

    _lastImageUpdate: {
        value: 0
    },

    _refreshRate: {
        value: 10000
    },

    _startTimer: {
        value: function () {
            this._clearTimer();
            this._refreshRate = this.camera && this.camera.properties.refresh_rate ? this.camera.properties.refresh_rate : 10000;
            this.application.intervalController.set(this, this._refreshRate);
        }
    },

    _imageTimer: { value: null },

    camera: {
        set: function (val) {
            if (val != this._camera) {
                if (this._camera) {
                    this._saveDimensions = true;
                }
                this._camera = val;
                this.needsDraw = true;
                this._lastImageUpdate = 0;
                this._startTimer();
            }
        },
        get: function () {
            return this._camera;
        }
    },

    draw: {
        value: function () {

            var now = new Date().getTime();
            if (this._clearDimensions) {
                this._clearDimensions = false;
                this._image.style.height = this._styleImageHeight;
                this._image.style.width = this._styleImageWidth;
            }
            if ((this._lastImageUpdate + this._refreshRate) < now) {
                if (this._saveDimensions) {
                    this._saveDimensions = false;
                    this._image.style.height = this._imageHeight + "px";
                    this._image.style.width = this._imageWidth + "px";
                }
                this.element.setAttribute("src", "http://servicestest.pdc.org/cams/cam-img?id=" + this.camera.id + "&r=" + now);
                this._lastImageUpdate = now;
            }
        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (this.camera) {
                this._startTimer();
            }
        }
    },

    exitDocument: {
        value: function () {
            this._clearTimer();

        }
    },

    willDraw: {
        value: function () {
            this._imageHeight = this._image.clientHeight;
            this._imageWidth = this._image.clientWidth;
            if (this._saveDimensions) {
                this._styleImageHeight = this._image.style.height || "";
                this._styleImageWidth = this._image.style.width || "";
            }

        }
    }


});
