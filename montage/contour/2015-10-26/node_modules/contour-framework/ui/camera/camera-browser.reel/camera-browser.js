/**
 * @module ui/camera-browser.reel
 */
var Component = require("montage/ui/component").Component,
    Layer = require("logic/mock-model/layer").Layer;

/**
 * @class CameraBrowser
 * @extends Component
 */
exports.CameraBrowser = Component.specialize(/** @lends CameraBrowser.prototype */ {

    _camerasLayer: {
        value: null
    },

    _cameraListComponent: {
        value: null
    },

    _isVisible: {
        value: false
    },

    __listPane: { value: null },

    _listPane: {
        set: function (value) {
            this.__listPane = value;
            this.__listPane.owner = this;
            this.__listPane.addEventListener("cameraListSettingsAction", this, false);
            this.__listPane.addEventListener("cameraListRowClickAction", this, false);
        },
        get: function () {
            return this.__listPane;
        }
    },

    _multiCameraViewerPane: {
        get: function () {
            var self = this;
            return require.async("ui/camera/multi-camera-viewer.reel").then(function(exports) {
                var pane = new exports.MultiCameraViewer();
                pane.owner = self;
                pane.defineBinding("cameras", {"<-": "owner.application.delegate.enabledCameras"});
                return pane;
            });
        }
    },

    camerasLayer: {
        enumerable: false,
        writeable: false,
        get: function () {
            if (this._camerasLayer === null) {
                this._camerasLayer = Layer.initializeCameraLayer("Cameras", "http://servicestest.pdc.org/cams/cam-list", 999);
            }
            return this._camerasLayer;
        }
    },

    draw: {
        value: function () {

            if (this._isClosing) {
                while (this.succession.content.length > 1) {
                    this.succession.pop();
                }
                this._isClosing = false;
            }
        }
    },

    handleCameraInfoBackAction: {
        value: function (e) {
            e.stopPropagation();
            this.succession.components.pop();
        }
    },

    handleCameraListRowClickAction: {
        value: function (e) {
            e.stopPropagation();
            this.inspectCamera(e.detail);
        }
    },

    handleCameraListSettingsAction: {
        value: function (e) {
            e.stopPropagation();
            this._openCameraListSettings();
        }
    },

    handleCameraListSettingsBackAction: {
        value: function (e) {
            e.stopPropagation();
            this.succession.components.pop();
        }
    },

    inspectCamera: {
        value: function (camera) {
            this._openCameraInfo(camera);
        }
    },

    isVisible: {
        set: function (value) {
            if (value !== this._isVisible) {
                this._isVisible = value;
                if (this._isVisible) {
                    this.application.delegate.enableLayer(this.camerasLayer);
                } else {
                    this.application.delegate.disableLayer(this.camerasLayer);
                    this._isClosing = true;
                    this.needsDraw = true;
                }
            }
        },
        get: function () {
            return this._isVisible;
        }
    },

    enterDocument: {
        value: function () {
            this.isVisible = true;
        }
    },

    exitDocument: {
        value: function () {
            this.isVisible = false;
        }
    },

    succession: {
        value: null
    },

    _cameraListSettingsPane: { value: null },

    _cameraListSettingsPromise: { value: null },

    _openCameraListSettings: {
        value: function () {
            var self = this;
            if (!this._cameraListSettingsPromise) {
                this._cameraListSettingsPromise = require.async("ui/camera/camera-list-settings.reel")
                    .then(function (exports) {
                        self._cameraListSettingsPane = new exports.CameraListSettings();
                        self._cameraListSettingsPane.addEventListener("cameraListSettingsBackAction", self, false);
                        self.succession.components.push(self._cameraListSettingsPane);
                        return self._cameraListSettingsPane;
                    });

                // not currently open
            } else if (this.succession.content !== this._cameraListSettingsPane) {
                this.succession.components.push(this._cameraListSettingsPane);
            }

            return this._cameraListSettingsPromise;
        }
    },

    _cameraInfoPane: { value: null },

    _cameraInfoPromise: {value: null},

    _openCameraInfo: {
        value: function (camera) {
            var self = this;
            if (camera) {
                if (this._cameraInfoPane && this.succession.content === this._cameraInfoPane) {
                    this._cameraInfoPane.camera = camera;
                } else if (!this._cameraInfoPromise) {
                    this._cameraInfoPromise = require.async("ui/camera/camera-info.reel")
                        .then(function (exports) {
                            self._cameraInfoPane = new exports.CameraInfo();
                            self._cameraInfoPane.camera = camera;
                            self._cameraInfoPane.owner = self;
                            self._cameraInfoPane.addEventListener("cameraInfoBackAction", self, false);
                            self.succession.components.push(self._cameraInfoPane);
                            return self._cameraInfoPane;
                        });

                    // not currently open
                } else if (this.succession.content !== this._cameraInfoPane) {
                    this._cameraInfoPane.camera = camera;
                    this.succession.components.push(this._cameraInfoPane);
                }
            }

            return this._cameraInfoPromise;
        }
    }

});
