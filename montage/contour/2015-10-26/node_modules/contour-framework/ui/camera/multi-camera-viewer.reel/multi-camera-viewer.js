/**
 * @module ui/camera/multi-camera-viewer.reel
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class MultiCameraViewer
 * @extends Component
 */
exports.MultiCameraViewer = Component.specialize(/** @lends MultiCameraViewer# */ {
    constructor: {
        value: function MultiCameraViewer() {

        }
    },

    _cameras: { value: null },

    _featuredCamera: { value: null },

    _preparedForAction: { value: false },

    _pressComposer: { value: null },

    cameras: {
        get: function () {
            return this._cameras;
        },
        set: function (value) {
            this._cameras = value;
            if (this._cameras && this._cameras.length) {
                this._featuredCamera = this._cameras[0];
            }
        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (this._cameras && this._cameras.length) {
                this._featuredCamera = this._cameras[0];
            }
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
            }
        }
    },

    handlePress: {
        value: function (e) {
            e.stopPropagation();
            var component = e.targetElement.component;
            if (component && component.identifier == "disable") {
                //component.ownerComponent.camera.properties.isEnabled = false;
                this.application.delegate.toggleCameraEnabled(component.ownerComponent.camera);
                if (component.ownerComponent.camera === this._featuredCamera) {
                    if (this._cameras && this._cameras.length)  {
                        this._featuredCamera = this._cameras[0];
                    } else {
                        this._featuredCamera = null;
                    }
                }
            } else if (component && component.identifier == "camera") {
                this._featuredCamera = component.camera;
            }

        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this._pressComposer = new PressComposer();
                this.addComposer(this._pressComposer);
                this._pressComposer.addEventListener("press", this);
            }
        }
    }


});
