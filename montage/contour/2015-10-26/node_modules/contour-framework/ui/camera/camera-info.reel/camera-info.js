/**
 * @module ui/camera/camera-info.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class CameraInfo
 * @extends Component
 */
exports.CameraInfo = Component.specialize(/** @lends CameraInfo# */ {
    constructor: {
        value: function CameraInfo() {

        }
    },

    _pressComposer: {
        value: null
    },

    _camera: {
        value: null
    },

    camera: {
        set: function (val) {
            if (val != this._camera) {
                this._camera = val;
                this.application.delegate.selectedCamera = this._camera;
            }
        },
        get: function () {
            return this._camera;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._pressComposer = new PressComposer();
                this.addComposerForElement(this._pressComposer, this._location.element);
                this._pressComposer.addEventListener("press", this, false);
                this._toggleEnabled.addEventListener("action", this, false);
                this._actionMenu.addEventListener("menuAction", this);
                this._titleBar.addEventListener("backAction", this);
                this._preparedForAction = true;

            }
        }
    },

    handleAction: {
        value: function (event) {
            event.stopPropagation();
            this.application.delegate.toggleCameraEnabled(this.camera);
        }
    },

    handleBackAction: {
        value: function (event) {
            event.stopPropagation();
            this.dispatchEventNamed("cameraInfoBackAction", true, true, {});
        }
    },

    handleMenuAction: {
        value: function (event) {
            event.stopPropagation();
            var value = event.detail.item.value;
            if (value === "pan") {
                this.application.delegate.centerOnFeature(this.camera);
            } else if (value === "zoom") {
                this.application.delegate.centerOnAndZoomToFeature(this.camera);
            }
        }
    },

    handlePress: {
        value: function (event) {
            event.stopPropagation();
            this.application.delegate.centerOnFeature(this.camera);
        }
    }

});
