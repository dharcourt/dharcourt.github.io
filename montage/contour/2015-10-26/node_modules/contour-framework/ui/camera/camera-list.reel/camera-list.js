/**
 * @module ui/camera-list.reel
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class CameraList
 * @extends Component
 */
exports.CameraList = Component.specialize(/** @lends CameraList.prototype */ {
    activeCameras: { value: [] },

    _pressComposer: {
        value: null
    },

    camerasLayer: {
        value: null
    },

    enterDocument: {
        value: function (firstTime) {
            if (firstTime) {
                this._pressComposer = new PressComposer();
                this.addComposerForElement(this._pressComposer, this.element);
            }
        }
    },

    getTitle: {
        value: function (cameras) {
            var count = cameras ? cameras.length : -1;
            return count === 1 ? "1 Camera" :
                count >= 0 ? count + " cameras" : "";
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this.addEventListener("settingsAction", this, false);
                this._pressComposer.addEventListener("press", this, false);
                this._preparedForAction = true;
            }
        }
    },

    handlePress: {
        value: function (event) {
            event.stopPropagation();
            if (event.targetElement.component &&
                event.targetElement.component.camera &&
                event.targetElement.component.camera.properties.active == 1) {
                this.dispatchEventNamed("cameraListRowClickAction", true, true, event.targetElement.component.camera);
            } else if (event.targetElement.component && event.targetElement.component.identifier === "location") {
                var cameraListItem = event.targetElement.component.ownerComponent;
                this.application.delegate.centerOnFeature(cameraListItem.camera);
            } else if (event.targetElement.component && event.targetElement.component.identifier === "checkbox") {
                this.application.delegate.toggleCameraEnabled(event.targetElement.component.ownerComponent.camera);
            }
        }
    },

    handleSettingsAction: {
        value: function (event) {
            event.stopPropagation();
            this.dispatchEventNamed("cameraListSettingsAction", true, true, {});
        }
    },

    searchTextDidChange: {
        value: function (text, callback) {
            callback();
        }
    }

});
