var Component = require("montage/ui/component").Component,
    MapDataConverter = require("logic/map/converters/map-data-converter").MapDataConverter,
    FileSaver = require("FileSaver.js");

/**
 * @class MapExportInspector
 * @extends Component
 */
var MapExportInspector = exports.MapExportInspector = Component.specialize(/** @lends MapExportInspector# */ {

    constructor: {
        value: function MapExportInspector() {
        }
    },

    /*****************************************************
     * properties
     */

    // supplied by serialization
    editBar: {
        value: undefined
    },

    exportExceptions: {
        value: undefined
    },

    jpegPreview: {
        value: undefined
    },

    jpegPreviewWrapper: {
        value: undefined
    },

    _hiddenCanvasContext: {
        get: function () {
            if (this.hiddenCanvas && !this.__hiddenCanvasContext) {
                this.__hiddenCanvasContext = this.hiddenCanvas.getContext("2d");
            }
            return this.__hiddenCanvasContext;
        }
    },

    hiddenCanvas: {
        value: undefined
    },

    previewHeader: {
        value: undefined
    },

    // export properties
    exportLegend: {
        value: false
    },

    // set by owner
    _format: {
        value: undefined
    },

    format: {
        get: function () {
            return this._format;
        },
        set: function (value) {
            if (value && value !== this._format) {
                this._format = value;
            }
        }
    },

    filename: {
        value: undefined
    },

    _previewGenerationState: {
        value: undefined
    },

    previewGenerationState: {
        get: function () {
            if (this._previewGenerationState === undefined) {
                this._previewGenerationState = MapExportInspector.previewGenerationStates.NOT_GENERATED;
            }
            return this._previewGenerationState;
        },
        set: function (value) {
            if (value !== undefined && value !== this._previewGenerationState) {
                this._previewGenerationState = value;
            }
        }
    },

    succession: {
        value: undefined
    },

    /*****************************************************
     * actions
     */

    handleCancelAction: {
        value: function (e) {
            e.stopPropagation();
            this.succession.components.pop();
        }
    },

    handleHeadingAction: {
        value: function (e) {
            e.stopPropagation();
            var mapSize = this.application.delegate.mapSize,
                self = this;
            this.hiddenCanvas.width = mapSize.width;
            this.hiddenCanvas.height = mapSize.height;
            this.previewGenerationState = MapExportInspector.previewGenerationStates.PROCESSING;
            this._hiddenCanvasContext.clearRect(0, 0, this.hiddenCanvas.width, this.hiddenCanvas.height);
            this.application.delegate.exportMapToJpeg(this._hiddenCanvasContext, this.exportLegend).then(function (result) {
                self.previewGenerationState = MapExportInspector.previewGenerationStates.GENERATED;
                self.needsDraw = true;
                self.exportExceptions = result;
            }).catch(function () {
                self.previewGenerationState = MapExportInspector.previewGenerationStates.FAILED;
            });
        }
    },

    handleSaveAction: {
        value: function (e) {
            e.stopPropagation();
            var self = this,
                geojson, blob;
            switch (this.format) {
                case "kml":
                    geojson = this._getActiveLayersAsGeojson();
                    blob = new Blob([MapDataConverter.geojsonToKml(geojson)], {type: "text/xml;charset=utf-8"});
                    FileSaver.saveAs(blob, this.filename + ".kml");
                    break;
                case "gpx":
                    geojson = this._getActiveLayersAsGeojson();
                    blob = new Blob([MapDataConverter.geojsonToGpx(geojson)], {type: "text/xml;charset=utf-8"});
                    FileSaver.saveAs(blob, this.filename + ".gpx");
                    break;
                case "jpeg":
                    this.hiddenCanvas.toBlob(function (blob) {
                        FileSaver.saveAs(blob, self.filename + ".jpg");
                    }, "image/jpeg");
                    break;
            }
        }
    },

    _getActiveLayersAsGeojson: {
        value: function () {
            var layers = this.application.delegate.layers.enabled,
                features = [],
                len = layers.length,
                i, geojson;

            for (i = 0; i < len; i++) {
                geojson = layers[i].toGeojson();
                if (geojson) {
                    features.push.apply(features, geojson.features);
                }
            }

            return {
                type: "FeatureCollection",
                features: features
            };
        }
    },

    /*****************************************************
     * lifecycle and UI control
     */

    _currentState: {
        value: undefined
    },

    currentState: {
        get: function () {
            if (this._currentState === undefined) {
                this._currentState = MapExportInspector.states.EDITING
            }
            return this._currentState;
        },
        set: function (value) {
            if (value && value !== this._currentState) {
                this._currentState = value;
            }
        }
    },

    draw: {
        value: function () {
            if (this.format === MapExportInspector.formats.JPEG) {
                this.jpegPreview.element.src = this.hiddenCanvas.toDataURL();
            }
        }
    },

    isJpegGenerated: {
        value: false
    },

    prepareForActivationEvents: {
        value: function () {
            this.editBar.addEventListener("cancelAction", this);
            this.editBar.addEventListener("saveAction", this);
            this.previewHeader.addEventListener("headingAction", this, false)
        }
    }

}, {

    formats: {
        value: {
            KML: "kml",
            GPX: "gpx",
            JPEG: "jpeg"
        }
    },

    previewGenerationStates: {
        value: {
            GENERATED: 0,
            PROCESSING: 1,
            FAILED: 2,
            NOT_GENERATED: 3
        }
    },

    states: {
        value: {
            EDITING: 0,
            CANCELLING: 1,
            SAVING: 2
        }
    }

});
