/**
 * @module ui/location/location-search-list.reel
 */
var Component = require("montage/ui/component").Component,
    RangeController = require("montage/core/range-controller").RangeController,
    LocationSelector = require("logic/mock-service/location-selector").LocationSelector,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class LocationSearchList
 * @extends Component
 */
exports.LocationSearchList = Component.specialize(/** @lends LocationSearchList# */ {
    constructor: {
        value: function LocationSearchList() {

        }
    },
    handlePress: {
        value: function (event) {
            event.stopPropagation();
            var component = event.targetElement.component, self = this;
            if (component && component.location && component.location.hasOwnProperty("coordinates")) {
                component.location.coordinates.then(function (coordinates) {
                    self.application.map.setCenter(coordinates[0]);
                });
            }
        }
    },
    _locationRangeController: {
        value: null
    },
    locations: {
        value: []
    },
    _preparedForAction: {
        value: false
    },
    prepareForActivationEvents: {
        value: function() {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this._pressComposer.addEventListener("press", this, false);
            }
        }
    },
    __pressComposer: {
        value: null
    },
    _pressComposer: {
        get: function () {
            if (!this.__pressComposer) {
                this.__pressComposer = new PressComposer();
                this.addComposer(this.__pressComposer);
            }
            return this.__pressComposer;
        },
        set: function (value) {
            if (value !== this.__pressComposer) {
                if (this.__pressComposer) {
                    this.removeComposer(this.__pressComposer);
                }
                this.__pressComposer = value;
                if (value) {
                    this.addComposer(this.__pressComposer);
                }
            }
        }
    },
    searchPane: {
        set: function (value) {
            this._locationRangeController = new RangeController();
        }
    },
    searchTextDidChange: {
        value: function (text, callback) {
            if (text) {
                var self = this;
                this.application.mockService.query(new LocationSelector(text)).then(function(locations) {
                    self.locations = locations;
                    callback();
                });
            } else {
                this.locations = [];
                callback();
            }


        }
    }
});
