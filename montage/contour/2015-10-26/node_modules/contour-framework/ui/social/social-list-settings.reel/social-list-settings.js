/**
 * @module ui/social/social-list-settings.reel
 */
var Component = require("montage/ui/component").Component,
    SocialKeywordList = require("ui/social/social-keyword-list.reel").SocialKeywordList;

/**
 * @class SocialListSettings
 * @extends Component
 */
exports.SocialListSettings = Component.specialize(/** @lends SocialListSettings# */ {
    constructor: {
        value: function SocialListSettings() {

        }
    },

    _keywordButton: { value: null },

    _keywordHeading: { value: null },

    __keywordList: { value: null },

    _keywordList: {
        get: function () {
            if (!this.__keywordList) {
                this.__keywordList = new SocialKeywordList();
                this.__keywordList.owner = this;
                this.__keywordList.succession = this.succession;
                this.__keywordList.addEventListener("selectKeywordAction", this, false);
            }

            return this.__keywordList;
        }
    },

    _isKeywordListBound: { value: false },

    _isCoordinateEdited: { value: false },

    _preparedForAction: { value: false },

    _scanlockCoordinateEditor: { value: null },

    _scanlockHeading: { value: null },

    _scanlockKeywordButton: { value: null },

    _scanlockKeywordHeading: { value: null },

    __scanlockLatitude: { value: null },

    _scanlockLatitude: {
        get: function () {
            return this.__scanlockLatitude;
        },
        set: function (value) {
            if (value !== this.__scanlockLatitude) {
                this.__scanlockLatitude = value;
                this._updateIsCoordinateEdited();
            }
        }
    },

    __scanlockLongitude: { value: null },

    _scanlockLongitude: {
        get: function () {
            return this.__scanlockLongitude;
        },
        set: function (value) {
            if (value !== this.__scanlockLongitude) {
                this.__scanlockLongitude = value;
                this._updateIsCoordinateEdited();
            }
        }
    },

    _titleBar: { value: null },

    _updateIsCoordinateEdited: {
        value: function () {
            var isLatNumber = (typeof this.__scanlockLatitude == "number"),
                isLngNumber = (typeof this.__scanlockLongitude == "number");
            if (this.selectedCoordinate) {
                this._isCoordinateEdited = (isLatNumber && this._scanlockLatitude !== this.selectedCoordinate[1]) || (isLngNumber && this.__scanlockLongitude !== this.selectedCoordinate[0]);
            } else {
                this._isCoordinateEdited = false;
            }
        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this._keywordButton.removeEventListener("action", this, false);
                this._keywordHeading.removeEventListener("headingAction", this, false);
                this._scanlockKeywordButton.removeEventListener("action", this, false);
                this._titleBar.removeEventListener("backAction", this, false);
                this._scanlockHeading.removeEventListener("coordinateAction", this, false);
                this._scanlockKeywordHeading.removeEventListener("coordinateAction", this, false);
            }
        }
    },



    handleAction: {
        value: function (e) {
            e.stopPropagation();
            if (this._isKeywordListBound) {
                this._keywordList.cancelBinding("keywords");
                this._keywordList.cancelBinding("selection");
            }
            var arrayPath, selectionPath = arrayPath = "owner.";
            if (e.target.identifier == "keywordButton") {
                arrayPath += "keywords";
                selectionPath += "selectedKeyword";
            } else if (e.target.identifier == "scanlockKeywordButton") {
                arrayPath += "scanlockKeywords";
                selectionPath += "scanlockKeyword";
            }

            this._keywordList.defineBinding("keywords", {"<-": arrayPath});
            this._keywordList.defineBinding("selection", {"<->": selectionPath});
            this._isKeywordListBound = true;
            this.succession.components.push(this._keywordList);
        }
    },

    handleBackAction: {
        value: function (e) {
            e.stopPropagation();
            if (this._isKeywordListBound) {
                this._isKeywordListBound = false;
                this._keywordList.cancelBinding("keywords");
                this._keywordList.cancelBinding("selection");
            }
            this.succession.components.pop();
        }
    },

    handleKeywordHeadingHeadingAction: {
        value: function (e) {
            e.stopPropagation();
            this.selectedKeyword = null;
        }
    },

    handleScanlockKeywordHeadingHeadingAction: {
        value: function (e) {
            e.stopPropagation();
            this.scanlockKeyword = null;
        }
    },

    handleScanlockHeadingHeadingAction: {
        value: function (e) {
            e.stopPropagation();
            if (!this.selectedCoordinate) {
                this.selectedCoordinate = this.application.delegate.getCenter();
            } else if (this._scanlockCoordinateEditor.longitude.toFixed(6) == this.selectedCoordinate[0].toFixed(6) &&
                this._scanlockCoordinateEditor.latitude.toFixed(6) == this.selectedCoordinate[1].toFixed(6)) {
                this.selectedCoordinate = undefined;
                this.scanlockKeyword = null;
            } else {
                this.selectedCoordinate = [this._scanlockCoordinateEditor.longitude, this._scanlockCoordinateEditor.latitude];
            }
            this._isCoordinateEdited = false;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this._keywordButton.addEventListener("action", this, false);
                this._keywordHeading.addEventListener("headingAction", this, false);
                this._scanlockKeywordButton.addEventListener("action", this, false);
                this._titleBar.addEventListener("backAction", this, false);
                this._scanlockHeading.addEventListener("headingAction", this, false);
                this._scanlockKeywordHeading.addEventListener("headingAction", this, false);
            }
        }
    },

    selectedCoordinate: { value: null },

    succession: { value: null }
});
