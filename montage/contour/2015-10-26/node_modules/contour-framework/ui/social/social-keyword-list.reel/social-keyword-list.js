/**
 * @module ui/social/social-keyword-list.reel
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class SocialKeywordList
 * @extends Component
 */
exports.SocialKeywordList = Component.specialize(/** @lends SocialKeywordList# */ {
    constructor: {
        value: function SocialKeywordList() {

        }
    },

    _preparedForAction: { value: false },

    _pressComposer: { value: null },

    _repetition: { value: null },

    draw: {
        value: function () {
            var weightElements = this._repetition.querySelectorAll("span.contour-SocialKeywordList-itemWeight"),
                i, length, element, component, max;
            for (i = 0, length = weightElements.length; i < length; i++) {
                element = weightElements[i];
                component = element.component;
                if (!max) {
                    max = component.value;
                }
                element.style.opacity = component.value / max;
            }

        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this._titleBar.removeEventListener("backAction", this, false);
                this._pressComposer.removeEventListener("press", this, false);
                this.removeComposer(this._pressComposer);
                this._pressComposer = null;
            }
        }
    },

    handleBackAction: {
        value: function (e) {
            e.stopPropagation();
            this.succession.components.pop();
        }
    },

    handlePress: {
        value: function (e) {
            e.stopPropagation();
            this.selection = e.targetElement.component.keyword.value;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this._titleBar.addEventListener("backAction", this, false);
                this._pressComposer = new PressComposer();
                this.addComposerForElement(this._pressComposer, this._repetition);
                this._pressComposer.addEventListener("press", this, false);
            }

        }
    },

    succession: { value: null }
});
