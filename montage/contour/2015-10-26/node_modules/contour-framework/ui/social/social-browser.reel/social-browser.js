/**
 * @module "ui/social-browser.reel"
 */
var Component = require("montage/ui/component").Component,
    Layer = require("logic/mock-model/layer").Layer,
    SocialListSettings = require("ui/social/social-list-settings.reel").SocialListSettings,
    SocialSelector = require("logic/mock-service/social-selector").SocialSelector,
    SocialService = require("logic/mock-service/social-service").SocialService,
    GeometryUtilities = require("logic/map/geometry-utilities").GeometryUtilities,
    Mode = require("ui/map/map.reel").Mode;

/**
 * @class SocialBrowser
 * @extends Component
 */
exports.SocialBrowser = Component.specialize(/** @lends SocialBrowser.prototype */ {

    availableMapModes: {
        value: [
            Mode["Point"]
        ]
    },

    _boundingBox: { value: null },

    _featureRangeListener: {
        value: null
    },

    _refreshTweets: {
        value: function () {
            var selector,
                self = this,
                keywordString = this._keywordString;
            if (this._isVisible) {
                //If no bounding box, then features are pulled straight from layer
                if (this._boundingBox) {
                    selector = new SocialSelector(this._layer, this._boundingBox, this._layer.mediaType);
                    selector.keyword = keywordString;
                    selector.cacheKeywords = false;
                    selector.getKeywords = true;
                    this.application.mockService.query(selector).then(function (data) {
                        self.features = data.results;
                        self._scanlockKeywords = data.keywords;
                    });

                } else {
                    this._refreshKeywords();
                }
            }

        }
    },

    _refreshKeywords: {
        value: function () {
            var selector,
                self = this,
                keywordString = this._keywordString;

            selector = new SocialSelector(this._layer, null, this._layer.mediaType);
            this.application.mockService.query(selector).then(function (keywords) {
                self._keywords = keywords;
            });

            if (this._boundingBox) {
                selector = new SocialSelector(this._layer, this._boundingBox, this._layer.mediaType);
                selector.keyword = keywordString;
                selector.getKeywords = true;
                this.application.mockService.query(selector).then(function (keywords) {
                    self._scanlockKeywords = keywords;
                });
            }

        }
    },

    _isLoading: {
        value: false
    },

    //_isVisible: {
    //    value: false
    //},

    _keywordString: {
        get: function () {
            var keywordString = this._selectedKeyword ? this._selectedKeyword : "";
            keywordString += this._scanlockKeyword && keywordString ? "," : "";
            keywordString += this._scanlockKeyword ? this._scanlockKeyword : "";
            return keywordString;
        }
    },

    _layer: {
        value: null
    },

    _preparedForAction: { value: false },

    _scanlockSymbol: { value: null },

    _scanlockKeyword: { value: null },

    _selectedCoordinate: { value: null },

    _selectedKeyword: { value: null },

    __socialListSettings: { value: null },

    _socialListSettings: {
        get: function () {
            if (!this.__socialListSettings) {
                this.__socialListSettings = new SocialListSettings();
                this.__socialListSettings.owner = this;
                this.__socialListSettings.succession = this._succession;
                this.__socialListSettings.defineBinding("keywords", {"<-": "owner._keywords"});
                this.__socialListSettings.defineBinding("scanlockKeywords", {"<-": "owner._scanlockKeywords"});
                this.__socialListSettings.defineBinding("selectedKeyword", {"<->": "owner.selectedKeyword"});
                this.__socialListSettings.defineBinding("scanlockKeyword", {"<->": "owner.scanlockKeyword"});
                this.__socialListSettings.defineBinding("selectedCoordinate", {"<->": "owner.selectedCoordinate"});
            }
            return this.__socialListSettings;
        }
    },

    _socialPhotoPane: {
        get: function () {
            var self = this;
            return require.async("ui/social/social-photo.reel").then(function(exports) {
                var pane = new exports.SocialPhoto();
                pane.owner = self;
                pane.defineBinding("features", {"<-": "owner.features"});
                pane.succession = self._succession;
                pane.settingsPane = self._socialListSettings;
                return pane;
            });
        }
    },

    _socialVideoPane: {
        get: function () {
            var self = this;
            return require.async("ui/social/social-video.reel").then(function(exports) {
                var pane = new exports.SocialVideo();
                pane.owner = self;
                pane.succession = self._succession;
                pane.settingsPane = self._socialListSettings;
                pane.defineBinding("features", {"<-": "owner.features"});
                return pane;
            });
        }
    },

    __socialTwitterPane: {
        value: null
    },

    _socialTwitterPane: {
        get: function () {
            return this.__socialTwitterPane;
        },
        set: function (pane) {
            this.__socialTwitterPane = pane;
            pane.owner = this;
            pane.defineBinding("features", {"<-": "owner.features"});
        }
    },

    _tabBarSelectedItem: {
        value: undefined
    },

    _tweetsHasMoreData: {
        value: false
    },

    _tweetsToSysId: {
        value: false
    },

    _updatePointSelection: {
        value: function (point) {
            if (point) {
                var mapBounds = this.application.delegate.getBounds();
                mapBounds = [mapBounds[0][0],mapBounds[0][1],mapBounds[1][0],mapBounds[1][1]];
                if (!GeometryUtilities.boundingBoxContainsCoordinate(mapBounds, point)) {
                    this.application.delegate.setCenter(point);
                }
                if (!this._boundingBox) {
                    this.cancelBinding("features");
                }
                this._boundingBox = {
                    north: point[1]+2,
                    south: point[1]-2,
                    west: point[0]-2,
                    east: point[0]+2
                };
                this._refreshTweets();

                if (this._scanlockSymbol) {
                    this.application.delegate.removeSymbol(this._scanlockSymbol);
                }

                this._scanlockSymbol = this.application.delegate.drawSymbol({
                    geometry: {
                        type: "Point",
                        coordinates: point
                    },
                    properties: {
                        style: {
                            strokeWeight: 2,
                            strokeColor: "#fff",
                            fillOpacity: 0
                        },
                        radius: 10
                    }

                });
            } else if (this._scanlockSymbol) {
                this.application.delegate.removeSymbol(this._scanlockSymbol);
                this._scanlockSymbol = null;
                this._boundingBox = null;
                this.defineBinding("features", {"<-": "_layer.features"});
                this._featureRangeListener = this._layer.addRangeAtPathChangeListener("features", this, "_refreshKeywords");
            }

        }
    },


    features: {
        value: []
    },

    handleMenuAction: {
        value: function (e) {
            e.stopPropagation();
            if (e.detail.item.value === "refresh") {
                this._layer._requestFeatures();
            }else if (e.detail.item.value === "keyword") {
                this.selectedKeyword = null;
            } else {
                this.scanlockKeyword = null;
                this.selectedCoordinate = undefined;
            }
        }
    },

    handlePointSelectionAction: {
        value: function (e) {
            e.stopPropagation();
            var point = e.detail.point;
            this.selectedCoordinate = point;
        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this._actionMenu.removeEventListener("actionMenu", this, false);
            }
        }
    },

    didClose: {
        value: function () {
            this.application.delegate.disableLayer(this.layer);
            this.application.delegate.map.removeEventListener("pointSelectionAction", this);
            this._updatePointSelection(null);
        }
    },

    willOpen: {
        value: function () {
            this.application.delegate.enableLayer(this.layer);
            this.application.delegate.addEventListener("pointSelectionAction", this);
        }
    },

    //isVisible: {
    //    set: function (value) {
    //        this._isVisible = value;
    //        //if (this._isVisible) {
    //        //    this.application.delegate.enableLayer(this.layer);
    //        //    this.application.delegate.addEventListener("pointSelectionAction", this);
    //        //} else {
    //        //    this.application.delegate.map.removeEventListener("pointSelectionAction", this);
    //        //    this.application.delegate.disableLayer(this.layer);
    //        //    this._updatePointSelection(null);
    //        //}
    //    },
    //    get: function () {
    //        return this._isVisible;
    //    }
    //},

    layer: {
        get: function () {
            if (this._layer === null) {
                this._layer = Layer.initializeSocialLayer("SocialBrowser", "http://servicestest.pdc.org/socialng/twitter-batches", 900);
                this.defineBinding("features", {"<-": "_layer.features"});
                if (!this._featureRangeListener) {
                    this._featureRangeListener = this._layer.addRangeAtPathChangeListener("features", this, "_refreshTweets");
                }
            }
            return this._layer;
        },
        set: function (value) {
            if (value && value !== this._layer) {
                this._layer = value;
            }
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this._actionMenu.addEventListener("menuAction", this, false);
            }
        }
    },

    scanlockKeyword: {
        get: function () {
            return this._scanlockKeyword;
        },
        set: function (value) {
            if (value !== this._scanlockKeyword) {
                this._scanlockKeyword = value;
                this._refreshTweets();
            }
        }
    },

    selectedKeyword: {
        get: function () {
            return this._selectedKeyword;
        },
        set: function (value) {
            if (value !== this._selectedKeyword) {
                this._selectedKeyword = value;
                if (this._layer.keyword !== value) {
                    this._layer.keyword = value;
                }
            }
        }
    },

    selectedCoordinate: {
        get: function () {
            return this._selectedCoordinate;
        },
        set: function (value) {
            if (value !== this._selectedCoordinate) {
                this._selectedCoordinate = value;
                this._updatePointSelection(value);
            }
        }
    },

    tabBarSelectedItem: {
        get: function () {
            return this._tabBarSelectedItem;
        },
        set: function (value) {
            if (value && this.layer.mediaType !== value.type) {
                this.layer.mediaType = value.type;
            }
        }
    }

});
