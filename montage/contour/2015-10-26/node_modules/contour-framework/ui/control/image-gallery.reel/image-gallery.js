/**
 * @module "ui/product/image-gallery.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component;

/**
 * @class ImageGallery
 * @extends Component
 */
exports.ImageGallery = Component.specialize(/** @lends ImageGallery.prototype */{
    _images: {
        value: []
    },
    _fullScreen: {
        value: false
    },
    _oldParent: {
        value: null
    },
    _play: {
        value: false
    },
    _playInterval: {
        value: false
    },
    _interval: {
        value: 3000
    },
    needUpdateImages: {
        value: false
    },
    previewImages: {
        value: null
    },
    images: {
        set: function (images) {
            this._images = images;
            this.needUpdateImages = true;
        },
        get: function () {
            return (this._fullScreen || !this.previewImages) ? this._images : this.previewImages;
        }
    },
    fullScreen: {
        set: function (fullScreen) {
            if (this._fullScreen === fullScreen) {
                return;
            }

            this._fullScreen = fullScreen;

            if (fullScreen) {
                this._oldParent = this.element.parentNode;
                document.body.appendChild(this.element);
            } else {
                this._oldParent.appendChild(this.element);
            }
        },
        get: function () {
            return this._fullScreen;
        }
    },
    _next: {
        value: function () {
            // @TODO Ask Charles about cyclic animation in image gallery
            this.gallery.handleNextAction();
        }
    },
    _start: {
        value: function () {
            this._playInterval = setInterval(this._next.bind(this), this.interval || 1000);
        }
    },
    _stop: {
        value: function () {
            clearInterval(this._playInterval);
        }
    },
    _restart: {
        value: function () {
            if (this.play) {
                this._stop();
                this._start();
            }
        }
    },
    interval: {
        set: function (interval) {
            if (this._interval !== interval) {
                this._interval = interval;
                this._restart();
            }
        },
        get: function () {
            return this._interval;
        }
    },
    play: {
        set: function (play) {
            if (this._play === play) {
                return;
            }
            this._play = play;

            if (play) {
                this._start();
            } else {
                this._stop();
            }
        },
        get: function () {
            return this._play;
        }
    },
    handlePreviousAction: {
        value: function () {
            this._restart();
        }
    },
    handleNextAction: {
        value: function () {
            this._restart();
        }
    },
    handleExitFullScreenButtonAction: {
        value: function () {
            this.fullScreen = false;
        }
    },
    handlePlayPauseButtonAction: {
        value: function () {
            this.play = !this.play;
        }
    }
});
