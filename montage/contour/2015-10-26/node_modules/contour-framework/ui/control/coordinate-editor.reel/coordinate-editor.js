/**
 * @module ui/control/coordinate-editor.reel
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer;

/**
 * @class CoordinateEditor
 * @extends Component
 */
exports.CoordinateEditor = Component.specialize(/** @lends CoordinateEditor# */ {
    constructor: {
        value: function CoordinateEditor() {

        }
    },

    _directionalLatitude: {
        get: function () {
            return this.latitude * (this._latitudeDirection == 'N' ? 1 : -1);
        },
        set: function (value) {
            if (value !== this._directionalLatitude) {
                this.latitude = value;
                this._latitudeEditor.value = this._directionalLatitude;
            }
        }
    },

    _directionalLongitude: {
        get: function () {
            return this._longitude * (this._longitudeDirection == 'E' ? 1 : -1);
        },
        set: function (value) {
            if (value !== this._directionalLongitude) {
                this.longitude = value;
                this._longitudeEditor.value = this._directionalLongitude;
            }
        }
    },

    _latitude: { value: null },

    _longitude: { value: null },

    _latitudeDirection: { value: "N" },

    _latitudeEditor: { value: null },

    _longitudeDirection: { value: "E" },

    _longitudeEditor: { value: null },

    _preparedForAction: { value: false },

    _pressComposer: { value: null },



    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this.templateObjects.heading.removeEventListener("action", this);
                this._pressComposer.removeEventListener("press", this);
                this.removeComposer(this._pressComposer);
                this._pressComposer = null;
            }
        }
    },

    handleHeadingAction: {
        value: function (e) {
            e.stopPropagation();
            this.dispatchEventNamed("coordinateAction", true, true, {});
        }
    },

    handlePress: {
        value: function (e) {
            e.stopPropagation();
            var direction;
            if (e.targetElement.component && e.targetElement.component.direction) {
                direction = e.targetElement.component.direction;
                if (direction === "N" || direction === "S") {
                    this.latitudeDirection = direction;
                } else if (direction === "W" || direction === "E") {
                    this.longitudeDirection = direction;
                }
            }
        }
    },

    headerText: {
        value: "Coordinate"
    },

    headerActionLabel: {
        value: null
    },

    latitude: {
        get: function () {
            return this._latitude
        },
        set: function (value) {
            if (value !== this._latitude) {
                this._latitude = value;
                if (this._latitude < 0) {
                    this._latitudeDirection = "S";
                } else {
                    this._latitudeDirection = "N";
                }
                this.dispatchOwnPropertyChange("_directionalLatitude", this._directionalLatitude);
            }
        }
    },

    latitudeDirection: {
        set: function (value) {
            if (value && value !== this._latitudeDirection) {
                this._latitudeDirection = value;
                this.latitude = this.latitude * -1;
            }
        },
        get: function () {
            return this._latitudeDirection;
        }
    },

    longitude: {
        get: function () {
            return this._longitude;
        },
        set: function (value) {
            this._longitude = value;
            if (this._longitude < 0) {
                this._longitudeDirection = "W";
            } else {
                this._longitudeDirection = "E";
            }
            this.dispatchOwnPropertyChange("_directionalLongitude", this._directionalLongitude);
        }
    },

    longitudeDirection: {
        set: function (value) {
            if (value && value !== this._longitudeDirection) {
                this._longitudeDirection = value;
                this.longitude = this.longitude * -1;
            }
        },
        get: function () {
            return this._longitudeDirection;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                if (!this._pressComposer) {
                    this._pressComposer = new PressComposer();
                    this.addComposer(this._pressComposer);
                    this._pressComposer.addEventListener("press",this,false);
                    this.heading.addEventListener("headingAction", this, false);
                }
            }
        }
    }
});
