/**
 * @module "ui/control/header.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    ObjectSelector = require("logic/mock-montage-data/object-selector").ObjectSelector,
    moment = require("moment-timezone");

/**
 * @class Header
 * @extends Component
 */
exports.Header = Component.specialize(/** @lends Header.prototype */ {

    constructor: {
        value: function Header() {
            this.initData();
        }
    },

    _hazard: {
        value: null
    },

    hazard: {
        set: function (value) {
            if (this._hazard != value) {
                if (this._hazard) {
                    this._hazard.removePathChangeListener("timezoneOffset", this, false);
                }
                this._hazard = value;
                if (this._hazard) {
                    this._hazard.addPathChangeListener("timezoneOffset", this, "hazardTimeoffsetHandler");
                } else {
                    this.dispatchOwnPropertyChange("timezoneList", this.timezoneList);
                }
            }
        },
        get: function () {
            return this._hazard;
        }
    },

    _hazardTimezoneOffset: {
        value: 0
    },

    hazardTimeoffsetHandler: {
        value: function () {
            var hazardTimezoneOffset = this.hazard.timezoneOffset;
            if (typeof(hazardTimezoneOffset) != "undefined") {
                if (this._hazardTimezoneOffset != hazardTimezoneOffset) {
                    this._hazardTimezoneOffset = hazardTimezoneOffset;
                    this.dispatchOwnPropertyChange("timezoneList", this.timezoneList);
                }
            }

        }
    },

    enterDocument: {
        value: function (firstDraw) {
            if (firstDraw) {
                this._startTimer();
                this.application.addEventListener("userDidSaveAction", this);
            }
        }
    },

    handleAction: {
        value: function (event) {
            this.panel["toggle" + event.target.position.toCapitalized()](event.target.prototype);
        }
    },

    prepareForActivationEvents: {
        value: function () {
            this.addEventListener("action", this); // legend button
        }
    },

    handleUserDidSaveAction: {
        value: function () {
            this.initData();
        }
    },

    initData: {
        value: function () {
            var self = this;
            this.application.mockService.query(new ObjectSelector("user")).then(function (user) {
                self.user = user;
                self.dispatchOwnPropertyChange("timezoneList", self.timezoneList);
            });
        }
    },

    _timer: {
        value: null
    },

    _startTimer: {
        value: function () {
            var self = this;
            if (this._timer) {
                clearInterval(this._timer);
            }
            this._timer = setInterval(function () {
                self._timerHandler();
            }, 1000);
        }
    },

    moment: {
        value: null
    },

    _timerHandler: {
        value: function () {
            var display = this._getStyle(this.element, "display");
            if (display != "none") {
                this.moment = moment();
            }
        }
    },

    timezoneList: {
        get: function () {
            var timezones = [];
            // Append UTC timezone
            if (this.hazard) {
                timezones.push({
                    label: "EVENT",
                    country: "",
                    timezoneOffset: this._hazardTimezoneOffset,
                    highlighted: true
                });
            } else {
                timezones.push({
                    label: "UTC",
                    country: "",
                    city: "",
                    highlighted: true
                });
            }

            if (this.user) {
                for (var i = 0; i < this.user.timeZones.length; i++) {
                    timezones.push(this.user.timeZones[i]);
                    timezones[i].highlighted = false;
                }
            }
            return timezones;
        }
    },

    _getStyle: {
        value: function (el, property) {
            if (window.getComputedStyle) {
                return document.defaultView.getComputedStyle(el, null)[property];
            }
            if (el.currentStyle) {
                return el.currentStyle[property];
            }
        }
    }
});
