var Succession = require("montage/ui/succession.reel").Succession;

/**
 * @class Succession
 * @extends Component
 */
exports.Succession = Succession.specialize(/** @lends Succession# */{

    _succession: { // Set when template objects are deserialized.
        value: undefined
    },

    /**
     * Setting content to null will clear succession's content.
     */
    content: {
        get: function () {
            return this.components.length ? this.components[this.components.length - 1] : undefined;
        },
        set: function (component) {
            if (!this._components ||
                this._components.length !== 1 ||
                this._components[0] !== component) {
                this.components = component ? [component] : [];
            }
        }
    },

    components: {
        get: function () {
            if (!this._components) {
                this._components = [];
                this._components.addRangeChangeListener(this);
            }
            return this._components;
        },
        set: function (components) {
            var previous = this._components;
            this._components = Array.isArray(components) ? components : null;
            if (this._components !== previous) {
                if (previous) {
                    previous.removeRangeChangeListener(this);
                }
                if (this._components) {
                    this._components.addRangeChangeListener(this);
                }
                if (previous && previous.length || this._components && this._components.length) {
                    this.handleRangeChange(this._components || [], previous || [], 0);
                }
            }
        }
    },

    handleRangeChange: {
        value: function (plus, minus, index) {
            var length = this._components ? this._components.length : 0,
                isChanged = plus.length || minus.length,
                isChangeVisible = isChanged && index + plus.length === length,
                isPush = isChangeVisible && !minus.length && index,
                isPop = isChangeVisible && !plus.length && length,
                isReplace = isChangeVisible && !isPush && !isPop && length,
                isClear = isChangeVisible && !length,
                add = this.classList.add,
                remove = this.classList.remove;
            // Set appropriate classes and update the succession if necessary.
            if (isChangeVisible) {
                (isPush ? add : remove).call(this.classList, "montage-Succession--push");
                (isPop ? add : remove).call(this.classList, "montage-Succession--pop");
                (isReplace ? add : remove).call(this.classList, "montage-Succession--replace");
                (isClear ? add : remove).call(this.classList, "montage-Succession--clear");
                this._succession.content = length ? this._components[length - 1] : null;
            }
        }
    },

    hasTemplate: {
        value: true
    },

    enterDocument: {
        value: function (isFirstTime) {
            // The first time, extract the argument component (if any) and
            // insert it into the succession without animation. Component's
            // extractDomArgument("*") does not seem to be working so the
            // content argument must explicitly be named "content".
            var element = isFirstTime && this.extractDomArgument("content");
            if (element && element.component) {
                this._components = [element.component];
                this._components.addRangeChangeListener(this);
                this._succession.content = this._components[0];
            }
        }
    },

    draw: {
        value: function () {
            if (!this._areCssClassesSet && this._succession) {
                this._areCssClassesSet = true;
                this._succession.contentBuildInCssClass = "montage--buildIn-start";
                this._succession.contentBuildInTransitionCssClass = "montage--buildIn-duration";
                this._succession.contentBuildOutCssClass = "montage--buildOut-duration";
            }
        }
    }

});
