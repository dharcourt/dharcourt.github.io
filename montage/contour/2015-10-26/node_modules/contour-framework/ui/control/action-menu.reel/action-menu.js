/**
 * @module ui/control/action-bar.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component;

/**
 * @class ActionMenu
 * @extends Component
 */
exports.ActionMenu = Component.specialize(/** @lends ActionMenu.prototype */ {

    items: {
        value: []
    },

    isShow: {
        value: false
    },

    enterDocument: {
        value: function (firstTime) {
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
        value: function () {
            this.element.removeEventListener("touchstart", this);
            this.element.removeEventListener("mousedown", this);
            this.element.removeEventListener("mousemove", this);
        }
    },

    prepareForActivationEvents: {
        value: function () {
            this.element.addEventListener("touchstart", this, false);
            this.element.addEventListener("mousedown", this, false);
            this.element.addEventListener("mousemove", this, false);
        }
    },

    handleMousedown: {
        value: function (event) {
            event.stopPropagation();
            event.preventDefault();

            this.element.addEventListener("mouseup", this, false);

            this._pointX = event.clientX;
            this._pointY = event.clientY;
            this._isMouseDown = true;
            this.needsDraw = true;
        }
    },

    rayCasting: {
        value: function (p, poly) {
            var px = p.x,
                py = p.y,
                flag = false;

            for (var i = 0, l = poly.length, j = l - 1; i < l; j = i, i++) {
                var sx = poly[i].x,
                    sy = poly[i].y,
                    tx = poly[j].x,
                    ty = poly[j].y;
                if ((sx === px && sy === py) || (tx === px && ty === py)) {
                    return 'on'
                }
                if ((sy < py && ty >= py) || (sy >= py && ty < py)) {
                    var x = sx + (py - sy) * (tx - sx) / (ty - sy);
                    if (x === px) {
                        return 'on'
                    }
                    if (x > px) {
                        flag = !flag
                    }
                }
            }
            return flag ? 'in' : 'out'
        }
    },

    handleMousemove: {
        value: function (event) {
            this._currentPointMenu = event.target;
            this._isMouseMove = true;
            this.needsDraw = true;
        }
    },

    handleMouseup: {
        value: function (event) {
            this.element.removeEventListener("mouseup", this);

            this._isMouseDown = false;
            this._currentPointMenu = event.target;
            if (!this._isShowing && this._currentPointMenu) {
                this._isMouseUp = true;
                this.needsDraw = true;
            }
        }
    },

    handleTouchmove: {
        value: function (event) {

            this._currentPointMenu = document.elementFromPoint(
                event.changedTouches[0].clientX,
                event.changedTouches[0].clientY
            );
            if (!this._isShowing && this._currentPointMenu) {
                this.needsDraw = true;
                this._isTouchMove = true;

            }
        }
    },

    handleTouchstart: {
        value: function (event) {
            event.stopPropagation();
            event.preventDefault();

            this.element.addEventListener("touchmove", this, false);
            this.element.addEventListener("touchend", this, false);

            this._pointX = event.changedTouches[0].clientX;
            this._pointY = event.changedTouches[0].clientY;
            this._currentPointMenu = document.elementFromPoint(
                event.changedTouches[0].clientX,
                event.changedTouches[0].clientY
            );
            this.needsDraw = true;
            this._isTouchStart = true;

        }
    },

    handleTouchend: {
        value: function (event) {
            this.element.removeEventListener("touchmove", this);
            this.element.removeEventListener("touchend", this);

            this._currentPointMenu = document.elementFromPoint(
                event.changedTouches[0].clientX,
                event.changedTouches[0].clientY
            );
            if (!this._isShowing && this._currentPointMenu) {
                this._isTouchEnd = true;
                this.needsDraw = true
            }
        }
    },

    getOffsetLeft: {
        value: function (elem) {
            var offsetLeft = 0;
            do {
                if (!isNaN(elem.offsetLeft)) {
                    offsetLeft += elem.offsetLeft;
                }
            } while (elem = elem.offsetParent);
            return offsetLeft;
        }
    },

    _actionButtonClickHandler: {
        value: function (index) {
            this.dispatchEventNamed("menuAction", true, true, {item: this.items[index]});
            this.hide();
        }
    },

    /*
     * Display action bars
     */
    show: {
        value: function () {
            var self = this;
            this.isShow = true;
            this._isShowing = true;
            setTimeout(function () {
                self._currentPointMenu = self._cancelButton.element;
                self._isShowing = false;
            }, 250);
        }
    },

    /*
     * Hide action bars
     */
    hide: {
        value: function () {
            this._isHiding = true;
            var self = this;
            setTimeout(function () {
                self.isShow = false;
                self._isHiding = false;
            }, 250);

        }
    },

    draw: {
        value: function () {
            // When mouse down or touch down, show menu.
            if (this._isMouseDown || this._isTouchStart) {
                if (!this.isShow) {
                    var clientRect = this.viewButtonTriangle.getBoundingClientRect();
                    var canShow = this.rayCasting({x: this._pointX, y: this._pointY}, [
                        {
                            x: clientRect.left + this.viewButtonTriangle.offsetWidth,
                            y: clientRect.top
                        },
                        {
                            x: clientRect.left,
                            y: clientRect.top + this.viewButtonTriangle.offsetHeight
                        },
                        {
                            x: clientRect.left + this.viewButtonTriangle.offsetWidth,
                            y: clientRect.top + this.viewButtonTriangle.offsetHeight
                        }
                    ]);
                    if (canShow == 'on' || canShow == 'in') {
                        this.show();
                    }
                } else {
                    //if mouse down or touch down when menu is already shown.
                    this._isTouchMove = true;
                }
                this._isTouchStart = false;
            }

            // When mouse move, it could be click down and move or directly move.
            if (this._isMouseMove) {
                this._clearHoverMenu();
                this._clearActiveMenu();
                //When mouse down and move, acting same as touch move.
                if (this._isMouseDown) {
                    this._isTouchMove = true;
                } else {
                    // When mouse move directly show hover style.
                    this._clearHoverMenu();
                    if (this._currentPointMenu.classList.contains("contour-ActionMenu-actionButton")) {
                        this._currentPointMenu.classList.add('contour-ActionMenu-actionButton--hover');
                    }
                    this._isMouseMove = false;
                }
                this._isMouseMove = false;
            }

            // When touch and move, show active style.
            if (this._isTouchMove) {
                this._clearActiveMenu();
                if (this._currentPointMenu && this._currentPointMenu.classList.contains("contour-ActionMenu-actionButton")) {
                    this._currentPointMenu.classList.add('contour-ActionMenu-actionButton--active');
                }
                this._isTouchMove = false;
            }

            // When touch end or mouse up. Select an menu or cancel or doing nothing.
            if (this._isTouchEnd || this._isMouseUp) {
                this._clearActiveMenu();
                if (this._currentPointMenu.classList.contains("contour-ActionMenu-cancelButton") ||
                    this._currentPointMenu.classList.contains("contour-ActionMenu-maskView")) {
                    this.hide();
                } else if (this._currentPointMenu.classList.contains("contour-ActionMenu-actionButton")) {
                    var childrenList = Array.prototype.slice.call(this._currentPointMenu.parentElement.children);
                    var childrenIndex = childrenList.indexOf(this._currentPointMenu);
                    this._actionButtonClickHandler(childrenIndex);
                }
                this._isTouchEnd = false;
                this._isMouseUp = false;
            }

        }
    },

    _clearActiveMenu: {
        value: function () {
            var lastMenu = this.element.querySelector('.contour-ActionMenu-actionButton--active');
            if (lastMenu) {
                lastMenu.classList.remove('contour-ActionMenu-actionButton--active');
            }
        }
    },

    _clearHoverMenu: {
        value: function () {
            var lastMenu = this.element.querySelector('.contour-ActionMenu-actionButton--hover');
            if (lastMenu) {
                lastMenu.classList.remove('contour-ActionMenu-actionButton--hover');
            }
        }
    }

});
