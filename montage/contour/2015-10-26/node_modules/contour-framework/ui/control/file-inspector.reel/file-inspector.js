/**
 * @module ui/layer/layer-import-file-inspector.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    FileInspector;

/**
 * @class FileInspector
 * @extends Component
 */
FileInspector = exports.FileInspector = Component.specialize(/** @lends FileInspector# */ {
    files: {
        value: null
    },
    accept: {
        value: null
    },
    fileInput: {
        value: null
    },
    isMultiple: {
        value: false
    },
    isDisabled: {
        value: false
    },
    autoRead: {
        value: false
    },
    _defaultMessage: {
        value: ""
    },
    constructor: {
        value: function LayerImportFileInspector() {

        }
    },
    _updateFileIcon: {
        value: function _updateFileIcon() {
            var ext;

            this.icon.className = "contour-FileInspector-fileIcon ";

            if (!this.files || !this.files.length) {
                return;
            }

            ext = this.files[0].ext;

            if (FileInspector.AVAILABLE_ICONS.indexOf(ext) !== -1) {
                this.icon.className += ext;
            } else {
                this.icon.className += "unknown";
            }
        }
    },
    _prepareFile: {
        value: function _prepareFile(file) {
            file.ext = FileInspector._getFileExt(file.name);
            if (Array.isArray(this.accept) && this.accept.length > 0) {
                if (this.accept.indexOf(file.ext) === -1) {
                    // @TODO show error message to user
                    console.error("Wrong file type");
                    return false;
                }
            }
            return true;
        }
    },
    _fileInputChange: {
        /**
         * Triggers on file input change and save list
         * of selected files
         *
         * @param {Object} event input[type=file] change event
         * @private
         */
        value: function _fileInputChange(event) {
            var files = event.target.files;
            files = [].slice.call(files);

            files = files.filter(this._prepareFile.bind(this));

            if (!files.length) {
                this.clear();
                return;
            }

            this.files = files;

            this.message = this.files.map(function (file) {
                return file.name;
            }).join("; ");

            this._updateFileIcon();

            if (this.autoRead) {
                this.readFiles();
            }
        }
    },
    _readFileAsText: {
        value: function _readFileAsText(file) {
            var self = this,
                reader;

            if (!file) {
                return;
            }

            reader = new FileReader();

            self.dispatchEventNamed("startLoadingFileAction", true, true, file);

            reader.onload = function (e) {
                var content = e.target.result;
                if (!file.isLoadingCancaled) {
                    self.dispatchEventNamed("fileLoadedAction", true, true, {
                        file: {
                            content: content,
                            name: file.name,
                            ext: file.ext
                        }
                    });
                }
            };
            reader.readAsText(file);
        }
    },
    readFiles: {
        /**
         * Read selected files
         */
        value: function readFiles() {
            if (Array.isArray(this.files)) {
                this.files.forEach(this._readFileAsText.bind(this));
                this.clear();
            }
        }
    },
    clear: {
        /**
         * Clear old files data and prepare for new load
         */
        value: function clear() {
            this.fileInput.value = "";
            this.files = null;
            this.message = this._defaultMessage;
            this._updateFileIcon();
        }
    },

    templateDidLoad: {
        value: function () {
            var acceptAttr, multAttr;

            this.fileInput.addEventListener("change", this._fileInputChange.bind(this), false);
            this._defaultMessage = this.message;

            if (Array.isArray(this.accept) && this.accept.length) {
                acceptAttr = document.createAttribute("accept");
                acceptAttr.value = this.accept.map(function (val) {
                    return "." + val;
                }).join(",");
                this.fileInput.attributes.setNamedItem(acceptAttr);
            }

            if (this.isMultiple) {
                multAttr = document.createAttribute("multiple");
                this.fileInput.attributes.setNamedItem(multAttr);
            }
        }
    }
}, {
    AVAILABLE_ICONS: {
        value: ["kml", "gpx", "wkt", "pdf"]
    },
    _getFileExt: {
        /**
         * Return file extension
         *
         * @param {string} name File name
         * @returns {string | null}
         * @private
         */
        value: function getFileExtension(name) {
            var arr;

            if (typeof name !== "string") {
                return null;
            }

            arr = name.split(".");

            if (arr.length < 1) {
                return null;
            }

            return arr.pop();
        }
    }
});
