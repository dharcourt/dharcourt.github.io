var Component = require("montage/ui/component").Component,
    RangeController = require("montage/core/range-controller").RangeController,
    PressComposer = require("montage/composer/press-composer").PressComposer,
    Set = require("collections/set");

/**
 * @class SelectionEditor
 * @extends Component
 */
exports.SelectionEditor = Component.specialize(/** @lends SelectionEditor.prototype */{

    // properties =======================

    /**
     * @name SelectionEditor#iteration
     * @property {HazardSeveritySelector | HazardTypeSelector | HazardCategorySelector}
     */

    /**
     * SelectionEditor's current selection,
     * either set by user action or set externally via data service.
     *
     * @name SelectionEditor#selection
     * @property {HazardSeveritySelector[] | HazardTypeSelector[] | HazardCategorySelector[]}
     */

    multiSelect: {value: true},

    _handleSelectionChange: {
        value: function (plus, minus) {
            if (this._shouldHandleSelectionChange) {
                var i, n, item,
                    ignoredItems = new Set();
                this._shouldHandleOptionSelectionChange = false;
                for (i = 0, n = plus.length; i < n; ++i) {
                    item = plus[i];
                    ignoredItems.add(item);
                    if (!this._optionsController.selection.has(item)) {
                        this._optionsController.select(item);
                    }
                }
                for (i = 0, n = minus.length; i < n; ++i) {
                    item = minus[i];
                    if (this._optionsController.selection.has(item) && !ignoredItems.has(item)) {
                        this._optionsController.deselect(item)
                    }
                }
                this._shouldHandleOptionSelectionChange = true;
            }
        }
    },

    _handleOptionSelectionChange: {
        value: function (plus, minus) {

            if (this._shouldHandleOptionSelectionChange) {
                var i, n, item,
                    ignoredItems = new Set();

                this._shouldHandleSelectionChange = false;
                for (i = 0, n = plus.length; i < n; ++i) {
                    item = plus[i];
                    ignoredItems.add(item);
                    if (!this._selectionController.has(item)) {
                        this._selectionController.add(item);
                    }
                }

                for (i = 0, n = minus.length; i < n; ++i) {
                    item = minus[i];
                    if (this._selectionController.has(item) && !ignoredItems.has(item)) {
                        this._selectionController.delete(item);
                    }
                }
                this._shouldHandleSelectionChange = true;
            }
        }
    },

    _options: {value: null},

    options: {
        get: function () {
            return this._optionsController.content || this._options;
        },
        set: function (options) {
            if (options !== this._options) {
                this._options = options;
                if (options) {
                    this._shouldHandleSelectionChange = this._shouldHandleOptionSelectionChange = true;
                    if (this._optionsController.length > 0) {
                        this.__optionsController.clear();
                    }
                    this._optionsController.addEach(options);
                }
            }
        }
    },

    __optionsController: {value: null},

    _optionsController: {
        get: function () {
            if (!this.__optionsController) {
                this.__optionsController = new RangeController();
                this.__optionsController.defineBinding("multiSelect", {"<-": "multiSelect", source: this});
                this._optionsSelectionChangeListenerCanceler = this.__optionsController.addRangeAtPathChangeListener("selection", this, "_handleOptionSelectionChange");

            }
            return this.__optionsController;
        }
    },

    _selection: { value: [] },

    __selectionController: {
        value: null
    },

    _selectionController: {
        get: function () {
            if (!this.__selectionController) {
                this.__selectionController = new RangeController();
                this.__selectionController.defineBinding("content", {"<->": "selection", source: this});
                this._selectionChangeListenerCanceler = this.__selectionController.addRangeAtPathChangeListener("content", this, "_handleSelectionChange");
            }
            return this.__selectionController;
        }
    },


    _pressComposer: {value: null},


    // event handlers =======================

    /**
     * Handles `heading-bar.reel`'s `action` button, which has an `identifier` of `button`
     */
    handleHeadingAction: {
        value: function (event) {
            event.stopPropagation();

            if (this.multiSelect) {
                // checking options instead of length doesn't work b/c may be blank array
                if (this._optionsController.selection.length !== this.options.length) {
                    this._optionsController.selection = null;
                    this._optionsController.selection = this.options;

                } else {
                    this._optionsController.selection = null;
                }
            }
        }
    },

    /**
     * Handles press of the entire SelectionEditor
     */
    handlePress: {
        value: function (event) {
            event.stopPropagation();

            if (event.targetElement.tagName === 'IMG' || event.targetElement.tagName === 'SPAN') {
                var targetComponent = event.targetElement.component;
                if (targetComponent) {
                    if (this._optionsController.selection.has(targetComponent.data)) {
                        this._optionsController.deselect(targetComponent.data);
                    } else {
                        this._optionsController.select(targetComponent.data);
                    }
                }
            }
        }
    },


    // lifecycle hooks =======================

    prepareForActivationEvents: {
        value: function () {
            this._pressComposer = new PressComposer();
            this.addComposer(this._pressComposer);
            this._pressComposer.addEventListener("press", this, false);
        }
    },

    selection: {
        get: function () {
            return this._selection;
        },
        set: function (value) {
            this._selection = value;
            this._optionsController.selection = value;
        }
    }

});
