/**
 * @module "ui/control/text-area.reel"
 */
var Component = require("montage/ui/component").Component,
    KeyComposer = require("montage/composer/key-composer").KeyComposer;

/**
 * @class TextArea
 * @extends Component
 */
exports.TextArea = Component.specialize(/** @lends TextArea.prototype */ {
    _enabled: { value: true },

    _hasFocus: { value: false },

    _updateValueFromDom: {
        value: function () {
            this.value = this.element.value;
        }
    },

    _value: { value: null },

    autoFocus: { value: false },

    draw: {
        value: function () {
            this.element.disabled = !this.enabled;
            this.element.autoFocus = this.autoFocus;
            if (this.element.value !== this._value) {
                this.element.value = this._value ? this._value : "";
            }
        }
    },

    enabled: {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            if (this._enabled !== value) {
                this._enabled = value;
                this.needsDraw = true;
            }
        }
    },

    handleChange: {
        value: function () {
            this._updateValueFromDom();
        }
    },

    handleFocus: {
        value: function () {
            this._hasFocus = true;
            this.dispatchOwnPropertyChange("hasFocus", this._hasFocus);
        }
    },



    handleInput: {
        value: function (event) {
            this._updateValueFromDom();
        }
    },

    hasFocus: {
        get: function () {
            return this._hasFocus;
        }
    },

    value: {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (value !== this._value) {
                this._value = value;
                this.needsDraw = true;
            }
        }
    },

    prepareForActivationEvents: {
        value: function () {
            this.element.addEventListener("focus", this);
            this.element.addEventListener("blur", this);
            this.element.addEventListener("input", this);
            this.element.addEventListener("change", this);
        }
    },

    handleBlur: {
        value: function () {
            this._hasFocus = false;
            this.dispatchOwnPropertyChange("hasFocus", this._hasFocus);
        }
    }

});
