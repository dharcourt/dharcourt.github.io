/**
 * @module "contour/ui/scroller.reel/scrollbars.reel"
 */

var Component = require("montage/ui/component").Component,
    TranslateComposer = require("montage/composer/translate-composer").TranslateComposer;

/**
 * @class ScrollBars
 * @extends external:Component
 * @classdesc
 */
var ScrollBars = exports.ScrollBars = Component.specialize(/** @lends ScrollBars# */ {

    constructor: {
        value: function ScrollBars() {

        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (firstTime) {
                if (!ScrollBars.webkitTransform) {
                    var style = this.element.style;

                    if (typeof style.webkitTransform !== "undefined") {
                        ScrollBars.transformCssProperty = "webkitTransform";
                    } else if (typeof style.MozTransform !== "undefined") {
                        ScrollBars.transformCssProperty = "MozTransform";
                    } else if (typeof style.msTransform !== "undefined") {
                        ScrollBars.transformCssProperty = "msTransform";
                    } else {
                        ScrollBars.transformCssProperty = "transform";
                    }

                    if (typeof style.webkitTransition !== "undefined") {
                        ScrollBars.transitionCssProperty = "webkitTransition";
                    } else if (typeof style.MozTransition !== "undefined") {
                        ScrollBars.transitionCssProperty = "MozTransition";
                    } else if (typeof style.msTransition !== "undefined") {
                        ScrollBars.transitionCssProperty = "msTransition";
                    } else {
                        ScrollBars.transitionCssProperty = "transition";
                    }
                }
                this._translateComposer = new TranslateComposer();
                this._translateComposer.identifier = "scroller";
                this._translateComposer.hasMomentum = false;
                this._translateComposer.enabled = true;
                this._translateComposer.allowsFloats = true;

                this.addComposerForElement(this._translateComposer,this.templateObjects.scroller.element);
                this._top.addEventListener("mouseover", this, true);
                this._bottomClip.addEventListener("mouseover", this, true);
                this._top.addEventListener("mouseleave", this, true);
                this._bottomClip.addEventListener("mouseleave", this, true);
                this._top.addEventListener("mousedown", this, true);
                this._top.addEventListener("mouseup", this, true);
                this._translateComposer.addEventListener("translateStart",this);
                this._translateComposer.addEventListener("translate",this);
                this._translateComposer.addEventListener("translateEnd",this);
            }
        }
    },
    _previousTranslateY: {
        value: 0
    },
    handleTranslateStart: {
        value: function (e) {
            this.isScrolling = true;
            if (e.translateY) {
                this._previousTranslateY = e.translateY;
            }
        }
    },
    _boundingClient: {
        value: null
    },
    handleTranslate: {
        value: function (e) {
            var newScroll = this._calculateVerticalScroll(this._previousTranslateY,e.translateY);
            if ((1-this.scrollLength) >= newScroll && newScroll >= 0) {
                this.scroll = newScroll;
            } else if ((1-this.scrollLength) < newScroll) {
                this.scroll = 1;
            } else if (newScroll < 0) {
                this.scroll = 0;
            }
            if (this._boundingClient.bottom >= e.target._pointerY && this._boundingClient.top <= e.target._pointerY) {
                this._previousTranslateY = e.translateY;
            }
            this.needsDraw = true;
        }
    },
    handleTranslateEnd: {
        value: function (e) {
            if (this._debounce) {
                clearTimeout(this._debounce);
                this._debounce = null;
            }
            this.isScrolling = false;
            this._previousTranslateY = e.translateY;
        }
    },

    _calculateDeltaScroll: {
        value: function(prevPos, currentPos) {
            var deltaPosition = currentPos - prevPos,
                max = this._offsetHeight - Math.floor(this._offsetHeight*this.scrollLength),
                deltaScroll = (deltaPosition * (1-this.scrollLength))/max;
            return deltaScroll;
        }
    },

    _calculateVerticalScroll: {
        value: function (prevPos, currentPos) {
            var deltaScroll = this._calculateDeltaScroll(prevPos,currentPos);
            return this._scroll + deltaScroll;
        }
    },

    captureMouseover: {
        value: function() {
            this.isHovered = true;
        }
    },
    captureMouseleave: {
        value: function() {
            this.isHovered = false;
        }
    },
    isScrolling: {
        value:null
    },
    isHovered: {
        value:null
    },

    _translateComposer: {
        value: null
    },
    // Scroll and length are defined in a [0..1] range

    _scroll: {
        value: 0
    },

    _scrollLength: {
        value: 0
    },

    _debounce: {
        value: null
    },

    handleScrollEnd: {
        value: function () {
            this._debounce = null;
            this.isScrolling = false;
        }
    },

    scroll: {
        get: function () {
            return this._scroll;
        },
        set: function (value) {
            if (this._scroll !== value) {
                if (value !== 0) {
                    if (this._debounce) {
                        clearTimeout(this._debounce);
                    }
                    this.isScrolling = true;
                    this._debounce = setTimeout(this.handleScrollEnd.bind(this), 250);
                }
                this._scroll = value;
                this.needsDraw = true;
            }
        }
    },
    scrollLength: {
        get: function () {
            return this._scrollLength;
        },
        set: function (value) {
            this._scrollLength = value;
            this.needsDraw = true;
        }
    },

    _opacity: {
        value: 0
    },

    opacity: {
        get: function () {
            return this._opacity;
        },
        set: function (value) {
            this._opacity = value;
            this.needsDraw = true;
        }
    },

    _top: {
        value: false
    },

    _bottomClip: {
        value: false
    },

    _bottom: {
        value: false
    },

    _hasResized: {
        value: false
    },

    willDraw: {
        value: function () {
            //if (this._offsetHeight !== this._element.offsetHeight) {
                this._offsetHeight = this._element.offsetHeight;
                this._hasResized = true;
                this._boundingClient = this._element.getBoundingClientRect();
            //}
        }
    },

    draw: {
        value: function () {
            var size,
                pos,
                range,
                max;

            if (this._hasResized) {
                this._bottomClip.style.height = (this._offsetHeight - 4) + "px";
                this._hasResized = false;
            }

            range = this._offsetHeight - 9;
            size = Math.floor(range * this._scrollLength);
            max = range - size;
            if (1 - this._scrollLength) {
                pos = Math.floor((max * this._scroll) / (1 - this._scrollLength));
            } else {
                pos = 0;
            }
            if (pos < 0) {
                size += pos;
                if (size < 0) {
                    size = 0;
                }
                pos = 0;
            }
            if (pos > max) {
                size += Math.floor(max - pos);
                if (size < 0) {
                    size = 0;
                }
                pos = range - size;
            }
            var ttranslate = "0," + (pos + 2) + "px";
            this._top.style[ScrollBars.transformCssProperty] = "translate3d(" + ttranslate + ",5px)";

            this._top.style.height = (5 + size) + "px";

        }
    }
}, {
    // cache

    transformCssProperty: {
        value: null
    },

    transitionCssProperty: {
        value: null
    }

});
