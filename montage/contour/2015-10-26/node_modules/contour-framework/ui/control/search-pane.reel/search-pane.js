/**
 * @module ui/control/search-pane.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    TranslateComposer = require("montage/composer/translate-composer").TranslateComposer;

/**
 * @class SearchPane
 * @extends Component
 */
exports.SearchPane = Component.specialize(/** @lends SearchPane.prototype */ {
    _translateComposer: {
        value: null
    },

    _desktopMode: {
        value: null
    },

    _pressComposer: {
        value: null
    },

    _isTopBarVisible: {
        value: false
    },

    _isFlowChild: {
        get: function () {
            return this.templateObjects.bodyWrapper.element.children[0].classList.contains('montage-Flow') ? true : false

        }
    },

    _needInitEvents: {
        value: false
    },

    delegate: {
        value: null
    },

    enterDocument: {
        value: function (firstTime) {
            if (firstTime) {
                var portraitMediaQuery = window.matchMedia("(max-width: 1199px) and (max-aspect-ratio: 999999/1000000), (max-width: 299px)");
                portraitMediaQuery.addListener(this._updateOrientation.bind(this));
                this._updateOrientation(portraitMediaQuery);
            }
        }
    },

    _updateOrientation: {
        value: function (portraitMediaQuery) {
            if (portraitMediaQuery.matches) {
                this._desktopMode = false;
                if (!this.templateObjects.searchBar.text &&
                    this._isTopBarVisible) {
                    this._isTopBarVisible = false;
                }
                this.templateObjects.searchBar.hasCenterMode = false;
                this._needInitEvents = true;
            } else {
                this._desktopMode = true;
                this._isTopBarVisible = true;
                this.templateObjects.searchBar.hasCenterMode = true;
            }
            this.needsDraw = true;
        }
    },

    handleTouchstart: {
        value: function (e) {
            var body = this.templateObjects.bodyWrapper.element.children[0];
            this.startPositon = e.touches[0].clientY;
            body.addEventListener("touchend", this, false);
        }
    },

    handleTouchend: {
        value: function (e) {
            // Handle flow-list in different way since it's a special 3d component.
            var body = this.templateObjects.bodyWrapper.element.children[0];
            if (this._isFlowChild) {
                if (e.changedTouches[0].clientY - this.startPositon > 0 &&
                    body.component.scroll <= 0 && !this._isTopBarVisible) {
                    this._isTopBarVisible = true;
                } else if (e.changedTouches[0].clientY - this.startPositon < 0 && !this.templateObjects.searchBar.text &&
                    this._isTopBarVisible) {
                    this._isTopBarVisible = false;
                    this.templateObjects.searchBar.cancel();
                }
            } else {
                if (e.changedTouches[0].clientY - this.startPositon > 0 &&
                    body.scrollTop <= 0 && !this._isTopBarVisible) {
                    this._isTopBarVisible = true;
                } else if (e.changedTouches[0].clientY - this.startPositon < 0 && !this.templateObjects.searchBar.text &&
                    this._isTopBarVisible) {
                    this._isTopBarVisible = false;
                    this.templateObjects.searchBar.cancel();
                }
            }
            body.removeEventListener("touchend", this);
        }
    },

    draw: {
        value: function () {
            var body = this.templateObjects.bodyWrapper.element.children[0];
            if (this._needInitEvents && !this._hasAddedEventListner) {
                if (this._isFlowChild) {
                    // Do this when small screen but not a touch device
                    body.component._flowTranslateComposer.addEventListener('translateStart', this);
                    body.component._flowTranslateComposer.addEventListener('translate', this);
                    body.component._flowTranslateComposer.addEventListener('translateEnd', this);
                    body.component.addOwnPropertyChangeListener("scroll", this);
                    // Touch device
                    body.children[0].children[0].addEventListener("touchstart", this, false);
                    body.children[0].children[0].addEventListener("touchend", this, false);
                } else {
                    body.addEventListener("mousedown", this, false);
                    body.addEventListener("scroll", this, false);

                    body.addEventListener("touchstart", this, false);

                }
                this._needInitEvents = false;
                this._hasAddedEventListner = true;
            }
        }
    },

    handleScroll: {
        value: function (e) {
            if (e.target.scrollTop > 0 && !this.templateObjects.searchBar.text &&
                this._isTopBarVisible) {
                this._isTopBarVisible = false;
                this.templateObjects.searchBar.cancel();
            } else if (e.target.scrollTop == 0 && !this._isTopBarVisible) {
                this._isTopBarVisible = true;
            }
        }
    },

    handleMousedown: {
        value: function (e) {
            var body = this.templateObjects.bodyWrapper.element.children[0];
            if (!this._desktopMode) {
                this.startPositon = e.pageY;
                body.addEventListener("mousemove", this, false);
            }
        }
    },

    handleMousemove: {
        value: function (e) {
            var body = this.templateObjects.bodyWrapper.element.children[0];
            if (!this._desktopMode) {
                if (e.pageY - this.startPositon > 0 &&
                    body.scrollTop <= 0 && !this._isTopBarVisible) {
                    this._isTopBarVisible = true;
                    body.removeEventListener("mousemove", this);
                } else if (e.pageY - this.startPositon < 0 && !this.templateObjects.searchBar.text &&
                    this._isTopBarVisible) {
                    this._isTopBarVisible = false;
                    this.templateObjects.searchBar.cancel();
                    body.removeEventListener("mousemove", this);
                }
            }
        }
    },


    /*
     * Handle flow translate when small screen and not touch device
     */
    handleTranslate: {
        value: function (e) {
            if (!this._desktopMode) {
                if (this._isFlowChild) {
                    var bodyElement = this.templateObjects.bodyWrapper.element.children[0];
                    if (e.translateY == 0 && bodyElement.component.scroll <= 0 && !this._isTopBarVisible) {
                        this._isTopBarVisible = true;
                    }
                }

            }
        }
    },

    /*
     * Handle flow scroll change when small screen and not touch device
     */
    handlePropertyChange: {
        value: function (value, action, target) {
            if (!this._desktopMode) {
                if (value > 0 && !this.templateObjects.searchBar.text &&
                    this._isTopBarVisible) {
                    this._isTopBarVisible = false;
                    this.templateObjects.searchBar.cancel();
                }
            }
        }
    },

    handleCancelAction: {
        value: function () {
            if (!this._desktopMode) {
                this._isTopBarVisible = false;
            }
        }
    },

    /*
     * Search bar delegate implement function
     */
    searchTextDidChange: {
        value: function (text, callback) {
            this._searchText = text;
            if (this.delegate) {
                var self = this;
                this.delegate.searchTextDidChange(text, function () {
                    self._performSearch(callback);
                })
            } else {
                this._performSearch(callback);
            }
        }
    },

    __searchText: {
        value: ""
    },

    _searchText: {
        set: function (value) {
            this.__searchText = value ? value.trim().replace(/\W+/g, ' ').toLowerCase() : value;
            this._searchTerms = [];
            this.__searchText && Array.prototype.push.apply(this._searchTerms, this.__searchText.split(' '));
        },
        get: function () {
            return this.__searchText;
        }
    },

    _searchTerms: {
        value: []
    },

    _source: {
        value: []
    },

    source: {
        get: function () {
            return this._source;
        },
        set: function (data) {
            this._source = data;
            this._performSearch();
        }
    },

    data: {
        value: []
    },

    _performSearch: {
        value: function (callback) {
            var i, j, n, matches, present;
            if (!this._searchTerms.length) {
                this.data = this.source;
            } else {
                this.data = (this.data === this.source) ? [] : this.data;
                for (i = 0, j = 0, n = this.source ? this.source.length : 0; i < n; ++i) {
                    matches = this._doesItemMatchSearchText(this.source[i]);
                    present = j < this.data.length && this.data[j] === this.source[i];
                    if (!matches && present) {
                        this.data.splice(j, 1);
                    } else if (matches && !present) {
                        this.data.splice(j++, 0, this.source[i]);
                    } else if (matches) {
                        ++j;
                    }
                }
            }
            if (callback) {
                callback();
            }
        }
    },

    _doesItemMatchSearchText: {
        value: function (item) {
            var terms = Object.keys(item.searchTerms).join(" "),
                matchesAll = true,
                i, n;
            for (i = 0, n = this._searchTerms.length; i < n && matchesAll; ++i) {
                matchesAll = terms.indexOf(this._searchTerms[i]) >= 0;
            }
            return matchesAll;
        }
    }

});
