/**
 * @module ui/control/date-editor-item.reel
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    TranslateComposer = require("montage/composer/translate-composer").TranslateComposer;

/**
 * @class NumberEditor
 * @extends Component
 */
exports.NumberEditor = Component.specialize(/** @lends NumberEditor.prototype */ {

    _placeholder: {
        value: null
    },

    placeholder: {
        get: function () {
            return this._placeholder;
        },
        set: function (value) {
            this._placeholder = value;
            this._needsDrawItems = true;
            this.needsDraw = true;
        }
    },

    content: {
        set: function (value) {
            if (value !== this._content) {
                this._content = value;
                this.needsDraw = true;
                this._needsDrawItems = true;
                if (this._value > this._content.end) {
                    this._value = parseFloat(this._content.end);
                    if (!this._isExpanded) {
                        this._needsDrawItems = true;
                    }
                }
                if (this._value < this._content.start) {
                    this._value = parseFloat(this._content.start);
                    if (!this._isExpanded) {
                        this._needsDrawItems = true;
                    }
                }
            }
        },
        get: function () {
            return this._content;
        }
    },

    _translateComposer: {
        value: null
    },

    disabled: {
        value: false
    },

    _isExpanded: {
        value: false
    },

    _direction: {
        value: false
    },

    _min: {
        value: null
    },

    min: {
        set: function (value) {
            if (value !== this._min) {
                this._min = parseInt(value);
                this.needsDraw = true;
                this._needsDrawItems = true;
            }
        },
        get: function () {
            return this._min;
        }
    },

    _max: {
        value: null
    },

    max: {
        set: function (value) {
            if (value !== this._max) {
                this._max = parseInt(value);
                this.needsDraw = true;
                this._needsDrawItems = true;
            }
        },
        get: function () {
            return this._max;
        }
    },

    _step: {
        value: 1
    },

    step: {
        set: function (value) {
            if (!value) {
                value = 1;
            }
            if (value !== this._step) {
                this._step = parseFloat(value);
                this.needsDraw = true;
                this._needsDrawItems = true;
            }
        },
        get: function () {
            return this._step;
        }
    },

    _decimalDigits: {
        value: 0
    },

    decimalDigits: {
        set: function (value) {
            if (!value) {
                value = 0
            }
            if (value > 20) {
                value = 20;
            }
            if (value !== this._decimalDigits) {
                this._decimalDigits = value;
                this.needsDraw = true;
                this._needsDrawItems = true;
            }
        },
        get: function () {
            return this._decimalDigits;
        }
    },

    setSelected: {
        value: function (isSelected) {
            var self = this;
            if (isSelected) {
                if (this._isExpanded) {
                    this._isExpanded = false;
                }
                this._setInputActive();
                setTimeout(function () {
                    self.templateObjects.valueInput.element.setSelectionRange(0, 9999);
                }, 100);
            } else {
                this.setValidValue(this.templateObjects.valueInput.element);
                this._setInputInactive();
            }
        }
    },

    _value: {
        value: 0
    },

    value: {
        set: function (value) {
            if (!value) {
                value = 0;
            }
            if (value !== this._value) {
                this._value = parseFloat(value);
                if (!this._isExpanded) {
                    this._needsDrawItems = true;
                    this.needsDraw = true;
                }
            }
        },
        get: function () {
            return this._value;
        }
    },

    enterDocument: {
        value: function (firstDraw) {
            var self = this;
            if (firstDraw) {
                this._translateComposer = new TranslateComposer();
                this._translateComposer.identifier = "slider";
                this._translateComposer.hasMomentum = true;
                this._translateComposer._shouldPreventDefault = function () {
                    if (self.isFocusIn == true) {
                        return true;
                    } else {
                        return false;
                    }
                };
                this.addComposerForElement(this._translateComposer, this.wrapper.element);
                // Add event here because we need mouse wheel event too.
                this._translateComposer.addEventListener('translateStart', this);
                this._translateComposer.addEventListener('translate', this);
                this._translateComposer.addEventListener('translateEnd', this);
                this.element.addEventListener('mouseover', this);
                this.element.addEventListener('mouseout', this);
                this.templateObjects.valueInput.element.addEventListener('change', this);
                this.templateObjects.valueInput.element.addEventListener('blur', this);
                this._needsDrawItems = true;
            }
        }
    },

    handleMouseover: {
        value: function () {
            if (!this.disabled) {
                this._isExpanded = true;
            }
        }
    },

    handleMouseout: {
        value: function (event) {
            if (!event.currentTarget.contains(event.relatedTarget)) {
                this._isExpanded = false;
            }
            this.isFocusIn = false;
        }
    },

    _setInputInactive: {
        value: function () {
            this._isEditing = false;
            this.templateObjects.valueInput.element.setAttribute('disabled', true);
        }
    },

    _setInputActive: {
        value: function () {
            this.templateObjects.valueInput.element.removeAttribute('disabled');
            this._isEditing = true;
            this.templateObjects.valueInput.element.focus();
        }
    },

    drawItems: {
        value: function () {
            var result;
            if (!this.value && this.placeholder) {
                result = this.placeholder;
            } else {
                result = this.value.toFixed(this.decimalDigits);
            }
            this.templateObjects.valueInput.element.value = result;
            this.templateObjects.valueInput.element.setAttribute('disabled', true);
        }
    },

    add: {
        value: function () {
            var result = parseFloat(this.value);
            var tempResult = Math.floor(result);
            if (tempResult < result) {
                result = tempResult + this.step;
            } else {
                result = result + this.step;
            }
            this.value = result;
            this.templateObjects.valueInput.element.value = this.value.toFixed(this.decimalDigits);
        }
    },

    minus: {
        value: function () {
            var result = parseFloat(this.value);
            var tempResult = Math.floor(result);
            if (tempResult < result) {
                result = tempResult;
            } else {
                result = result - this.step;
            }
            this.value = result;
            this.templateObjects.valueInput.element.value = this.value.toFixed(this.decimalDigits);
        }
    },

    draw: {
        value: function () {
            if (this._needsDrawItems) {
                if (this._content && typeof(this._content.start) !== "undefined") {
                    this.min = this._content.start;
                    this.max = this._content.end;
                }
                this.drawItems();
                this._needsDrawItems = false;
            }
            if (this._isWheeling && !this.disabled) {
                if (this._direction === 'UP') {
                    if (this.isNumeric(this.max) && this.value + this.step > this.max) {
                        this._isWheeling = false;
                        this.value = this.max;
                        this.templateObjects.valueInput.element.value = this.value.toFixed(this.decimalDigits);
                        return;
                    }
                    this.add();
                } else {
                    if (this.isNumeric(this.min) && this.value - this.step < this.min) {
                        this._isWheeling = false;
                        this.value = this.min;
                        this.templateObjects.valueInput.element.value = this.value.toFixed(this.decimalDigits);
                        return;
                    }
                    this.minus();
                }
                this._isWheeling = false;
            }
            if (this._isDragging && !this.disabled) {
                var moveUnit = 8;
                if (this._draggingEvent.translateY - this.minPosition > moveUnit) {
                    if (this._draggingEvent.translateY - this.minPosition > moveUnit) {
                        this.minPosition = this._draggingEvent.translateY;
                    }
                    if (this.isNumeric(this.min) && this.value - this.step < this.min) {
                        this.value = this.min;
                        this.templateObjects.valueInput.element.value = this.value.toFixed(this.decimalDigits);
                        return;
                    } else {
                        this.minus();
                    }
                } else if (this.minPosition - this._draggingEvent.translateY > moveUnit) {
                    if (this.minPosition - this._draggingEvent.translateY > moveUnit) {
                        this.minPosition = this._draggingEvent.translateY;
                    }
                    if (this.isNumeric(this.max) && this.value + this.step > this.max) {
                        this.value = this.max;
                        this.templateObjects.valueInput.element.value = this.value.toFixed(this.decimalDigits);
                        return;
                    } else {
                        this.add();
                    }
                }
            }
        }
    },

    prepareForActivationEvents: {
        value: function () {
            var self = this;
            this.element.addEventListener('touchstart', function (event) {
                self._isTouchEnd = false;
                if (!self.disabled) {
                    self._isExpanded = true;
                    document.addEventListener("touchend", self, false);
                }
                self._setInputInactive();
                self._needEdit = true;
            });
            this.element.addEventListener('mousedown', function (e) {
                if (!self.disabled) {
                    self._isExpanded = true;
                    document.addEventListener("mouseup", self, false);
                }
                self._setInputInactive();
            });
            this.element.addEventListener('keydown', function (e) {
                if (!self.disabled) {
                    if (e.which === 38) { //UP
                        e.preventDefault();
                        self.needsDraw = true;
                        self._isWheeling = true;
                        self._direction = 'UP';
                        self._isExpanded = true;
                        document.addEventListener("keyup", self, false);
                        self._setInputInactive();
                    } else if (e.which === 40) { //Down
                        e.preventDefault();
                        self.needsDraw = true;
                        self._isWheeling = true;
                        self._direction = 'DOWN';
                        self._isExpanded = true;
                        document.addEventListener("keyup", self, false);
                        self._setInputInactive();
                    }
                }
            });
        }
    },

    handleSliderTranslateStart: {
        value: function (e) {
            this.minPosition = e.translateY;
        }
    },

    handleSliderTranslate: {
        value: function (e) {
            if (typeof this.minPosition !== 'undefined') {
                this._draggingEvent = e;
                this._isDragging = true;
                this.needsDraw = true;
                this._needEdit = false;
                //Workaround for safari to prevent any text be highlight when dragging number.
                this.templateObjects.valueInput.element.setSelectionRange(0, 0);
            } else {
                if (this.isFocusIn) {
                    this._isWheeling = true;
                    if (this._preWheelPosition) {
                        this.needsDraw = true;
                    }
                    if (this._preWheelPosition > e.translateY) {
                        this._direction = 'UP';
                    } else {
                        this._direction = 'DOWN';
                    }
                    this._preWheelPosition = e.translateY
                } else {
                    this._isWheeling = false;
                }
            }
        }
    },

    handleSliderTranslateEnd: {
        value: function (e) {
            this._isDragging = false;
        }
    },

    handleTouchend: {
        value: function (event) {
            if (this._isExpanded) {
                this._isExpanded = false;
            }
            document.removeEventListener("touchend", this);
            if (event.target.classList.contains('contour-NumberEditor-centerSpan') && this._needEdit) {
                this._setInputActive();
                this.templateObjects.valueInput.element.setSelectionRange(0, 9999);
            }
            this._needEdit = false;
            this._isTouchEnd = true;
        }
    },

    handleMouseup: {
        value: function (event) {
            document.removeEventListener("mouseup", this);
            this.dispatchEventNamed("dateItemSelected", true, true, self);
            if (event.target.classList.contains('contour-NumberEditor-centerSpan')) {
                this.setDateItemSelected();
            }
        }
    },

    handleKeyup: {
        value: function (event) {
            document.removeEventListener("keyup", this);
            this.setDateItemSelected()
        }
    },

    setDateItemSelected: {
        value: function () {
            var self = this;
            if (this._isExpanded) {
                this._isExpanded = false;
            }
            this._setInputActive(event);
            // On Safari, directly set this does not work.
            // Set timeout as a workaround for now and need find the reason why
            setTimeout(function () {
                self.templateObjects.valueInput.element.setSelectionRange(0, 9999);
                self.isFocusIn = true;
            }, 100);
        }
    },

    handleBlur: {
        value: function (e) {
            this._setInputInactive();
        }
    },

    handleChange: {
        value: function (event) {
            this.setValidValue(event.target);
        }
    },

    setValidValue: {
        value: function (target) {
            var value = parseFloat(target.value);
            if (isNaN(value)) {
                if (this.isNumeric(this.min)) {
                    value = this.min;
                } else if (this.isNumeric(this.max)) {
                    value = this.max;
                } else {
                    value = 0;
                }
            } else if (this.isNumeric(this.max) && value > this.max) {
                value = this.max;
            } else if (this.isNumeric(this.min) && value < this.min) {
                value = this.min;
            }
            if (value === this.value && target.value != value) {
                target.value = value;
            }
            this.value = value;
        }
    },

    isNumeric: {
        value: function (input) {
            return (input - 0) == input && ('' + input).trim().length > 0;
        }
    }

});
