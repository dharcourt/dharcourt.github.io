/**
 * @module "ui/product/product-gallery.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component;

/**
 * @class ProductGallery
 * @extends Component
 */
exports.ProductGallery = Component.specialize(/** @lends ProductGallery.prototype */{
    _product: {
        value: null
    },
    _oldSize: {
        value: null
    },
    _fullScreen: {
        value: false
    },
    _size: {
        value: "auto"
    },
    _oldParent: {
        value: null
    },
    _play: {
        value: false
    },
    _playInterval: {
        value: false
    },
    _interval: {
        value: 1000
    },
    needUpdateImages: {
        value: false
    },
    images: {
        value: []
    },
    size: {
        set: function( size ) {
            this._size = size;
            this.updateImages();
        },
        get: function() {
            return this._size;
        }
    },
    product: {
        set: function( product ) {
            this._product = product;
            this.needUpdateImages = true;
        },
        get: function() {
            return this._product;
        }
    },
    updateImages: {
        value: function() {
            var self = this;

            if ( !this.product ) { return; }

            if ( this.product.type !== "FOLDER_PRODUCT" ) {
                setTimeout(function() {
                    self.images = [self.getProductPreviewUrl(self.product)];
                }, 0);
            } else {
                this.product.children.then(function( products ) {
                    var images = [];
                    for ( var i = 0, len = products.length; i < len; i++ ) {
                        if ( products[i] !== "FOLDER_PRODUCT" ) {
                            images.push(self.getProductPreviewUrl(products[i]));
                        }
                    }
                    self.images = images;
                });
            }
            this.needUpdateImages = false;
        }
    },
    enterDocument: {
        value: function() {
            if ( this.needUpdateImages ) {
                this.updateImages();
            }
        }
    },
    getProductPreviewUrl: {
        value: function(product) {
            var url = 'http://servicestest.pdc.org/hazards/api?m=hazards_products&action=showPreviewThumbnail&iar=1&product=' + product.id;
            if ( this.size && this.size !== "auto" ) {
                url += "&w=" + this.size.width + "&h=" + this.size.height;
            }
            return url;
        }
    },
    fullScreen: {
        set: function( fullScreen ) {
            if ( this._fullScreen === fullScreen ) { return; }

            this._fullScreen = fullScreen;

            if ( fullScreen ) {
                this._oldParent = this.element.parentNode;
                document.body.appendChild(this.element);

                this._oldSize = this.size;
                this.size = "auto";
            } else {
                this._oldParent.appendChild(this.element);
                this.size = this._oldSize;
            }
        },
        get: function( ) {
            return this._fullScreen;
        }
    },
    _next: {
        value: function() {
            // @TODO Ask Charles about cyclic animation in image gallery
            this.gallery.handleNextAction();
        }
    },
    _start: {
        value: function() {
            this._playInterval = setInterval(this._next.bind(this), this.interval || 1000);
        }
    },
    _stop: {
        value: function() {
            clearInterval(this._playInterval);
        }
    },
    _restart: {
        value: function() {
            if ( this.play ) {
                this._stop();
                this._start();
            }
        }
    },
    interval: {
        set: function( interval ) {
            if ( this._interval !== interval ) {
                this._interval = interval;
                this._restart();
            }
        },
        get: function( ) {
            return this._interval;
        }
    },
    play: {
        set: function( play ) {
            if ( this._play === play ) { return; }
            this._play = play;

            if ( play ) {
                this._start();
            } else {
                this._stop();
            }
        },
        get: function() {
            return this._play;
        }
    },
    handlePreviousAction: {
        value: function () {
            this._restart();
        }
    },
    handleNextAction: {
        value: function () {
            this._restart();
        }
    },
    handleExitFullScreenButtonAction: {
        value: function() {
            this.fullScreen = false;
        }
    },
    handlePlayPauseButtonAction: {
        value: function() {
            this.play = !this.play;
        }
    }
});
