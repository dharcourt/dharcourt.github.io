/**
 * @module "ui/product/product-tree.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component;

/**
 * @class ProductTree
 * @extends Component
 */
var ProductTree = exports.ProductTree = Component.specialize(/** @lends ProductTree.prototype */{

    identifier: {
        value: "productTree"
    },

    _isTreeMode: {
        value: null
    },

    /**
     * Bound to HazardInspector's isPortrait flag
     */
    isTreeMode: {
        get: function () {
            return this._isTreeMode;
        },
        set: function (value) {
            if (this._isTreeMode !== value) {
                this._isTreeMode = value;

                if (!this._isTreeMode && this._treeController) {
                    // Reset LayerTree to default state with only root expanded to 2nd level nodes
                    this._treeController.collapseAll();
                    this._treeController.expandNode(this._treeController.data);
                }
            }
        }
    },

    _handleProductChange: {
        value: function (plus, minus, index) {
            this._products.all = this.products;
            this._processProducts();
        }
    },

    _normalizeValueForSort: {
        value: function (product) {
            return this._sortField === "name" ? product.name.toUpperCase() : product.timelineDate.unix();
        }
    },

    _processProducts: {
        value: function () {
            var hiddenProductCount = 0,
                visibleProducts,
                self = this, isProductHidden;
            this._products.all = this.products;
            if (this._products.all && this._products.all.length) {
                visibleProducts = this._products.all.slice();
                visibleProducts = visibleProducts.filter(function (product) {
                    isProductHidden = product.isHidden === "Y";
                    isProductHidden && hiddenProductCount++;
                    return self.shouldDisplayHiddenProducts || !isProductHidden;
                });
                this._sortProducts(visibleProducts);
                this._products.visible = visibleProducts;
                this.title = this._products.visible.length + " Items";
                this.title += hiddenProductCount === 0 ? "" : " (" + hiddenProductCount + " Hidden)";
            } else {
                if (this._treeController && this._treeController.data.parent) {
                    this.title = "No products to display"
                }
                this._products.visible = [];
            }

        }
    },

    _products: {
        value: {
            all: null,
            visible: null
        }
    },

    products: { value: null},

    _shouldDisplayHiddenProducts: { value: false },

    _sortDirection: { value: null },

    _sortField: { value: null },

    _sortProducts: {
        value: function (visibleProducts) {
            var holder, index, swapOccured,
                valueAtNextIndex, nextIndex, valueAtIndex, lastIndex,
                self = this;
            lastIndex = visibleProducts.length - 1;
            visibleProducts.some(function () {
                swapOccured = false;
                for (index = 0; index < lastIndex; ++index) {
                    nextIndex = index + 1;
                    valueAtIndex = self._normalizeValueForSort(visibleProducts[index]),
                        valueAtNextIndex = self._normalizeValueForSort(visibleProducts[nextIndex]);
                    if ((self._sortDirection === "Ascending" && valueAtIndex > valueAtNextIndex) ||
                        (self._sortDirection === "Descending" && valueAtNextIndex > valueAtIndex)) {
                        holder = visibleProducts[nextIndex];
                        visibleProducts[nextIndex] = visibleProducts[index];
                        visibleProducts[index] = holder;
                        swapOccured = true;
                    }
                }

                return !swapOccured;
            });

        }
    },

    _treeList: {value: null},

    _titleBar: {value: null},

    enterDocument: {
        value: function (firstTime) {
            if (firstTime) {
                this.addRangeAtPathChangeListener("products", this._handleProductChange.bind(this));
            } else {
                this._processProducts();
            }
        }
    },

    handleBackAction: {
        value: function (event) {
            event.stopPropagation();
            this.succession.components.pop();
        }
    },

    handleExpandButtonAction: {
        value: function (event) {
            event.stopPropagation();
            if (this.isTreeMode) {
                event.target.ownerComponent.node.isExpanded = !event.target.ownerComponent.node.isExpanded;
            }
        }
    },

    handleLocationAction: {
        value: function (event) {
            event.stopPropagation();
            this.application.delegate.setCenter(event.target.ownerComponent.node.coordinates);
        }
    },

    handleInspectButtonAction: {
        value: function (event) {
            event.stopPropagation();
            var product = event.target.ownerComponent.node.data;
            this.application.delegate.inspectProduct(product);
        }
    },

    handleDrillDownButtonAction: {
        value: function (event) {
            event.stopPropagation();
            var node = event.target.ownerComponent.node.data,
                pane;

            if (node.children) {
                pane = new ProductTree();
                pane.products = node.children;
                pane.succession = this.succession;
                pane.defineBinding("isTreeMode", {"<-": "isTreeMode", source: this});
                pane.defineBinding("sortDirection", {"<-": "sortDirection", source: this});
                pane.defineBinding("sortField", {"<-": "sortField", source: this});
                pane.defineBinding("shouldDisplayHiddenProducts", {"<-": "shouldDisplayHiddenProducts", source: this});
                pane.isRootFolder = false;
                pane.succession.components.push(pane);
            }
        }
    },

    isRootFolder: {
        value: false
    },

    prepareForActivationEvents: {
        value: function () {
            this.addEventListener("action", this, false);
            this._titleBar.addEventListener("backAction", this, false);
        }
    },

    shouldDisplayHiddenProducts: {
        get: function () {
            return this._shouldDisplayHiddenProducts;
        },
        set: function (value) {
            if (typeof value !== "undefined" && value !== null && value !== this._shouldDisplayHiddenProducts) {
                this._shouldDisplayHiddenProducts = value;
                this._processProducts();
            }
        }
    },

    sortDirection: {
        get: function () {
            return this._sortDirection;
        },
        set: function (value) {
            if (value && value !== this._sortDirection) {
                this._sortDirection = value;
                this._processProducts();
            }
        }
    },

    sortField: {
        get: function () {
            return this._sortField;
        },
        set: function (value) {
            if (value && value !== this._sortField) {
                this._sortField = value;
                this._processProducts();
            }
        }
    },

    _substitute: { value: null },

    substitute: {
        get: function () {
            return this.shouldUseSubstitute ? this._substitute : null;
        },
        set: function (value) {
            this._substitute = value;
        }
    },

    shouldUseSubstitute: {
        value: false
    },

    succession: {value: null},

    title: {value: null}
});
