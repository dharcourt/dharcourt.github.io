/**
 * @module "ui/product/product-info.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component,
    Product = require("logic/model/product").Product;

/**
 * @class ProductInfo
 * @extends Component
 */
exports.ProductInfo = Component.specialize(/** @lends ProductInfo.prototype */{

    _editBar: { value: null },

    _isNewProduct: {
        get: function () {
            return this.application.delegate.service.createdDataObjects.has(this._product);
        }
    },


    _isProductHidden: {
        get: function () {
            return this._product && this._product.isHidden === "N" ? "No" : "Yes"
        }
    },

    _productOrganization: {
        get: function () {
            return this._product && this._product.orgAcronym ? this._product.orgAcronym : "None";
        }
    },

    _productParent: {
        get: function () {
            return this._product && this._product.parent && this._product.parent.name ? this._product.parent.name : "None";
        }
    },

    _product: { value: null },

    _productType: {
        value: function (product) {
            return product ? product.type.substring(0,product.type.length-8) : "";
        }
    },

    _saveChanges: {
        value: function () {
            var self = this;
            this.application.delegate.service.saveDataChanges().then(function (result) {
                self.isEditMode = false;
            });
        }
    },

    handleAddAction: {
        value: function (e) {
            e.stopPropagation();
            this._saveChanges();
        }
    },

    handleCancelAction: {
        value: function (e) {
            e.stopPropagation();
            if (!this._isNewProduct) {
                this.isEditMode = false;
            } else {
                this.dispatchEventNamed("cancelProductCreationAction", false, false);
            }

        }
    },

    handleSaveAction: {
        value: function (e) {
            e.stopPropagation();
            this._saveChanges();
        }
    },

    isEditMode: { value: false },

    prepareForActivationEvents: {
        value: function () {
            this._editBar.addEventListener("cancelAction", this);
            this._editBar.addEventListener("saveAction", this);
            this._editBar.addEventListener("addAction", this);
        }
    },

    product: {
        get: function () {
            return this._product;
        },
        set: function (value) {
            this._product = value;
        }
    }

});
