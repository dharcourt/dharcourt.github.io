/**
 * @module "ui/product/product-inspector.reel"
 * @requires montage/ui/component
 */
var Component = require("montage/ui/component").Component;

/**
 * @class ProductInspector
 * @extends Component
 */
exports.ProductInspector = Component.specialize(/** @lends ProductInspector.prototype */ {

    _modes: {
        value: {
            EDIT: 0,
            INSPECT: 1,
            RESTRICT_ACCESS: 2
        }
    },

    _infoPane: { value: null },

    /**
     * @property
     * @type {Promise}
     */
    access: {
        get: function () {
            var self = this;

            return require.async("ui/product/product-restrict-access.reel").then(function(exports) {
                var pane = new exports.ProductRestrictAccess();
                pane.identifier = "productAccess";
                pane.defineBinding("product", {"<-": "product", source: self});
                return pane;
            });
        }
    },

    _isNewProduct: {
        get: function () {
            return this.application.delegate.service.createdDataObjects.has(this.product);
        }
    },

    handleMenuAction: {
        value: function (e) {
            e.stopPropagation();
            var self = this;
            this._tabBar.selectedIndex = 0;
            if (!this._infoPane) {
                this.info.then(function (pane) {
                    pane.isEditMode = true;
                });
            } else {
                this._infoPane.isEditMode = true;
            }
        }
    },

    /**
     * @property
     * @type {Promise}
     */
    info: {
        get: function () {
            var self = this;
            return require.async("ui/product/product-info.reel").then(function(exports) {
                var pane = new exports.ProductInfo();
                pane.identifier = "productInfo";
                self._infoPane = pane;
                pane.addEventListener("cancelProductCreationAction", self);
                pane.defineBinding("product", {"<-": "product", source: self});
                pane.defineBinding("isEditMode", {"<->": "isEditMode", source: self});
                return pane;
            });
        }
    },

    isEditMode: {
        value: false
    },

    handleCancelProductCreationAction: {
        value: function (e) {
            e.stopPropagation();
            this.panelSuccession.components.pop();
        }
    },

    prepareForActivationEvents: {
        value: function () {
            this._actionMenu.addEventListener("menuAction", this);
        }
    },

    product: {
        value: null
    }
});
