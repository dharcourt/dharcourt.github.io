/**
 * @module ui/identify-browser.reel
 */
var Component = require("montage/ui/component").Component,
    IdentifyList = require("ui/identify/identify-list.reel").IdentifyList,
    IdentifyInspector = require("ui/identify/identify-inspector.reel").IdentifyInspector,
    PressComposer = require("montage/composer/press-composer").PressComposer,
    MapMode = require("ui/map/map.reel/map").Mode,
    IdentifySummary = require("logic/model/identify-summary").IdentifySummary;

/**
 * @class IdentifyBrowser
 * @extends Component
 */
exports.IdentifyBrowser = Component.specialize(/** @lends IdentifyBrowser.prototype */{

    availableMapModes: {
        value: [
            MapMode["Identify"]
        ]
    },

    _handleNewIdentify: {
        value: function (plus, minus, index) {
            if (plus && plus.length > 0 && this.panelSuccession.content === this._identifyInspector) {
                this._identifyInspector.identify = plus[0];
            }
        }
    },

    _identifyList: { value: null },

    _isVisible: { value: false },

    _preparedForAction: { value: false },

    _returnToPanMode: {
        value: function () {
            this.application.map.removeEventListener("identify", this);
            this.application.map.currentMode = MapMode["Pan"];
            this.application.map.needsDraw = true;
        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (firstTime) {
                this.addRangeAtPathChangeListener("identifySummaries", this._handleNewIdentify.bind(this));
            }
        }
    },

    handleUseCurrentExtentButtonAction: {
        value: function (e) {
            e.stopPropagation();
            this.application.delegate.createIdentifySummaryWithCurrentExtent();
        }
    },

    handleMenuAction: {
        value: function (e) {
            e.stopPropagation();
            var selectedItems = this._identifyList.selectedItems,
                value = e.detail.item.value;
            if (value === "delete") {
                var item, index;
                while (this._identifyList.selectedItems.length > 0) {
                    item = this._identifyList.selectedItems.shift();
                    index = this.application.delegate.identifySummaries.indexOf(item);
                    this.application.delegate.identifySummaries.splice(index, 1);
                }
            } else if (value === "export") {
                IdentifySummary.exportSummariesToCSV(this._identifyList.selectedItems.slice());
            }

        }
    },

    handleSelectIdentifyAction: {
        value: function (e) {
            e.stopPropagation();
            this.application.delegate.inspectIdentifySummary(e.detail);
        }
    },

    isVisible: {
        set: function (value) {
            this._isVisible = value;
            if (this._isVisible) {
                //this.application.delegate.availableMapModes = this.availableMapModes;
            } else {
                //this.application.delegate.availableMapModes = [];
            }
        },
        get: function () {
            return this._isVisible;
        }
    },

    __actions: {
        value: null
    },

    _actions: {
        get: function () {
            if (!this.__actions) {
                this.__actions = [{"label": "Delete Selected", "value": "delete"}];
                this.__actions.push({"label": "Export Selected To CSV", "value": "export"});
            }
            return this.__actions;
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this._identifyList.addEventListener("selectIdentifyAction", this);
                this._actionMenu.addEventListener("menuAction", this);
            }
        }
    },

    _identifyInspector: {value: null},

    _identifyInspectorPromise: {value: null},

    openIdentifyInspector: {
        value: function (identify) {
            var self = this;

            // opening for first time
            if (!this._identifyInspectorPromise) {
                this._identifyInspectorPromise = require.async("ui/identify/identify-inspector.reel")
                    .then(function (exports) {
                        self._identifyInspector = new exports.IdentifyInspector();
                        self._identifyInspector.identify = identify;
                        self.panelSuccession.components.push(self._identifyInspector);
                        return self._identifyInspector;
                    });

            // not currently open
            } else if (this.panelSuccession.content !== this._identifyInspector) {
                this._identifyInspector.identify = identify;
                this.panelSuccession.components.push(this._identifyInspector);
            }

            return this._identifyInspectorPromise;
        }
    }
});
