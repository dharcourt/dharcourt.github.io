/**
 * @module ui/identify-layer-list.reel
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer,
    TreeController = require("montage/core/tree-controller").TreeController,
    IdentifyFeatureTable = require("ui/identify/identify-feature-table.reel").IdentifyFeatureTable;

/**
 * @class IdentifyLayerList
 * @extends Component
 */
exports.IdentifyLayerList = Component.specialize(/** @lends IdentifyLayerList# */ {
    constructor: {
        value: function IdentifyLayerList() {

        }
    },

    _layers: { value: null },



    _selectedItems: { value: [] },

    _preparedForAction: { value: false },

    _pressComposer: { value: null },

    _treeController: { value: null },

    __treeList: { value: null },

    _treeList: {
        set: function (value) {
            this.__treeList = value;
            this._treeController = new TreeController();
            this._treeController.data = {
                name: "root",
                children: this.layers
            };
            this.__treeList.controller = this._treeController;
            this._treeController.owner = this;
            this._treeController.defineBinding("data.children", {"<-": "owner._searchPane.data"});
        }
    },

    handleBackAction: {
        value: function (e) {
            e.stopPropagation();
            console.log("handleBackAction");
            this.succession.components.pop();
        }
    },

    handlePress: {
        value: function (e) {
            e.stopPropagation();
            var component = e.targetElement.component,
                layer, index;
            if (component && component.layer) {
                if (component.layer.hasOwnProperty("fields") && component.layer.fields) {
                    if (!this._featureTable) {
                        this._featureTable = new IdentifyFeatureTable();

                    }
                    this._featureTable.succession = this.succession;
                    this._featureTable.layerName = component.layer.name;
                    this._featureTable.fields = component.layer.fields;
                    this._featureTable.features = component.layer.features;
                    this.succession.components.push(this._featureTable);
                } else {
                    console.warn("Fields are not available for layer ("+component.layer.name +")");
                }
            } else if (component.identifier === "checkbox") {
                layer = component.ownerComponent.layer;
                index = this._selectedItems.indexOf(layer);
                if (index !== -1) {
                    this._selectedItems.splice(index, 1);
                } else {
                    this._selectedItems.push(layer);
                }
            }
        }
    },

    layers: {
        get: function () {
            return this._layers;
        },
        set: function (value) {
            if (value && Array.isArray(value)) {
                this._layers = value;
                this.dispatchOwnPropertyChange("layers", this._layers);
            }
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._pressComposer = new PressComposer();
                this.addComposer(this._pressComposer);
                this._pressComposer.addEventListener("press", this);
                this._titleBar.addEventListener("backAction", this, false);
            }
        }
    },

    selectedItems: {
        get: function () {
            return this._selectedItems;
        }
    }
});
