/**
 * @module ui/identify-feature-table.reel
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer,
    RangeController = require("montage/core/range-controller").RangeController,
    TreeController = require("montage/core/tree-controller").TreeController;

/**
 * @class IdentifyFeatureTable
 * @extends Component
 */
exports.IdentifyFeatureTable = Component.specialize(/** @lends IdentifyFeatureTable# */ {
    constructor: {
        value: function IdentifyFeatureTable() {

        }
    },

    _features: { value: null },

    _featureRangeController: { value: null},

    _fieldRangeController: { value: null},

    _fields: { value: null },

    _preparedForAction: { value: false },

    _pressComposer: { value: null },

    _sortDirection: { value: "asc" },

    _sortField: { value: null },

    _updateSort: {
        value: function (field) {
            var sortPath, reversed = this._featureRangeController.reversed, suffix;
            if (this._sortField === field) {
                if (this._sortDirection === "asc") {
                    this._sortDirection = "desc";
                    reversed = true;
                } else {
                    this._sortDirection = "asc";
                    reversed = false;
                }
            } else {
                this._sortField = field;
            }
            suffix = this._sortField.type === "string" ? ".toUpperCase()" : "";
            sortPath = "properties." + this._sortField.propertyName + suffix;
            this._featureRangeController.sortPath = sortPath;
            this._featureRangeController.reversed = reversed;
        }
    },

    enterDocument: {
        value: function (firstTime) {
            if (!this._pressComposer) {
                this._pressComposer = new PressComposer();
                this.addComposer(this._pressComposer);
            }
            if (!firstTime) {
                this.prepareForActivationEvents();
            }
        }
    },

    exitDocument: {
        value: function () {
            if (this._preparedForAction) {
                this._preparedForAction = false;
                this._fieldHeader.removeComposer(this._pressComposer);
                this._pressComposer.removeEventListener("press", this, false);
                this._pressComposer = null;
            }
        }
    },

    features: {
        get: function () {
            return this._features;
        },
        set: function (value) {
            if (value) {
                if (!this._featureRangeController) {
                    this._featureRangeController = new RangeController();
                }
                //} else if (this._featureRangeController.content) {
                //    this._featureRangeController.clear();
                //}
                this._features = value;
                //this._featureRangeController.addEach(this._features);
            }
        }
    },

    fields: {
        get: function() {
            return this._fields;
        },
        set: function (value) {
            if (value) {
                if (!this._fieldRangeController) {
                    this._fieldRangeController = new RangeController();
                } else if (this._fieldRangeController.content) {
                    this._fieldRangeController.clear();
                }
                this._fields = value;
                this._fields.unshift({
                    propertyName: "zoomTo",
                    alias: "Zoom To",
                    type: "action",
                    content: "\ue628"
                });
                this._fieldRangeController.addEach(this._fields);
            }
        }
    },

    handlePress: {
        value: function (e) {
            e.stopPropagation();
            var component = e.targetElement.component,
                field;
            if (component && component.field) {
                field = component.field;
                if (field && field.type == "action" && component.feature) {
                    this.application.map.centerOnAndZoomToFeature(component.feature);
                } else if (component.identifier === "fieldHeader") {
                    this._updateSort(field);
                }
            }
        }
    },



    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._preparedForAction = true;
                this._pressComposer.addEventListener("press", this, false);

            }
        }
    }
});
