/**
 * @module ui/identify-list.reel
 */
var Component = require("montage/ui/component").Component,
    PressComposer = require("montage/composer/press-composer").PressComposer,
    TreeController = require("montage/core/tree-controller").TreeController;

/**
 * @class IdentifyList
 * @extends Component
 */
exports.IdentifyList = Component.specialize(/** @lends IdentifyList# */ {
    constructor: {
        value: function IdentifyList() {


        }
    },

    _identifySummaries: { value: null },

    _preparedForAction: { value: false },

    _pressComposer: { value: null },

    _selectedItems: { value: [] },

    _treeController: { value: null },

    __treeList: { value: null },

    _treeList: {
        set: function (value) {
            if (value && !this.__treeList) {
                this.__treeList = value;
                this._treeController = new TreeController();
                this._treeController.data = {
                    name: "root",
                    children: this.identifySummaries
                };
                this.__treeList.controller = this._treeController;
                this._treeController.owner = this;
                this._treeController.defineBinding("data.children", {"<-": "owner.identifySummaries"});
            }
        }
    },

    handlePress: {
        value: function (e) {
            e.stopPropagation();
            var component, identify, index;
            component = e.targetElement.component;
            if (component) {
                identify = component.identify;
                if (identify) {
                    this.dispatchEventNamed("selectIdentifyAction", false, false, identify);
                } else if (component.identifier === "checkbox") {
                    identify = component.ownerComponent.identify;
                    index = this._selectedItems.indexOf(identify);
                    if (index !== -1) {
                        this._selectedItems.splice(index, 1);
                    } else {
                        this._selectedItems.push(identify);
                    }
                }

            }
        }
    },

    identifySummaries: {
        get: function () {
            return this._identifySummaries;
        },
        set: function (value) {

            if (value && Array.isArray(value)) {
                this._identifySummaries = value;
                this.dispatchOwnPropertyChange("identifySummaries", this._identifySummaries);
            }
        }
    },

    prepareForActivationEvents: {
        value: function () {
            if (!this._preparedForAction) {
                this._pressComposer = new PressComposer();
                this.addComposer(this._pressComposer);
                this._pressComposer.addEventListener("press", this);
            }
        }
    },

    selectedItems: {
        get: function () {
            return this._selectedItems;
        }
    }



});
